"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var LevelControlServer_exports = {};
__export(LevelControlServer_exports, {
  LevelControlDefaultClusterHandler: () => LevelControlDefaultClusterHandler,
  createDefaultLevelControlClusterServer: () => createDefaultLevelControlClusterServer
});
module.exports = __toCommonJS(LevelControlServer_exports);
var import_clusters = require("#clusters");
var import_general = require("#general");
var import_Device = require("../../device/Device.js");
var import_ClusterServer = require("./ClusterServer.js");
/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
const LevelControlDefaultClusterHandler = () => ({
  moveToLevel: async ({ request: { level }, attributes: { currentLevel } }) => {
    currentLevel.setLocal(level);
  },
  // TODO: How much this capability should be in the library vs. in the caller of the library? Doing the
  // move/step/stop (withOnOff) in the library would be making assumptions about the capabilities of the
  // underlying hardware. But how to expose these parameters to the caller of the library? Callback with
  // temporary options?
  move: async () => {
    throw new import_general.NotImplementedError("Not implemented");
  },
  step: async () => {
    throw new import_general.NotImplementedError("Not implemented");
  },
  stop: async () => {
    throw new import_general.NotImplementedError("Not implemented");
  },
  moveToLevelWithOnOff: async function({ request: { level }, attributes: { currentLevel } }) {
    currentLevel.setLocal(level);
  },
  moveWithOnOff: async () => {
    throw new import_general.NotImplementedError("Not implemented");
  },
  stepWithOnOff: async () => {
    throw new import_general.NotImplementedError("Not implemented");
  },
  stopWithOnOff: async () => {
    throw new import_general.NotImplementedError("Not implemented");
  }
});
const createDefaultLevelControlClusterServer = (commandHandler, attributeInitialValues) => (0, import_ClusterServer.ClusterServer)(
  import_clusters.LevelControl.Cluster,
  attributeInitialValues ?? {
    currentLevel: 0,
    onLevel: 0,
    options: {
      executeIfOff: false,
      coupleColorTempToLevel: false
    }
  },
  (0, import_Device.WrapCommandHandler)(LevelControlDefaultClusterHandler(), commandHandler)
);
//# sourceMappingURL=LevelControlServer.js.map
