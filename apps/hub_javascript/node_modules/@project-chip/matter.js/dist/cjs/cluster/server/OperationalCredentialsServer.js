"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var OperationalCredentialsServer_exports = {};
__export(OperationalCredentialsServer_exports, {
  OperationalCredentialsClusterHandler: () => OperationalCredentialsClusterHandler
});
module.exports = __toCommonJS(OperationalCredentialsServer_exports);
var import_clusters = require("#clusters");
var import_general = require("#general");
var import_MatterDevice = require("#MatterDevice.js");
var import_model = require("#model");
var import_protocol = require("#protocol");
var import_types = require("#types");
/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
const logger = import_general.Logger.get("OperationalCredentialsServer");
import_clusters.OperationalCredentials.Cluster.commands = {
  ...import_clusters.OperationalCredentials.Cluster.commands,
  attestationRequest: (0, import_types.Command)(
    0,
    (0, import_types.TlvObject)({ attestationNonce: (0, import_types.TlvField)(0, import_types.TlvByteString) }),
    1,
    import_clusters.OperationalCredentials.TlvAttestationResponse,
    { invokeAcl: import_model.AccessLevel.Administer }
  ),
  csrRequest: (0, import_types.Command)(
    4,
    (0, import_types.TlvObject)({
      csrNonce: (0, import_types.TlvField)(0, import_types.TlvByteString),
      isForUpdateNoc: (0, import_types.TlvOptionalField)(1, import_types.TlvBoolean)
    }),
    5,
    import_clusters.OperationalCredentials.TlvCsrResponse,
    { invokeAcl: import_model.AccessLevel.Administer }
  )
};
const OperationalCredentialsClusterHandler = (certificates, productDescription) => {
  let certification = void 0;
  const cert = () => {
    if (certification !== void 0) {
      return certification;
    }
    return certification = new import_protocol.DeviceCertification(certificates, productDescription);
  };
  const assureCertification = async () => {
    await cert().construction;
  };
  return {
    attestationRequest: async ({ request: { attestationNonce }, session }) => {
      if (attestationNonce.length !== 32) {
        throw new import_types.StatusResponseError("Invalid attestation nonce length", import_types.StatusCode.InvalidCommand);
      }
      (0, import_protocol.assertSecureSession)(session);
      await assureCertification();
      const elements = import_protocol.TlvAttestation.encode({
        declaration: cert().declaration,
        attestationNonce,
        timestamp: 0
      });
      return { attestationElements: elements, attestationSignature: cert().sign(session, elements) };
    },
    csrRequest: async ({ request: { csrNonce, isForUpdateNoc }, session }) => {
      if (csrNonce.length !== 32) {
        throw new import_types.StatusResponseError("Invalid CSR nonce length", import_types.StatusCode.InvalidCommand);
      }
      (0, import_protocol.assertSecureSession)(session);
      if (isForUpdateNoc && session.isPase) {
        throw new import_types.StatusResponseError(
          "csrRequest for UpdateNoc received on a PASE session.",
          import_types.StatusCode.InvalidCommand
        );
      }
      const device = import_MatterDevice.MatterDevice.of(session);
      device.assertFailSafeArmed("csrRequest received while failsafe is not armed.");
      const timedOp = device.failsafeContext;
      if (timedOp.fabricIndex !== void 0) {
        throw new import_types.StatusResponseError(
          `csrRequest received after ${timedOp.forUpdateNoc ? "UpdateNOC" : "AddNOC"} already invoked.`,
          import_types.StatusCode.ConstraintError
        );
      }
      await assureCertification();
      const certSigningRequest = timedOp.createCertificateSigningRequest(isForUpdateNoc ?? false, session.id);
      const nocsrElements = import_protocol.TlvCertSigningRequest.encode({ certSigningRequest, csrNonce });
      return { nocsrElements, attestationSignature: cert().sign(session, nocsrElements) };
    },
    certificateChainRequest: async ({ request: { certificateType } }) => {
      await assureCertification();
      switch (certificateType) {
        case import_clusters.OperationalCredentials.CertificateChainType.DacCertificate:
          return { certificate: cert().certificate };
        case import_clusters.OperationalCredentials.CertificateChainType.PaiCertificate:
          return { certificate: cert().intermediateCertificate };
        default:
          throw new import_types.StatusResponseError(
            `Unsupported certificate type: ${certificateType}`,
            import_types.StatusCode.InvalidCommand
          );
      }
    },
    addNoc: async ({
      request: { nocValue, icacValue, ipkValue, caseAdminSubject, adminVendorId },
      attributes: { nocs, commissionedFabrics, fabrics, trustedRootCertificates, supportedFabrics },
      session,
      endpoint,
      message
    }) => {
      if (!session.isSecure)
        throw new import_general.MatterFlowError("addOperationalCert should be called on a secure session.");
      const failsafeContext = import_MatterDevice.MatterDevice.of(session).failsafeContext;
      if (failsafeContext.fabricIndex !== void 0) {
        throw new import_types.StatusResponseError(
          `addNoc received after ${failsafeContext.forUpdateNoc ? "UpdateNOC" : "AddNOC"} already invoked.`,
          import_types.StatusCode.ConstraintError
        );
      }
      if (!failsafeContext.hasRootCert) {
        return {
          statusCode: import_clusters.OperationalCredentials.NodeOperationalCertStatus.InvalidNoc,
          debugText: "Root certificate not found."
        };
      }
      if (failsafeContext.csrSessionId !== session.id) {
        return {
          statusCode: import_clusters.OperationalCredentials.NodeOperationalCertStatus.MissingCsr,
          debugText: "CSR not found in failsafe context."
        };
      }
      if (failsafeContext.forUpdateNoc) {
        throw new import_types.StatusResponseError(
          `addNoc received after csr request was invoked for UpdateNOC.`,
          import_types.StatusCode.ConstraintError
        );
      }
      if (import_MatterDevice.MatterDevice.of(session).getFabrics().length === supportedFabrics.getLocal()) {
        return {
          statusCode: import_clusters.OperationalCredentials.NodeOperationalCertStatus.TableFull,
          debugText: `No more fabrics can be added because limit ${supportedFabrics.getLocal()} reached.`
        };
      }
      let fabric;
      try {
        fabric = await failsafeContext.buildFabric({
          nocValue,
          icacValue,
          adminVendorId,
          ipkValue,
          caseAdminSubject
        });
      } catch (error) {
        logger.info("building fabric failed", error);
        if (error instanceof import_protocol.MatterFabricConflictError) {
          return {
            statusCode: import_clusters.OperationalCredentials.NodeOperationalCertStatus.FabricConflict,
            debugText: error.message
          };
        } else if (error instanceof import_protocol.FabricTableFullError) {
          return {
            statusCode: import_clusters.OperationalCredentials.NodeOperationalCertStatus.TableFull,
            debugText: error.message
          };
        } else if (error instanceof import_general.CryptoVerifyError || error instanceof import_protocol.CertificateError || error instanceof import_types.ValidationError || error instanceof import_general.UnexpectedDataError) {
          return {
            statusCode: import_clusters.OperationalCredentials.NodeOperationalCertStatus.InvalidNoc,
            debugText: error.message
          };
        } else if (error instanceof import_protocol.PublicKeyError) {
          return {
            statusCode: import_clusters.OperationalCredentials.NodeOperationalCertStatus.InvalidPublicKey,
            debugText: error.message
          };
        } else if (error instanceof import_protocol.MatterFabricInvalidAdminSubjectError) {
          return {
            statusCode: import_clusters.OperationalCredentials.NodeOperationalCertStatus.InvalidAdminSubject,
            debugText: error.message
          };
        }
        throw error;
      }
      await failsafeContext.addFabric(fabric);
      (0, import_protocol.assertSecureSession)(session);
      if (session.isPase) {
        logger.debug(`Add Fabric with index ${fabric.fabricIndex} to PASE session ${session.name}.`);
        session.addAssociatedFabric(fabric);
      }
      nocs.updated(session);
      commissionedFabrics.updated(session);
      fabrics.updated(session);
      trustedRootCertificates.updated(session);
      const aclServer = endpoint.getClusterServer(import_clusters.AccessControl.Cluster);
      if (aclServer !== void 0) {
        aclServer.attributes.acl.set(
          [
            {
              fabricIndex: fabric.fabricIndex,
              privilege: import_clusters.AccessControl.AccessControlEntryPrivilege.Administer,
              authMode: import_clusters.AccessControl.AccessControlEntryAuthMode.Case,
              subjects: [caseAdminSubject],
              targets: null
              // entire node
            }
          ],
          session,
          message,
          false,
          true
        );
      }
      logger.info(`addNoc success, adminVendorId ${adminVendorId}, caseAdminSubject ${caseAdminSubject}`);
      return { statusCode: import_clusters.OperationalCredentials.NodeOperationalCertStatus.Ok, fabricIndex: fabric.fabricIndex };
    },
    fabricsAttributeGetter: ({ session, isFabricFiltered }) => {
      if (session === void 0 || !session.isSecure) return [];
      const fabrics = isFabricFiltered ? [session.associatedFabric] : import_MatterDevice.MatterDevice.of(session).getFabrics();
      return fabrics.map((fabric) => ({
        fabricId: fabric.fabricId,
        label: fabric.label,
        nodeId: fabric.nodeId,
        rootPublicKey: fabric.rootPublicKey,
        vendorId: fabric.rootVendorId,
        fabricIndex: fabric.fabricIndex
      }));
    },
    // Needed because FabricScopedAttributeServer clas requires both getter and setter if custom
    fabricsAttributeSetter: () => {
      throw new import_general.MatterFlowError("fabrics attribute is read-only.");
    },
    nocsAttributeGetter: ({ session, isFabricFiltered }) => {
      if (session === void 0 || !session.isSecure) return [];
      const fabrics = isFabricFiltered ? [session.associatedFabric] : import_MatterDevice.MatterDevice.of(session).getFabrics();
      return fabrics.map((fabric) => ({
        noc: fabric.operationalCert,
        icac: fabric.intermediateCACert ?? null,
        fabricIndex: fabric.fabricIndex
      }));
    },
    // Needed because FabricScopedAttributeServer clas requires both getter and setter if custom
    nocsAttributeSetter: () => {
      throw new import_general.MatterFlowError("fabrics attribute is read-only.");
    },
    commissionedFabricsAttributeGetter: ({ session }) => {
      if (session === void 0 || !session.isSecure) return 0;
      return import_MatterDevice.MatterDevice.of(session).getFabrics().length;
    },
    trustedRootCertificatesAttributeGetter: ({ session }) => {
      if (session === void 0 || !session.isSecure) {
        logger.debug(`trustedRootCertificatesAttributeGetter: session not set or not secure ${!!session}`);
        return [];
      }
      if (!session.isSecure)
        throw new import_general.MatterFlowError("addOperationalCert should be called on a secure session.");
      const rootCerts = import_MatterDevice.MatterDevice.of(session).getFabrics().map((fabric) => fabric.rootCert);
      const device = import_MatterDevice.MatterDevice.of(session);
      if (device.isFailsafeArmed()) {
        const failsafeContext = device.failsafeContext;
        const temporaryRootCert = failsafeContext.rootCert;
        if (temporaryRootCert !== void 0) {
          logger.debug(`Add temporary trusted root certificate to the list.`);
          rootCerts.push(temporaryRootCert);
        } else {
          logger.debug(`No temporary trusted root certificate to be added.`);
        }
      }
      return rootCerts;
    },
    currentFabricIndexAttributeGetter: ({ session }) => {
      if (session === void 0 || !session.isSecure) return import_types.FabricIndex.NO_FABRIC;
      (0, import_protocol.assertSecureSession)(session);
      return session.fabric?.fabricIndex ?? import_types.FabricIndex.NO_FABRIC;
    },
    updateNoc: async ({ request: { nocValue, icacValue }, attributes: { nocs, fabrics }, session }) => {
      (0, import_protocol.assertSecureSession)(session);
      session.associatedFabric;
      const failsafeContext = import_MatterDevice.MatterDevice.of(session).failsafeContext;
      if (failsafeContext.fabricIndex !== void 0) {
        throw new import_types.StatusResponseError(
          `updateNoc received after ${failsafeContext.forUpdateNoc ? "UpdateNOC" : "AddNOC"} already invoked.`,
          import_types.StatusCode.ConstraintError
        );
      }
      if (failsafeContext.forUpdateNoc) {
        throw new import_types.StatusResponseError(
          `addNoc received after csr request was invoked for UpdateNOC.`,
          import_types.StatusCode.ConstraintError
        );
      }
      if (failsafeContext.hasRootCert) {
        throw new import_types.StatusResponseError(
          "Trusted root certificate added in this session which is now allowed for UpdateNOC.",
          import_types.StatusCode.ConstraintError
        );
      }
      if (!failsafeContext.forUpdateNoc) {
        throw new import_types.StatusResponseError("csrRequest not invoked for UpdateNOC.", import_types.StatusCode.ConstraintError);
      }
      if (session.associatedFabric.fabricIndex !== failsafeContext.associatedFabric?.fabricIndex) {
        throw new import_types.StatusResponseError(
          "Fabric of this session and the failsafe context do not match.",
          import_types.StatusCode.ConstraintError
        );
      }
      try {
        const updateFabric = await failsafeContext.buildUpdatedFabric(nocValue, icacValue);
        await failsafeContext.updateFabric(updateFabric);
        nocs.updated(session);
        fabrics.updated(session);
        return {
          statusCode: import_clusters.OperationalCredentials.NodeOperationalCertStatus.Ok,
          fabricIndex: updateFabric.fabricIndex
        };
      } catch (error) {
        logger.info("building fabric for update failed", error);
        if (error instanceof import_general.CryptoVerifyError || error instanceof import_protocol.CertificateError || error instanceof import_types.ValidationError || error instanceof import_general.UnexpectedDataError) {
          return {
            statusCode: import_clusters.OperationalCredentials.NodeOperationalCertStatus.InvalidNoc,
            debugText: error.message
          };
        } else if (error instanceof import_protocol.PublicKeyError) {
          return {
            statusCode: import_clusters.OperationalCredentials.NodeOperationalCertStatus.InvalidPublicKey,
            debugText: error.message
          };
        }
        throw error;
      }
    },
    updateFabricLabel: async ({ request: { label }, attributes: { fabrics }, session }) => {
      (0, import_protocol.assertSecureSession)(session, "updateOperationalCert should be called on a secure session.");
      const fabric = session.associatedFabric;
      const currentFabricIndex = fabric.fabricIndex;
      const conflictingLabelFabric = import_MatterDevice.MatterDevice.of(session).getFabrics().find((f) => f.label === label && f.fabricIndex !== currentFabricIndex);
      if (conflictingLabelFabric !== void 0) {
        return {
          statusCode: import_clusters.OperationalCredentials.NodeOperationalCertStatus.LabelConflict,
          debugText: `Label ${label} already used by fabric ${conflictingLabelFabric.fabricIndex}`
        };
      }
      await fabric.setLabel(label);
      fabrics.updated(session);
      return { statusCode: import_clusters.OperationalCredentials.NodeOperationalCertStatus.Ok, fabricIndex: fabric.fabricIndex };
    },
    removeFabric: async ({
      request: { fabricIndex },
      attributes: { nocs, commissionedFabrics, fabrics, trustedRootCertificates },
      session,
      endpoint
    }) => {
      const fabric = import_MatterDevice.MatterDevice.of(session).getFabricByIndex(fabricIndex);
      if (fabric === void 0) {
        return {
          statusCode: import_clusters.OperationalCredentials.NodeOperationalCertStatus.InvalidFabricIndex,
          debugText: `Fabric ${fabricIndex} not found`
        };
      }
      const basicInformationCluster = endpoint.getClusterServer(import_clusters.BasicInformation.Cluster);
      basicInformationCluster?.triggerLeaveEvent?.({ fabricIndex });
      (0, import_protocol.assertSecureSession)(session);
      await fabric.remove(session.id);
      nocs.updated(session);
      commissionedFabrics.updated(session);
      fabrics.updated(session);
      trustedRootCertificates.updated(session);
      return {
        statusCode: import_clusters.OperationalCredentials.NodeOperationalCertStatus.Ok,
        fabricIndex
      };
    },
    addTrustedRootCertificate: async ({
      request: { rootCaCertificate },
      attributes: { trustedRootCertificates },
      session
    }) => {
      (0, import_protocol.assertSecureSession)(session);
      const failsafeContext = import_MatterDevice.MatterDevice.of(session).failsafeContext;
      if (failsafeContext.hasRootCert) {
        throw new import_types.StatusResponseError(
          "Trusted root certificate already added in this FailSafe context.",
          import_types.StatusCode.ConstraintError
        );
      }
      if (failsafeContext.fabricIndex !== void 0) {
        throw new import_types.StatusResponseError(
          `Cannot add trusted root certificates after ${failsafeContext.forUpdateNoc ? "UpdateNOC" : "AddNOC"}.`,
          import_types.StatusCode.ConstraintError
        );
      }
      try {
        failsafeContext.setRootCert(rootCaCertificate);
      } catch (error) {
        logger.info("setting root certificate failed", error);
        if (error instanceof import_general.CryptoVerifyError || error instanceof import_protocol.CertificateError || error instanceof import_types.ValidationError || error instanceof import_general.UnexpectedDataError) {
          throw new import_types.StatusResponseError(error.message, import_types.StatusCode.InvalidCommand);
        }
        throw error;
      }
      trustedRootCertificates.updated(session);
    }
  };
};
//# sourceMappingURL=OperationalCredentialsServer.js.map
