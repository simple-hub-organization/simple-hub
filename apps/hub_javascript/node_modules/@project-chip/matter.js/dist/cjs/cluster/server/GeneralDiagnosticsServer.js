"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var GeneralDiagnosticsServer_exports = {};
__export(GeneralDiagnosticsServer_exports, {
  GeneralDiagnosticsClusterHandler: () => GeneralDiagnosticsClusterHandler,
  createDefaultGeneralDiagnosticsClusterServer: () => createDefaultGeneralDiagnosticsClusterServer
});
module.exports = __toCommonJS(GeneralDiagnosticsServer_exports);
var import_clusters = require("#clusters");
var import_general = require("#general");
var import_Device = require("../../device/Device.js");
var import_ClusterServer = require("./ClusterServer.js");
/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
const GeneralDiagnosticsClusterHandler = async () => {
  let bootUpTime = 0;
  let totalOperationalHoursAttribute = void 0;
  const totalOperationalHoursUpdateTimer = import_general.Time.getPeriodicTimer(
    "GeneralDiagnosticsCluster.totalOperationalHoursUpdate",
    60 * 601e3,
    () => {
      if (totalOperationalHoursAttribute === void 0) return;
      totalOperationalHoursAttribute.setLocal(totalOperationalHoursAttribute.getLocal() + 1);
    }
  );
  const network = import_general.Network.get();
  const interfaces = await network.getNetInterfaces();
  const interfaceDetails = new Array();
  for (const { name, type } of interfaces) {
    const details = await network.getIpMac(name);
    if (details !== void 0) {
      interfaceDetails.push({ name, type, ...details });
    }
  }
  return {
    initializeClusterServer: ({ attributes: { totalOperationalHours, networkInterfaces } }) => {
      bootUpTime = import_general.Time.nowMs();
      if (totalOperationalHours?.getLocal() !== void 0) {
        totalOperationalHoursAttribute = totalOperationalHours;
        totalOperationalHoursUpdateTimer.start();
      }
      networkInterfaces.setLocal(
        interfaceDetails.filter(({ mac }) => mac !== "00:00:00:00:00:00").slice(0, 8).map(({ name, mac, ipV4, ipV6, type }) => ({
          name: name.substring(0, 32),
          isOperational: true,
          offPremiseServicesReachableIPv4: null,
          // null means unknown or not supported
          offPremiseServicesReachableIPv6: null,
          // null means unknown or not supported
          hardwareAddress: import_general.Bytes.fromHex(mac.replace(/[^\da-fA-F]/g, "")),
          iPv4Addresses: ipV4.slice(0, 4).map((ip) => (0, import_general.ipv4ToBytes)(ip)),
          iPv6Addresses: ipV6.slice(0, 8).map((ip) => (0, import_general.ipv6ToBytes)(ip)),
          type: type ?? import_clusters.GeneralDiagnostics.InterfaceType.Ethernet
        }))
      );
    },
    destroyClusterServer: () => {
      totalOperationalHoursUpdateTimer.stop();
    },
    upTimeAttributeGetter: () => {
      return Math.round((import_general.Time.nowMs() - bootUpTime) / 1e3);
    },
    testEventTrigger: () => {
    },
    timeSnapshot: () => {
      throw new import_general.NotImplementedError();
    }
  };
};
const createDefaultGeneralDiagnosticsClusterServer = async (commandHandler) => (0, import_ClusterServer.ClusterServer)(
  import_clusters.GeneralDiagnosticsCluster,
  {
    networkInterfaces: [],
    rebootCount: 0,
    upTime: 0,
    totalOperationalHours: 0,
    bootReason: import_clusters.GeneralDiagnostics.BootReason.Unspecified,
    activeHardwareFaults: [],
    activeRadioFaults: [],
    activeNetworkFaults: [],
    testEventTriggersEnabled: false
  },
  (0, import_Device.WrapCommandHandler)(await GeneralDiagnosticsClusterHandler(), commandHandler),
  {
    bootReason: true
  }
);
//# sourceMappingURL=GeneralDiagnosticsServer.js.map
