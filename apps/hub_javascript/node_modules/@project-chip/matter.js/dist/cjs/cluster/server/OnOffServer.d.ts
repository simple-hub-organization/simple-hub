/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { OnOff } from "#clusters";
import { NamedHandler } from "#general";
import { AttributeInitialValues, ClusterServerHandlers } from "./ClusterServerTypes.js";
declare const Cluster: import("@matter/types").ClusterComposer.Of<import("@matter/types").ClusterType.Of<{
    readonly base: import("@matter/types").ClusterType.Of<{
        readonly id: 6;
        readonly name: "OnOff";
        readonly revision: 6;
        readonly features: {
            readonly lighting: import("@matter/types").BitFlag;
            readonly deadFrontBehavior: import("@matter/types").BitFlag;
            readonly offOnly: import("@matter/types").BitFlag;
        };
        readonly attributes: {
            readonly onOff: import("@matter/types").Attribute<boolean, any>;
        };
        readonly commands: {
            readonly off: import("@matter/types").Command<void, void, any>;
        };
        readonly extensions: readonly [{
            readonly flags: {
                readonly lighting: true;
            };
            readonly component: {
                readonly attributes: {
                    readonly globalSceneControl: import("@matter/types").Attribute<boolean, any>;
                    readonly onTime: import("@matter/types").WritableAttribute<number, any>;
                    readonly offWaitTime: import("@matter/types").WritableAttribute<number, any>;
                    readonly startUpOnOff: import("@matter/types").WritableAttribute<OnOff.StartUpOnOff | null, any>;
                };
                readonly commands: {
                    readonly offWithEffect: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                        effectIdentifier: import("@matter/types").FieldType<OnOff.EffectIdentifier>;
                        effectVariant: import("@matter/types").FieldType<number>;
                    }>, void, any>;
                    readonly onWithRecallGlobalScene: import("@matter/types").Command<void, void, any>;
                    readonly onWithTimedOff: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                        onOffControl: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                            acceptOnlyWhenOn: import("@matter/types").BitFlag;
                        }>>;
                        onTime: import("@matter/types").FieldType<number>;
                        offWaitTime: import("@matter/types").FieldType<number>;
                    }>, void, any>;
                };
            };
        }, {
            readonly flags: {
                readonly offOnly: false;
            };
            readonly component: {
                readonly commands: {
                    readonly on: import("@matter/types").Command<void, void, any>;
                    readonly toggle: import("@matter/types").Command<void, void, any>;
                };
            };
        }, {
            readonly flags: {
                readonly lighting: true;
                readonly offOnly: true;
            };
            readonly component: false;
        }, {
            readonly flags: {
                readonly deadFrontBehavior: true;
                readonly offOnly: true;
            };
            readonly component: false;
        }, {
            readonly flags: {
                readonly offOnly: true;
                readonly lighting: false;
                readonly deadFrontBehavior: true;
            };
            readonly component: false;
        }];
    }>;
    readonly id: 6;
    readonly name: "OnOff";
    readonly revision: 6;
    readonly features: {
        readonly lighting: import("@matter/types").BitFlag;
        readonly deadFrontBehavior: import("@matter/types").BitFlag;
        readonly offOnly: import("@matter/types").BitFlag;
    };
    readonly attributes: {
        readonly onOff: import("@matter/types").Attribute<boolean, any>;
    };
    readonly commands: {
        readonly off: import("@matter/types").Command<void, void, any>;
    };
    readonly extensions: readonly [{
        readonly flags: {
            readonly lighting: true;
        };
        readonly component: {
            readonly attributes: {
                readonly globalSceneControl: import("@matter/types").Attribute<boolean, any>;
                readonly onTime: import("@matter/types").WritableAttribute<number, any>;
                readonly offWaitTime: import("@matter/types").WritableAttribute<number, any>;
                readonly startUpOnOff: import("@matter/types").WritableAttribute<OnOff.StartUpOnOff | null, any>;
            };
            readonly commands: {
                readonly offWithEffect: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                    effectIdentifier: import("@matter/types").FieldType<OnOff.EffectIdentifier>;
                    effectVariant: import("@matter/types").FieldType<number>;
                }>, void, any>;
                readonly onWithRecallGlobalScene: import("@matter/types").Command<void, void, any>;
                readonly onWithTimedOff: import("@matter/types").Command<import("@matter/types").TypeFromFields<{
                    onOffControl: import("@matter/types").FieldType<import("@matter/types").TypeFromPartialBitSchema<{
                        acceptOnlyWhenOn: import("@matter/types").BitFlag;
                    }>>;
                    onTime: import("@matter/types").FieldType<number>;
                    offWaitTime: import("@matter/types").FieldType<number>;
                }>, void, any>;
            };
        };
    }, {
        readonly flags: {
            readonly offOnly: false;
        };
        readonly component: {
            readonly commands: {
                readonly on: import("@matter/types").Command<void, void, any>;
                readonly toggle: import("@matter/types").Command<void, void, any>;
            };
        };
    }, {
        readonly flags: {
            readonly lighting: true;
            readonly offOnly: true;
        };
        readonly component: false;
    }, {
        readonly flags: {
            readonly deadFrontBehavior: true;
            readonly offOnly: true;
        };
        readonly component: false;
    }, {
        readonly flags: {
            readonly offOnly: true;
            readonly lighting: false;
            readonly deadFrontBehavior: true;
        };
        readonly component: false;
    }];
}>, readonly ["Lighting"]>;
export declare const OnOffClusterDefaultHandler: () => ClusterServerHandlers<typeof Cluster>;
export declare const createDefaultOnOffClusterServer: (commandHandler?: NamedHandler<any>, attributeInitialValues?: AttributeInitialValues<typeof OnOff.Complete.attributes>, isLighting?: boolean) => import("./ClusterServerTypes.js").ClusterServerObj<OnOff.Cluster>;
export {};
//# sourceMappingURL=OnOffServer.d.ts.map