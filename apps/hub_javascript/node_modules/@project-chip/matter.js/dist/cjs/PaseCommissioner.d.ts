import { CertificateAuthority, CommissionableDevice, CommissionableDeviceIdentifiers, DiscoveryData, Fabric } from "#protocol";
import { DiscoveryCapabilitiesBitmap, NodeId, TypeFromPartialBitSchema } from "#types";
import { CommissioningControllerOptions, ControllerEnvironmentOptions, NodeCommissioningOptions } from "./CommissioningController.js";
import { MatterController } from "./MatterController.js";
type PaseCommissionerOptions = Omit<CommissioningControllerOptions, "environment"> & {
    /** The environment for the controller. */
    environment: ControllerEnvironmentOptions;
    /** The root certificate data for the controller. */
    certificateAuthorityConfig: CertificateAuthority.Configuration;
    /** The fabric config of the controller. */
    fabricConfig: Fabric.Config;
};
/**
 * This represents a lightweight commissioner that can be used to start the commissioning process to commission
 * devices into an existing controller fabric. Once the initial commissioning process is completed, it uses a callback
 * to all to complete the commissioning process.
 */
export declare class PaseCommissioner {
    private readonly options;
    private readonly environment;
    private controllerInstance?;
    /**
     * Creates a new CommissioningController instance
     *
     * @param options The options for the CommissioningController
     */
    constructor(options: PaseCommissionerOptions);
    get nodeId(): NodeId | undefined;
    assertControllerIsStarted(errorText?: string): MatterController;
    /** Internal method to initialize a MatterController instance. */
    private initializeController;
    /**
     * Commissions/Pairs a new device into the controller fabric. The method returns the NodeId of the commissioned node.
     *
     * Use the connectNodeAfterCommissioning callback to implement an own logic to do the operative device discovery and
     * to complete the commissioning process.
     * Return true when the commissioning process is completed successfully, false on error.
     */
    commissionNode(nodeOptions: NodeCommissioningOptions, completeCommissioningCallback: (peerNodeId: NodeId, discoveryData?: DiscoveryData) => Promise<boolean>): Promise<NodeId>;
    /** Disconnects all connected nodes and Closes the network connections and other resources of the controller. */
    close(): Promise<void>;
    /** Initialize the controller. */
    start(): Promise<void>;
    cancelCommissionableDeviceDiscovery(identifierData: CommissionableDeviceIdentifiers, discoveryCapabilities?: TypeFromPartialBitSchema<typeof DiscoveryCapabilitiesBitmap>): void;
    discoverCommissionableDevices(identifierData: CommissionableDeviceIdentifiers, discoveryCapabilities?: TypeFromPartialBitSchema<typeof DiscoveryCapabilitiesBitmap>, discoveredCallback?: (device: CommissionableDevice) => void, timeoutSeconds?: number): Promise<CommissionableDevice[]>;
}
export {};
//# sourceMappingURL=PaseCommissioner.d.ts.map