"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var Aggregator_exports = {};
__export(Aggregator_exports, {
  Aggregator: () => Aggregator
});
module.exports = __toCommonJS(Aggregator_exports);
var import_clusters = require("#clusters");
var import_general = require("#general");
var import_ClusterServer = require("../cluster/server/ClusterServer.js");
var import_DeviceTypes = require("./DeviceTypes.js");
var import_Endpoint = require("./Endpoint.js");
/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
class Aggregator extends import_Endpoint.Endpoint {
  /**
   * Create a new Aggregator instance and optionally directly add devices to it. If this is used the devices must
   * already have the BridgedDeviceBasicInformationCluster added!
   * @param devices Array of devices to add
   * @param options Optional Endpoint options
   */
  constructor(devices = [], options = {}) {
    super([import_DeviceTypes.DeviceTypes.AGGREGATOR], options);
    devices.forEach((device) => this.addBridgedDevice(device));
  }
  /**
   * Add a bridged device to the Aggregator. If provided the bridgedBasicInformation is used to automatically add the
   * BridgedDeviceBasicInformationCluster to the device and also handles Reachability event triggering when
   * reachability event changes. If not provided the BridgedDeviceBasicInformationCluster must be already existing
   * on the device!
   *
   * @param device Device instance to add
   * @param bridgedBasicInformation Optional BridgedDeviceBasicInformationCluster attribute values to
   */
  addBridgedDevice(device, bridgedBasicInformation) {
    const deviceTypes = device.getDeviceTypes();
    if (!deviceTypes.includes(import_DeviceTypes.DeviceTypes.BRIDGED_NODE)) {
      deviceTypes.push(import_DeviceTypes.DeviceTypes.BRIDGED_NODE);
      device.setDeviceTypes(deviceTypes);
    }
    if (bridgedBasicInformation !== void 0) {
      const bridgedBasicInformationCluster = (0, import_ClusterServer.ClusterServer)(
        import_clusters.BridgedDeviceBasicInformationCluster,
        bridgedBasicInformation,
        {},
        {
          reachableChanged: true
        }
      );
      device.addClusterServer(bridgedBasicInformationCluster);
      bridgedBasicInformationCluster.subscribeReachableAttribute((newValue) => {
        bridgedBasicInformationCluster.triggerReachableChangedEvent({ reachableNewValue: newValue });
      });
    } else {
      if (!device.hasClusterServer(import_clusters.BridgedDeviceBasicInformationCluster)) {
        throw new import_general.ImplementationError(
          "BridgedDeviceBasicInformationCluster is required for bridged devices. Please add yourself or provide as second parameter"
        );
      }
    }
    this.addChildEndpoint(device);
  }
  /**
   * Add a bridged device with power source information to the Aggregator. If provided the bridgedBasicInformation is
   * used to automatically add the BridgedDeviceBasicInformationCluster to the device. If not provided the
   * BridgedDeviceBasicInformationCluster must be already existing on the device!
   * The required clusters PowerSourceConfigurationCluster and PowerSourceCluster needs to be added manually to the device!
   *
   * @param device Device instance to add
   * @param bridgedBasicInformation Optional BridgedDeviceBasicInformationCluster attribute values to
   */
  addBridgedDeviceWithPowerSourceInfo(device, bridgedBasicInformation) {
    const deviceTypes = device.getDeviceTypes();
    if (!deviceTypes.includes(import_DeviceTypes.DeviceTypes.BRIDGED_DEVICE_WITH_POWERSOURCE_INFO)) {
      deviceTypes.push(import_DeviceTypes.DeviceTypes.BRIDGED_DEVICE_WITH_POWERSOURCE_INFO);
      device.setDeviceTypes(deviceTypes);
    }
    if (bridgedBasicInformation !== void 0) {
      device.addClusterServer((0, import_ClusterServer.ClusterServer)(import_clusters.BridgedDeviceBasicInformationCluster, bridgedBasicInformation, {}));
    } else {
      if (!device.hasClusterServer(import_clusters.BridgedDeviceBasicInformationCluster)) {
        throw new import_general.ImplementationError(
          "BridgedDeviceBasicInformationCluster is required for bridged devices. Please add yourself or provide as second parameter"
        );
      }
    }
    this.addChildEndpoint(device);
  }
  /**
   * Returns all bridged devices added to the Aggregator
   *
   * @returns Array of bridged devices
   */
  getBridgedDevices() {
    return this.getChildEndpoints();
  }
  removeBridgedDevice(device) {
    this.removeChildEndpoint(device);
  }
}
//# sourceMappingURL=Aggregator.js.map
