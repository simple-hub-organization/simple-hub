"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var DimmableDevices_exports = {};
__export(DimmableDevices_exports, {
  DimmableLightDevice: () => DimmableLightDevice,
  DimmablePluginUnitDevice: () => DimmablePluginUnitDevice
});
module.exports = __toCommonJS(DimmableDevices_exports);
var import_clusters = require("#clusters");
var import_general = require("#general");
var import_LevelControlServer = require("../cluster/server/LevelControlServer.js");
var import_OnOffServer = require("../cluster/server/OnOffServer.js");
var import_DeviceTypes = require("./DeviceTypes.js");
var import_OnOffDevices = require("./OnOffDevices.js");
class DimmableBaseDevice extends (0, import_general.extendPublicHandlerMethods)(
  import_OnOffDevices.OnOffBaseDevice
) {
  constructor(definition, attributeInitialValues, options = {}, isLighting = false) {
    super(definition, attributeInitialValues, options, isLighting);
  }
  addDeviceClusters(attributeInitialValues, excludeList = []) {
    super.addDeviceClusters(attributeInitialValues, [...excludeList, import_clusters.OnOff.Cluster.id, import_clusters.LevelControl.Cluster.id]);
    if (!excludeList.includes(import_clusters.OnOff.Cluster.id)) {
      this.addClusterServer(
        (0, import_OnOffServer.createDefaultOnOffClusterServer)(
          this.commandHandler,
          (0, import_OnOffDevices.getClusterInitialAttributeValues)(
            attributeInitialValues,
            import_clusters.OnOff.Cluster.with(import_clusters.OnOff.Feature.Lighting)
          ),
          this.isLighting
        )
      );
    }
    if (!excludeList.includes(import_clusters.LevelControl.Cluster.id)) {
      this.addClusterServer(
        (0, import_LevelControlServer.createDefaultLevelControlClusterServer)(
          this.commandHandler,
          (0, import_OnOffDevices.getClusterInitialAttributeValues)(
            attributeInitialValues,
            import_clusters.LevelControl.Cluster.with(import_clusters.LevelControl.Feature.OnOff, import_clusters.LevelControl.Feature.Lighting)
          )
        )
      );
    }
  }
  getCurrentLevel() {
    return this.getClusterServer(import_clusters.LevelControl.Cluster)?.getCurrentLevelAttribute() ?? 0;
  }
  setCurrentLevel(level) {
    this.getClusterServer(import_clusters.LevelControl.Cluster)?.setCurrentLevelAttribute(level);
  }
  /**
   * Adds a listener for the CurrentLevel attribute
   *
   * @param listener Listener function to be called when the attribute changes
   */
  addCurrentLevelListener(listener) {
    this.getClusterServer(import_clusters.LevelControl.Cluster)?.subscribeCurrentLevelAttribute(listener);
  }
}
class DimmablePluginUnitDevice extends DimmableBaseDevice {
  constructor(onOffAttributeInitialValues, dimmableAttributeValues, options = {}) {
    const initialAttributeValues = {};
    if (onOffAttributeInitialValues !== void 0) {
      initialAttributeValues[import_clusters.OnOff.Cluster.id] = onOffAttributeInitialValues;
    }
    if (dimmableAttributeValues !== void 0) {
      initialAttributeValues[import_clusters.LevelControl.Cluster.id] = dimmableAttributeValues;
    }
    super(import_DeviceTypes.DeviceTypes.DIMMABLE_PLUGIN_UNIT, initialAttributeValues, options, false);
  }
}
class DimmableLightDevice extends DimmableBaseDevice {
  constructor(onOffAttributeInitialValues, dimmableAttributeValues, options = {}) {
    const initialAttributeValues = {};
    if (onOffAttributeInitialValues !== void 0) {
      initialAttributeValues[import_clusters.OnOff.Cluster.id] = onOffAttributeInitialValues;
    }
    if (dimmableAttributeValues !== void 0) {
      initialAttributeValues[import_clusters.LevelControl.Cluster.id] = dimmableAttributeValues;
    }
    super(import_DeviceTypes.DeviceTypes.DIMMABLE_LIGHT, initialAttributeValues, options, true);
  }
}
//# sourceMappingURL=DimmableDevices.js.map
