/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { AtLeastOne } from "#general";
import { ClusterClientObj, EndpointInterface } from "#protocol";
import { Attributes, BitSchema, Cluster, ClusterId, ClusterType, Commands, DeviceTypeId, EndpointNumber, Events, TypeFromPartialBitSchema } from "#types";
import { ClusterServerObj } from "../cluster/server/ClusterServerTypes.js";
import { DeviceTypeDefinition } from "./DeviceTypes.js";
export interface EndpointOptions {
    endpointId?: EndpointNumber;
    uniqueStorageKey?: string;
}
export declare class Endpoint implements EndpointInterface {
    protected deviceTypes: AtLeastOne<DeviceTypeDefinition>;
    private readonly clusterServers;
    private readonly clusterClients;
    private readonly childEndpoints;
    number: EndpointNumber | undefined;
    uniqueStorageKey: string | undefined;
    name: string;
    private structureChangedCallback;
    private descriptorCluster;
    /**
     * Create a new Endpoint instance.
     *
     * @param deviceTypes One or multiple DeviceTypeDefinitions of the endpoint
     * @param options Options for the endpoint
     */
    constructor(deviceTypes: AtLeastOne<DeviceTypeDefinition>, options?: EndpointOptions);
    get deviceType(): DeviceTypeId;
    setStructureChangedCallback(callback: () => void): void;
    removeFromStructure(): void;
    close(): void;
    getNumber(): EndpointNumber;
    addFixedLabel(label: string, value: string): void;
    addUserLabel(label: string, value: string): void;
    addClusterServer<const T extends ClusterType>(cluster: ClusterServerObj<T>): void;
    addClusterClient(cluster: ClusterClientObj): void;
    getClusterServer<const T extends ClusterType>(cluster: T): ClusterServerObj<T> | undefined;
    getClusterClient<const T extends ClusterType>(cluster: T): ClusterClientObj<T> | undefined;
    getClusterServerById(clusterId: ClusterId): ClusterServerObj | undefined;
    getClusterClientById(clusterId: ClusterId): ClusterClientObj | undefined;
    hasClusterServer<F extends BitSchema, SF extends TypeFromPartialBitSchema<F>, A extends Attributes, C extends Commands, E extends Events>(cluster: Cluster<F, SF, A, C, E>): boolean;
    hasClusterClient<F extends BitSchema, SF extends TypeFromPartialBitSchema<F>, A extends Attributes, C extends Commands, E extends Events>(cluster: Cluster<F, SF, A, C, E>): boolean;
    getDeviceTypes(): AtLeastOne<DeviceTypeDefinition>;
    setDeviceTypes(deviceTypes: AtLeastOne<DeviceTypeDefinition>): void;
    addChildEndpoint(endpoint: EndpointInterface): void;
    getChildEndpoint(id: EndpointNumber): Endpoint | undefined;
    getChildEndpoints(): Endpoint[];
    protected removeChildEndpoint(endpoint: Endpoint): void;
    determineUniqueID(): string | undefined;
    verifyRequiredClusters(): void;
    getAllClusterServers(): ClusterServerObj[];
    getAllClusterClients(): ClusterClientObj[];
    updatePartsList(): EndpointNumber[];
}
//# sourceMappingURL=Endpoint.d.ts.map