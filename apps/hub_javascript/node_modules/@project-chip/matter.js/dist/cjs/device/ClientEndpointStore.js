"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var ClientEndpointStore_exports = {};
__export(ClientEndpointStore_exports, {
  ClientEndpointStore: () => ClientEndpointStore
});
module.exports = __toCommonJS(ClientEndpointStore_exports);
var import_util = require("#compat/util.js");
var import_general = require("#general");
var import_node = require("#node");
/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
class ClientEndpointStore extends import_node.EndpointStore {
  #construction;
  #values = {};
  constructor(storage, load = true) {
    super(storage, load);
    this.#construction = (0, import_general.Construction)(this, async () => {
      await super.construction;
      if (load) {
        this.#values = this.initialValues;
        this.initialValues = {};
      }
    });
  }
  get construction() {
    return this.#construction;
  }
  get get() {
    return this.#values;
  }
  async set(values) {
    await this.construction;
    for (const behaviorId in values) {
      const behaviorValues = values[behaviorId];
      if (behaviorValues === void 0) {
        delete this.#values[behaviorId];
      } else {
        for (const key in behaviorValues) {
          const value = behaviorValues[key];
          if (value === void 0) {
            delete this.#values[behaviorId][key];
          } else {
            if (!this.#values[behaviorId]) {
              this.#values[behaviorId] = {};
            } else if ((0, import_util.isDeepEqual)(this.#values[behaviorId][key], value)) {
              delete behaviorValues[key];
            }
            this.#values[behaviorId][key] = value;
          }
        }
      }
    }
    await super.set(values);
  }
}
//# sourceMappingURL=ClientEndpointStore.js.map
