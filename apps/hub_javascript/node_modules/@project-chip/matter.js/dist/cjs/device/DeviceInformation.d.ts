/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { SupportedStorageTypes } from "@matter/general";
import { InteractionClient } from "@matter/protocol";
import { NodeId } from "@matter/types";
import { Endpoint } from "./Endpoint.js";
export type DeviceMetaInformation = {
    threadConnected: boolean;
    wifiConnected: boolean;
    ethernetConnected: boolean;
    rootEndpointServerList: number[];
    isBatteryPowered: boolean;
    isIntermittentlyConnected: boolean;
    isThreadSleepyEndDevice: boolean;
    dataRevision: number;
};
export type DeviceBasicInformation = Record<string, SupportedStorageTypes>;
export type DeviceInformationData = {
    basicInformation?: Record<string, SupportedStorageTypes>;
    deviceMeta?: DeviceMetaInformation;
};
export declare const DEVICE_DATA_REVISION = 1;
export declare class DeviceInformation {
    #private;
    readonly nodeId: NodeId;
    constructor(nodeId: NodeId, data: DeviceInformationData);
    get meta(): DeviceMetaInformation | undefined;
    get basicInformation(): DeviceBasicInformation | undefined;
    get valid(): boolean;
    enhanceDeviceDetailsFromCache(rootEndpoint: Endpoint): Promise<void>;
    enhanceDeviceDetailsFromRemote(interactionClient: InteractionClient): Promise<void>;
    determineSubscriptionParameters(options: {
        subscribeMinIntervalFloorSeconds?: number;
        subscribeMaxIntervalCeilingSeconds?: number;
    }): {
        minIntervalFloorSeconds: number;
        maxIntervalCeilingSeconds: number;
    };
    toStorageData(): DeviceInformationData;
}
//# sourceMappingURL=DeviceInformation.d.ts.map