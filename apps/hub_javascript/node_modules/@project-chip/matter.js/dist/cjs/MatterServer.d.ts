/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { StorageManager, SyncStorage } from "#general";
import { CommissioningController } from "./CommissioningController.js";
import { CommissioningServer } from "./CommissioningServer.js";
export type NodeOptions = {
    /** Unique storage key for this node to use for the storage context of this node. If not provided the order of node addition is used. */
    uniqueStorageKey?: string;
    /**
     * Deprecated name for uniqueStorageKey
     * TODO: Remove with 0.8 or such
     * @deprecated
     */
    uniqueNodeId?: string;
};
export type MatterServerOptions = {
    /** If set to true no IPv4 socket listener is sed and only IPv6 is supported. */
    disableIpv4?: boolean;
    /**
     * Interface to use for MDNS announcements. If not provided announcements will be sent from all network interfaces
     * TODO: Remove in later versions then 0.7
     * @deprecated
     */
    mdnsAnnounceInterface?: string;
    /**
     * Interface to use for MDNS announcements and scanning. If not provided announcements/scanning will be done on all
     * network interfaces
     */
    mdnsInterface?: string;
};
/**
 * Main Matter server class that represents the process on the host allowing to commission and pair multiple devices
 * by reusing MDNS scanner and broadcaster
 */
export declare class MatterServer {
    private readonly storageManager;
    private readonly options?;
    private started;
    private readonly nodes;
    private mdnsScanner?;
    private mdnsBroadcaster?;
    private readonly formerlyUsedPorts;
    /**
     * Create a new Matter server instance
     *
     * @param storageManager Storage manager instance to use for all nodes
     * @param options Optional MatterServer options
     */
    constructor(storageManager: StorageManager<SyncStorage>, options?: MatterServerOptions | undefined);
    get ipv4Disabled(): boolean;
    private getNextMatterPort;
    /**
     * Add a CommissioningServer node to the server
     *
     * @param commissioningServer CommissioningServer node to add
     * @param nodeOptions Optional options for the node (e.g. unique node id)
     */
    addCommissioningServer(commissioningServer: CommissioningServer, nodeOptions?: NodeOptions): Promise<void>;
    /**
     * Remove a CommissioningServer node from the server, close the CommissioningServer and optionally destroy the
     * storage context.
     *
     * @param commissioningServer CommissioningServer node to remove
     * @param destroyStorage If true the storage context will be destroyed
     */
    removeCommissioningServer(commissioningServer: CommissioningServer, destroyStorage?: boolean): Promise<void>;
    /**
     * Add a Controller node to the server
     *
     * @param commissioningController Controller node to add
     * @param nodeOptions Optional options for the node (e.g. unique node id)
     */
    addCommissioningController(commissioningController: CommissioningController, nodeOptions?: NodeOptions): Promise<void>;
    /**
     * Remove a Controller node from the server, close the Controller and optionally destroy the storage context.
     *
     * @param commissioningController Controller node to remove
     * @param destroyStorage If true the storage context will be destroyed
     */
    removeCommissioningController(commissioningController: CommissioningController, destroyStorage?: boolean): Promise<void>;
    /**
     * Start the server and all nodes. If the nodes do not have specified a delayed announcement or pairing they will
     * be announced/paired immediately.
     */
    start(): Promise<void>;
    private prepareNode;
    /**
     * Close the server and all nodes
     */
    close(): Promise<void>;
}
//# sourceMappingURL=MatterServer.d.ts.map