"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var certificate_exports = {};
__export(certificate_exports, {
  AttestationCertificateManager: () => import_protocol.AttestationCertificateManager,
  CertificateError: () => import_protocol.CertificateError,
  CertificateManager: () => import_protocol.CertificateManager,
  CertificationDeclarationManager: () => import_protocol.CertificationDeclarationManager,
  FabricId_Matter: () => import_protocol.FabricId_Matter,
  FirmwareSigningId_Matter: () => import_protocol.FirmwareSigningId_Matter,
  IcacId_Matter: () => import_protocol.IcacId_Matter,
  NocCat_Matter: () => import_protocol.NocCat_Matter,
  NodeId_Matter: () => import_protocol.NodeId_Matter,
  ProductId_Matter: () => import_protocol.ProductId_Matter,
  RcacId_Matter: () => import_protocol.RcacId_Matter,
  RootCertificateManager: () => import_protocol.CertificateAuthority,
  TestCert_PAA_FFF1_Cert: () => import_protocol.TestCert_PAA_FFF1_Cert,
  TestCert_PAA_FFF1_PrivateKey: () => import_protocol.TestCert_PAA_FFF1_PrivateKey,
  TestCert_PAA_FFF1_PublicKey: () => import_protocol.TestCert_PAA_FFF1_PublicKey,
  TestCert_PAA_FFF1_SKID: () => import_protocol.TestCert_PAA_FFF1_SKID,
  TestCert_PAA_NoVID_Cert: () => import_protocol.TestCert_PAA_NoVID_Cert,
  TestCert_PAA_NoVID_PrivateKey: () => import_protocol.TestCert_PAA_NoVID_PrivateKey,
  TestCert_PAA_NoVID_PublicKey: () => import_protocol.TestCert_PAA_NoVID_PublicKey,
  TestCert_PAA_NoVID_SKID: () => import_protocol.TestCert_PAA_NoVID_SKID,
  VendorId_Matter: () => import_protocol.VendorId_Matter
});
module.exports = __toCommonJS(certificate_exports);
var import_protocol = require("#protocol");
/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
//# sourceMappingURL=certificate.js.map
