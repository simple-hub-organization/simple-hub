"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var protocol_exports = {};
__export(protocol_exports, {
  ChannelManager: () => import_protocol.ChannelManager,
  ChannelNotConnectedError: () => import_protocol.ChannelNotConnectedError,
  CommissioningError: () => import_protocol.CommissioningError,
  ControllerCommissioner: () => import_protocol.ControllerCommissioningFlow,
  ControllerDiscovery: () => import_protocol.ControllerDiscovery,
  DiscoveryError: () => import_protocol.DiscoveryError,
  DuplicateMessageError: () => import_protocol.DuplicateMessageError,
  ExchangeCounter: () => import_protocol.ExchangeCounter,
  ExchangeManager: () => import_protocol.ExchangeManager,
  ExchangeProvider: () => import_protocol.ExchangeProvider,
  MATTER_MESSAGE_OVERHEAD: () => import_protocol.MATTER_MESSAGE_OVERHEAD,
  MAX_COUNTER_VALUE_32BIT: () => import_protocol.MAX_COUNTER_VALUE_32BIT,
  MessageChannel: () => import_protocol.MessageChannel,
  MessageCounterTypes: () => import_protocol.MessageCounterTypes,
  MessageExchange: () => import_protocol.MessageExchange,
  MessageReceptionState: () => import_protocol.MessageReceptionState,
  MessageReceptionStateEncryptedWithRollover: () => import_protocol.MessageReceptionStateEncryptedWithRollover,
  MessageReceptionStateEncryptedWithoutRollover: () => import_protocol.MessageReceptionStateEncryptedWithoutRollover,
  MessageReceptionStateUnencryptedWithRollover: () => import_protocol.MessageReceptionStateUnencryptedWithRollover,
  NoChannelError: () => import_protocol.NoChannelError,
  PairRetransmissionLimitReachedError: () => import_protocol.PairRetransmissionLimitReachedError,
  UnexpectedMessageError: () => import_protocol.UnexpectedMessageError
});
module.exports = __toCommonJS(protocol_exports);
var import_protocol = require("#protocol");
/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
//# sourceMappingURL=protocol.js.map
