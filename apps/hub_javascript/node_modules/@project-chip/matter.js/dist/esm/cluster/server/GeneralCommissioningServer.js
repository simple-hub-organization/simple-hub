/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import {
  AdministratorCommissioning,
  BasicInformationCluster,
  GeneralCommissioning
} from "#clusters";
import { ImplementationError, Logger, MatterFlowError } from "#general";
import { MatterDevice } from "#MatterDevice.js";
import { assertSecureSession } from "#protocol";
import { CommissioningServerFailsafeContext } from "./CommissioningServerFailsafeContext.js";
const SuccessResponse = { errorCode: GeneralCommissioning.CommissioningError.Ok, debugText: "" };
const logger = Logger.get("GeneralCommissioningClusterHandler");
const GeneralCommissioningClusterHandler = (options) => ({
  initializeClusterServer: ({ attributes: { breadcrumb } }) => {
    breadcrumb.setLocal(BigInt(0));
  },
  armFailSafe: async ({
    request: { breadcrumb: breadcrumbStep, expiryLengthSeconds },
    attributes: { breadcrumb, basicCommissioningInfo },
    session,
    endpoint
  }) => {
    assertSecureSession(session, "armFailSafe can only be called on a secure session");
    const device = MatterDevice.of(session);
    try {
      if (!device.isFailsafeArmed() && endpoint.getClusterServer(AdministratorCommissioning.Cluster)?.getWindowStatusAttribute() !== AdministratorCommissioning.CommissioningWindowStatus.WindowNotOpen && !session.isPase) {
        throw new MatterFlowError("Failed to arm failsafe using CASE while commissioning window is opened.");
      }
      if (device.isFailsafeArmed()) {
        await device.failsafeContext.extend(session.fabric, expiryLengthSeconds);
      } else {
        if (expiryLengthSeconds === 0) return SuccessResponse;
        await device.beginTimed(
          new CommissioningServerFailsafeContext(endpoint, {
            fabrics: device.fabricManager,
            sessions: device.sessionManager,
            expiryLengthSeconds,
            maxCumulativeFailsafeSeconds: basicCommissioningInfo.getLocal().maxCumulativeFailsafeSeconds,
            associatedFabric: session.fabric
          })
        );
      }
      if (device.isFailsafeArmed()) {
        breadcrumb.setLocal(breadcrumbStep);
      }
    } catch (error) {
      MatterFlowError.accept(error);
      logger.debug(`Error while arming failSafe timer`, error);
      return {
        errorCode: GeneralCommissioning.CommissioningError.BusyWithOtherAdmin,
        debugText: error.message
      };
    }
    return SuccessResponse;
  },
  setRegulatoryConfig: async ({
    request: { breadcrumb: breadcrumbStep, newRegulatoryConfig, countryCode },
    attributes: { breadcrumb, regulatoryConfig, locationCapability },
    endpoint
  }) => {
    const locationCapabilityValue = locationCapability.getLocal();
    const basicInformationCluster = endpoint.getClusterServer(BasicInformationCluster);
    if (basicInformationCluster === void 0) {
      throw new ImplementationError("BasicInformationCluster needs to be present on the root endpoint");
    }
    const currentLocationCountryCode = basicInformationCluster.getLocationAttribute();
    if (currentLocationCountryCode !== countryCode) {
      if (options?.allowCountryCodeChange === false && countryCode !== "XX") {
        return {
          errorCode: GeneralCommissioning.CommissioningError.ValueOutsideRange,
          debugText: `Country code change not allowed: ${countryCode}`
        };
      }
      if (options?.countryCodeWhitelist !== void 0 && !options?.countryCodeWhitelist.includes(countryCode)) {
        return {
          errorCode: GeneralCommissioning.CommissioningError.ValueOutsideRange,
          debugText: `Country code change not allowed: ${countryCode}`
        };
      }
      if (countryCode !== "XX") {
        basicInformationCluster.setLocationAttribute(countryCode);
      }
    }
    let validValues;
    switch (locationCapabilityValue) {
      case GeneralCommissioning.RegulatoryLocationType.Outdoor:
        validValues = [GeneralCommissioning.RegulatoryLocationType.Outdoor];
        break;
      case GeneralCommissioning.RegulatoryLocationType.Indoor:
        validValues = [GeneralCommissioning.RegulatoryLocationType.Indoor];
        break;
      case GeneralCommissioning.RegulatoryLocationType.IndoorOutdoor:
        validValues = [
          GeneralCommissioning.RegulatoryLocationType.Indoor,
          GeneralCommissioning.RegulatoryLocationType.Outdoor,
          GeneralCommissioning.RegulatoryLocationType.IndoorOutdoor
        ];
        break;
      default:
        return {
          errorCode: GeneralCommissioning.CommissioningError.ValueOutsideRange,
          debugText: `Invalid regulatory location: ${newRegulatoryConfig === GeneralCommissioning.RegulatoryLocationType.Indoor ? "Indoor" : "Outdoor"}`
        };
    }
    if (!validValues.includes(newRegulatoryConfig)) {
      return {
        errorCode: GeneralCommissioning.CommissioningError.ValueOutsideRange,
        debugText: `Invalid regulatory location: ${newRegulatoryConfig === GeneralCommissioning.RegulatoryLocationType.Indoor ? "Indoor" : "Outdoor"}`
      };
    }
    regulatoryConfig.setLocal(newRegulatoryConfig);
    breadcrumb.setLocal(breadcrumbStep);
    return SuccessResponse;
  },
  commissioningComplete: async ({ session, attributes: { breadcrumb } }) => {
    const fabric = session.associatedFabric;
    if (session.isPase) {
      return {
        errorCode: GeneralCommissioning.CommissioningError.InvalidAuthentication,
        debugText: "Command not executed over CASE session."
      };
    }
    const device = MatterDevice.of(session);
    if (!device.isFailsafeArmed()) {
      return { errorCode: GeneralCommissioning.CommissioningError.NoFailSafe, debugText: "FailSafe not armed." };
    }
    assertSecureSession(session, "commissioningComplete can only be called on a secure session");
    const failsafeFabric = device.failsafeContext.associatedFabric?.fabricIndex;
    if (fabric.fabricIndex !== failsafeFabric) {
      return {
        errorCode: GeneralCommissioning.CommissioningError.InvalidAuthentication,
        debugText: `Associated fabric ${fabric.fabricIndex} does not match the one from the failsafe context ${failsafeFabric}.`
      };
    }
    await device.failsafeContext.completeCommission();
    breadcrumb.setLocal(BigInt(0));
    logger.info(`Commissioning completed on fabric #${fabric.fabricId} as node #${fabric.nodeId}.`);
    return SuccessResponse;
  }
});
export {
  GeneralCommissioningClusterHandler
};
//# sourceMappingURL=GeneralCommissioningServer.js.map
