/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import {
  ImplementationError,
  InternalError,
  Logger,
  NetInterfaceSet,
  Network,
  NoProviderError,
  UdpInterface
} from "#general";
import { LegacyControllerStore } from "#LegacyControllerStore.js";
import { ControllerStore } from "#node";
import {
  Ble,
  ControllerDiscovery,
  MdnsService,
  NodeDiscoveryType,
  ScannerSet
} from "#protocol";
import { PairedNode } from "./device/PairedNode.js";
import { MatterController } from "./MatterController.js";
import { MatterNode } from "./MatterNode.js";
const logger = new Logger("CommissioningController");
class CommissioningController extends MatterNode {
  /**
   * Creates a new CommissioningController instance
   *
   * @param options The options for the CommissioningController
   */
  constructor(options) {
    super();
    this.options = options;
  }
  started = false;
  ipv4Disabled;
  listeningAddressIpv4;
  listeningAddressIpv6;
  environment;
  // Set when new API was initialized correctly
  storage;
  mdnsScanner;
  mdnsBroadcaster;
  controllerInstance;
  initializedNodes = /* @__PURE__ */ new Map();
  sessionDisconnectedHandler = /* @__PURE__ */ new Map();
  get nodeId() {
    return this.controllerInstance?.nodeId;
  }
  get paseCommissionerConfig() {
    const controller = this.assertControllerIsStarted(
      "The CommissioningController needs to be started to get the PASE commissioner data."
    );
    const { caConfig, fabricConfig: fabricData } = controller;
    return {
      caConfig,
      fabricData
    };
  }
  assertIsAddedToMatterServer() {
    if (this.mdnsScanner === void 0 || this.storage === void 0 && this.environment === void 0) {
      throw new ImplementationError("Add the node to the Matter instance before.");
    }
    if (!this.started) {
      throw new ImplementationError("The node needs to be started before interacting with the controller.");
    }
    return { mdnsScanner: this.mdnsScanner, storage: this.storage, environment: this.environment };
  }
  assertControllerIsStarted(errorText) {
    if (this.controllerInstance === void 0) {
      throw new ImplementationError(
        errorText ?? "Controller instance not yet started. Please call start() first."
      );
    }
    return this.controllerInstance;
  }
  /** Internal method to initialize a MatterController instance. */
  async initializeController() {
    const { mdnsScanner, storage, environment } = this.assertIsAddedToMatterServer();
    if (this.controllerInstance !== void 0) {
      return this.controllerInstance;
    }
    const { localPort, adminFabricId, adminVendorId, adminFabricIndex, caseAuthenticatedTags } = this.options;
    if (environment === void 0 && storage === void 0) {
      throw new ImplementationError("Storage not initialized correctly.");
    }
    const controllerStore = environment?.has(ControllerStore) ? environment.get(ControllerStore) : new LegacyControllerStore(storage);
    const { netInterfaces, scanners, port } = await configureNetwork({
      ipv4Disabled: this.ipv4Disabled,
      mdnsScanner,
      localPort,
      listeningAddressIpv4: this.listeningAddressIpv4,
      listeningAddressIpv6: this.listeningAddressIpv6
    });
    const controller = await MatterController.create({
      controllerStore,
      scanners,
      netInterfaces,
      sessionClosedCallback: (peerNodeId) => {
        logger.info(`Session for peer node ${peerNodeId} disconnected ...`);
        const handler = this.sessionDisconnectedHandler.get(peerNodeId);
        if (handler !== void 0) {
          handler().catch((error) => logger.warn(`Error while handling session disconnect: ${error}`));
        }
      },
      adminVendorId,
      adminFabricId,
      adminFabricIndex,
      caseAuthenticatedTags
    });
    if (this.mdnsBroadcaster) {
      controller.addBroadcaster(this.mdnsBroadcaster.createInstanceBroadcaster(port));
    }
    return controller;
  }
  /**
   * Commissions/Pairs a new device into the controller fabric. The method returns the NodeId of the commissioned
   * node.
   */
  async commissionNode(nodeOptions, connectNodeAfterCommissioning = true) {
    this.assertIsAddedToMatterServer();
    const controller = this.assertControllerIsStarted();
    const nodeId = await controller.commission(nodeOptions);
    if (connectNodeAfterCommissioning) {
      const node = await this.connectNode(nodeId, {
        ...nodeOptions,
        autoSubscribe: nodeOptions.autoSubscribe ?? this.options.autoSubscribe,
        subscribeMinIntervalFloorSeconds: nodeOptions.subscribeMinIntervalFloorSeconds ?? this.options.subscribeMinIntervalFloorSeconds,
        subscribeMaxIntervalCeilingSeconds: nodeOptions.subscribeMaxIntervalCeilingSeconds ?? this.options.subscribeMaxIntervalCeilingSeconds
      });
      await node.events.initialized;
    }
    return nodeId;
  }
  /**
   * Completes the commissioning process for a node when the initial commissioning process was done by a PASE
   * commissioner. This method should be called to discover the device operational and complete the commissioning
   * process.
   */
  completeCommissioningForNode(peerNodeId, discoveryData) {
    this.assertIsAddedToMatterServer();
    const controller = this.assertControllerIsStarted();
    return controller.completeCommissioning(peerNodeId, discoveryData);
  }
  /** Check if a given node id is commissioned on this controller. */
  isNodeCommissioned(nodeId) {
    const controller = this.assertControllerIsStarted();
    return controller.getCommissionedNodes().includes(nodeId) ?? false;
  }
  /**
   * Remove a Node id from the controller. This method should only be used if the decommission method on the
   * PairedNode instance returns an error. By default, it tries to decommission the node from the controller but will
   * remove it also in case of an error during decommissioning. Ideally try to decommission the node before and only
   * use this in case of an error.
   */
  async removeNode(nodeId, tryDecommissioning = true) {
    const controller = this.assertControllerIsStarted();
    const node = this.initializedNodes.get(nodeId);
    let decommissionSuccess = false;
    if (tryDecommissioning) {
      try {
        if (node === void 0) {
          throw new ImplementationError(`Node ${nodeId} is not initialized.`);
        }
        await node.decommission();
        decommissionSuccess = true;
      } catch (error) {
        logger.warn(`Decommissioning node ${nodeId} failed with error, remove node anyway: ${error}`);
      }
    }
    if (node !== void 0) {
      node.close(!decommissionSuccess);
    }
    await controller.removeNode(nodeId);
    this.initializedNodes.delete(nodeId);
  }
  async disconnectNode(nodeId) {
    const node = this.initializedNodes.get(nodeId);
    if (node === void 0) {
      throw new ImplementationError(`Node ${nodeId} is not connected!`);
    }
    await this.controllerInstance?.disconnect(nodeId);
  }
  /**
   * Connect to an already paired Node.
   * After connection the endpoint data of the device is analyzed and an object structure is created.
   */
  async connectNode(nodeId, connectOptions) {
    const controller = this.assertControllerIsStarted();
    if (!controller.getCommissionedNodes().includes(nodeId)) {
      throw new ImplementationError(`Node ${nodeId} is not commissioned!`);
    }
    const existingNode = this.initializedNodes.get(nodeId);
    if (existingNode !== void 0) {
      if (!existingNode.initialized) {
        await existingNode.reconnect(connectOptions);
      }
      return existingNode;
    }
    const pairedNode = await PairedNode.create(
      nodeId,
      this,
      connectOptions,
      this.controllerInstance?.getCommissionedNodeDetails(nodeId)?.deviceData ?? {},
      await this.createInteractionClient(nodeId, NodeDiscoveryType.None, false),
      // First connect without discovery to last known address
      async (discoveryType) => void await controller.connect(nodeId, { discoveryType }),
      (handler) => this.sessionDisconnectedHandler.set(nodeId, handler),
      await this.collectStoredAttributeData(nodeId)
    );
    this.initializedNodes.set(nodeId, pairedNode);
    pairedNode.events.initializedFromRemote.on(
      async (deviceData) => await controller.enhanceCommissionedNodeDetails(nodeId, deviceData)
    );
    return pairedNode;
  }
  async collectStoredAttributeData(nodeId) {
    const controller = this.assertControllerIsStarted();
    const storedDataVersions = await controller.getStoredClusterDataVersions(nodeId);
    const result = new Array();
    for (const { endpointId, clusterId } of storedDataVersions) {
      result.push(...await controller.retrieveStoredAttributes(nodeId, endpointId, clusterId));
    }
    return result;
  }
  /**
   * Connects to all paired nodes.
   * After connection the endpoint data of the device is analyzed and an object structure is created.
   */
  async connect(connectOptions) {
    const controller = this.assertControllerIsStarted();
    if (!controller.isCommissioned()) {
      throw new ImplementationError(
        "Controller instance not yet paired with any device, so nothing to connect to."
      );
    }
    for (const nodeId of controller.getCommissionedNodes()) {
      await this.connectNode(nodeId, connectOptions);
    }
    return Array.from(this.initializedNodes.values());
  }
  /**
   * Set the MDNS Scanner instance. Should be only used internally
   *
   * @param mdnsScanner MdnsScanner instance
   */
  setMdnsScanner(mdnsScanner) {
    this.mdnsScanner = mdnsScanner;
  }
  /**
   * Set the MDNS Broadcaster instance. Should be only used internally
   *
   * @param mdnsBroadcaster MdnsBroadcaster instance
   */
  setMdnsBroadcaster(mdnsBroadcaster) {
    this.mdnsBroadcaster = mdnsBroadcaster;
  }
  /**
   * Set the Storage instance. Should be only used internally
   *
   * @param storage storage context to use
   */
  setStorage(storage) {
    this.storage = storage;
    this.environment = void 0;
  }
  /** Returns true if t least one node is commissioned/paired with this controller instance. */
  isCommissioned() {
    const controller = this.assertControllerIsStarted();
    return controller.isCommissioned();
  }
  /**
   * Creates and Return a new InteractionClient to communicate with a node. This is mainly used internally and should
   * not be used directly. See the PairedNode class for the public API.
   */
  async createInteractionClient(nodeId, discoveryType, forcedConnection = true) {
    const controller = this.assertControllerIsStarted();
    if (!forcedConnection) {
      return controller.createInteractionClient(nodeId, { discoveryType });
    }
    return controller.connect(nodeId, { discoveryType });
  }
  /** Returns the PairedNode instance for a given node id, if this node is connected. */
  getPairedNode(nodeId) {
    return this.initializedNodes.get(nodeId);
  }
  /** Returns an array with the Node Ids for all commissioned nodes. */
  getCommissionedNodes() {
    const controller = this.assertControllerIsStarted();
    return controller.getCommissionedNodes() ?? [];
  }
  getCommissionedNodesDetails() {
    const controller = this.assertControllerIsStarted();
    return controller.getCommissionedNodesDetails() ?? [];
  }
  /** Disconnects all connected nodes and Closes the network connections and other resources of the controller. */
  async close() {
    for (const node of this.initializedNodes.values()) {
      node.close();
    }
    await this.controllerInstance?.close();
    this.controllerInstance = void 0;
    this.initializedNodes.clear();
    this.ipv4Disabled = void 0;
    this.started = false;
  }
  getPort() {
    return this.options.localPort;
  }
  initialize(ipv4Disabled) {
    if (this.started) {
      throw new ImplementationError("Controller instance already started.");
    }
    if (this.ipv4Disabled !== void 0 && this.ipv4Disabled !== ipv4Disabled) {
      throw new ImplementationError(
        "Changing the IPv4 disabled flag after starting the controller is not supported."
      );
    }
    this.ipv4Disabled = ipv4Disabled;
  }
  async initializeControllerStore() {
    if (this.options.environment === void 0) {
      throw new ImplementationError("Initialization not done. Add the controller to the MatterServer first.");
    }
    const { environment, id } = this.options.environment;
    const controllerStore = await ControllerStore.create(id, environment);
    environment.set(ControllerStore, controllerStore);
  }
  /** Initialize the controller and connect to all commissioned nodes if autoConnect is not set to false. */
  async start() {
    if (this.ipv4Disabled === void 0) {
      if (this.options.environment === void 0) {
        throw new ImplementationError("Initialization not done. Add the controller to the MatterServer first.");
      }
      const { environment } = this.options.environment;
      if (!environment.has(ControllerStore)) {
        await this.initializeControllerStore();
      }
      const mdnsService = await environment.load(MdnsService);
      this.ipv4Disabled = !mdnsService.enableIpv4;
      this.setMdnsBroadcaster(mdnsService.broadcaster);
      this.setMdnsScanner(mdnsService.scanner);
      this.environment = environment;
      const runtime = this.environment.runtime;
      runtime.add(this);
    }
    this.started = true;
    if (this.controllerInstance === void 0) {
      this.controllerInstance = await this.initializeController();
    }
    await this.controllerInstance.announce();
    if (this.options.autoConnect !== false && this.controllerInstance.isCommissioned()) {
      await this.connect();
    }
  }
  cancelCommissionableDeviceDiscovery(identifierData, discoveryCapabilities) {
    this.assertIsAddedToMatterServer();
    const controller = this.assertControllerIsStarted();
    controller.collectScanners(discoveryCapabilities).forEach((scanner) => ControllerDiscovery.cancelCommissionableDeviceDiscovery(scanner, identifierData));
  }
  async discoverCommissionableDevices(identifierData, discoveryCapabilities, discoveredCallback, timeoutSeconds = 900) {
    this.assertIsAddedToMatterServer();
    const controller = this.assertControllerIsStarted();
    return await ControllerDiscovery.discoverCommissionableDevices(
      controller.collectScanners(discoveryCapabilities),
      timeoutSeconds,
      identifierData,
      discoveredCallback
    );
  }
  async resetStorage() {
    this.assertControllerIsStarted(
      "Storage cannot be reset while the controller is operating! Please close the controller first."
    );
    const { storage, environment } = this.assertIsAddedToMatterServer();
    if (environment !== void 0) {
      const controllerStore = environment.get(ControllerStore);
      await controllerStore.erase();
    } else if (storage !== void 0) {
      await storage.clearAll();
    } else {
      throw new InternalError("Storage not initialized correctly.");
    }
  }
  /** Returns active session information for all connected nodes. */
  getActiveSessionInformation() {
    return this.controllerInstance?.getActiveSessionInformation() ?? [];
  }
}
async function configureNetwork(options) {
  const { ipv4Disabled, mdnsScanner, localPort, listeningAddressIpv6, listeningAddressIpv4 } = options;
  const netInterfaces = new NetInterfaceSet();
  const scanners = new ScannerSet();
  const udpInterface = await UdpInterface.create(Network.get(), "udp6", localPort, listeningAddressIpv6);
  netInterfaces.add(udpInterface);
  if (!ipv4Disabled) {
    netInterfaces.add(await UdpInterface.create(Network.get(), "udp4", udpInterface.port, listeningAddressIpv4));
  }
  if (mdnsScanner) {
    scanners.add(mdnsScanner);
  }
  try {
    const ble = Ble.get();
    netInterfaces.add(ble.getBleCentralInterface());
    scanners.add(ble.getBleScanner());
  } catch (e) {
    if (e instanceof NoProviderError) {
      logger.warn("BLE is not supported on this platform");
    } else {
      logger.error("Disabling BLE due to initialization error:", e);
    }
  }
  return { netInterfaces, scanners, port: udpInterface.port };
}
export {
  CommissioningController,
  configureNetwork
};
//# sourceMappingURL=CommissioningController.js.map
