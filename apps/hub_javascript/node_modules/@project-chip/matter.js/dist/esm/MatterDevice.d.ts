/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
/**
 * Important note: This file is part of the legacy matter-node (internal) API and should not be used anymore directly!
 * Please use the new API classes!
 * @deprecated
 */
import { Construction, StorageContext, TransportInterface } from "#general";
import { DeviceAdvertiser, DeviceCommissioner, ExchangeManager, Fabric, FabricAction, FabricManager, FailsafeContext, InstanceBroadcaster, PaseServer, PeerAddress, ProtocolHandler, Session, SessionManager, SessionParameters } from "#protocol";
import { CommissioningOptions, FabricIndex } from "#types";
export declare class MatterDevice {
    #private;
    readonly sessionStorage: StorageContext;
    readonly fabricStorage: StorageContext;
    private readonly commissioningChangedCallback;
    private readonly sessionChangedCallback;
    get construction(): Construction<MatterDevice>;
    static create(sessionStorage: StorageContext, fabricStorage: StorageContext, getCommissioningConfig: () => CommissioningOptions.Configuration, minimumCaseSessionsPerFabricAndNode: number | undefined, commissioningChangedCallback: (fabricIndex: FabricIndex, fabricAction: FabricAction) => void, sessionChangedCallback: (fabricIndex: FabricIndex) => void, sessionParameters?: Partial<SessionParameters>): Promise<MatterDevice>;
    constructor(sessionStorage: StorageContext, fabricStorage: StorageContext, getCommissioningConfig: () => CommissioningOptions.Configuration, minimumCaseSessionsPerFabricAndNode: number, commissioningChangedCallback: (fabricIndex: FabricIndex, fabricAction: FabricAction) => void, sessionChangedCallback: (fabricIndex: FabricIndex) => void, sessionParameters?: Partial<SessionParameters>);
    get fabricManager(): FabricManager;
    get sessionManager(): SessionManager;
    get exchangeManager(): ExchangeManager;
    get advertiser(): DeviceAdvertiser;
    get commissioner(): DeviceCommissioner;
    get failsafeContext(): FailsafeContext;
    get isClosing(): boolean;
    beginTimed(failsafeContext: FailsafeContext): Promise<void>;
    assertFailSafeArmed(message?: string): void;
    isFailsafeArmed(): boolean;
    hasBroadcaster(broadcaster: InstanceBroadcaster): boolean;
    addBroadcaster(broadcaster: InstanceBroadcaster): this;
    deleteBroadcaster(broadcaster: InstanceBroadcaster): Promise<void>;
    addTransportInterface(transport: TransportInterface): this;
    deleteTransportInterface(transport: TransportInterface): Promise<void>;
    hasProtocolHandler(protocolId: number): boolean;
    addProtocolHandler(protocol: ProtocolHandler): this;
    start(): Promise<void>;
    startAnnouncement(): Promise<void>;
    announce(announceOnce?: boolean): Promise<void>;
    reAnnounceAsCommissionable(): void;
    findFabricFromDestinationId(destinationId: Uint8Array, peerRandom: Uint8Array): Fabric;
    sendFabricAnnouncements(fabrics: Fabric[], expireCommissioningAnnouncement?: boolean): Promise<void>;
    getFabricByIndex(fabricIndex: FabricIndex): Fabric | undefined;
    initiateExchange(address: PeerAddress, protocolId: number): import("#protocol").MessageExchange;
    getFabrics(): Fabric[];
    isCommissioned(): boolean;
    allowEnhancedCommissioning(discriminator: number, paseServer: PaseServer, commissioningEndCallback: () => void): Promise<void>;
    allowBasicCommissioning(commissioningEndCallback?: () => void): Promise<void>;
    endCommissioning(): Promise<void>;
    existsOpenPaseSession(): boolean;
    close(): Promise<void>;
    getActiveSessionInformation(): {
        name: string;
        nodeId: import("#types").NodeId;
        peerNodeId: import("#types").NodeId;
        fabric: import("#protocol").ExposedFabricInformation | undefined;
        isPeerActive: boolean;
        secure: boolean;
        lastInteractionTimestamp: number | undefined;
        lastActiveTimestamp: number | undefined;
        numberOfActiveSubscriptions: number;
    }[];
    static of(session: Session | undefined): MatterDevice;
}
//# sourceMappingURL=MatterDevice.d.ts.map