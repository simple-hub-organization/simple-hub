/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { BridgedDeviceBasicInformationCluster } from "#clusters";
import { ImplementationError } from "#general";
import { Endpoint } from "./Endpoint.js";
class ComposedDevice extends Endpoint {
  /**
   * Creates a new ComposedDevice.
   *
   * @param definition DeviceTypeDefinitions of the composed device
   * @param devices Array with devices that should be combined into one device that are directly added.
   * @param options Optional Endpoint options
   */
  constructor(definition, devices = [], options = {}) {
    super([definition], options);
    devices.forEach((device) => this.addDevice(device));
  }
  /**
   * Add a sub-device to the composed device.
   * @param device Device instance to add
   */
  addDevice(device) {
    this.addChildEndpoint(device);
  }
  /**
   * Get all sub-devices of the composed device.
   *
   * @returns Array with all sub-devices
   */
  getDevices() {
    return this.getChildEndpoints();
  }
  /**
   * Verify that the required clusters exists on the device.
   */
  verifyRequiredClusters() {
    return;
  }
  /**
   * Set the reachability of the Composed device exposed via the bridge.
   *
   * @param reachable true if reachable, false otherwise
   */
  setBridgedDeviceReachability(reachable) {
    const bridgedBasicInformationCluster = this.getClusterServer(BridgedDeviceBasicInformationCluster);
    if (bridgedBasicInformationCluster === void 0) {
      throw new ImplementationError(
        "The reachability flag can only be set for bridged devices this way. To set the reachability flag for a non-bridged device or for the bridget itself please set it on the CommissioningServer!"
      );
    }
    bridgedBasicInformationCluster.setReachableAttribute(reachable);
  }
}
export {
  ComposedDevice
};
//# sourceMappingURL=ComposedDevice.js.map
