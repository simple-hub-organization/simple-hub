/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { Groups, Identify, OnOff } from "#clusters";
import { extendPublicHandlerMethods } from "#general";
import { createDefaultGroupsClusterServer } from "../cluster/server/GroupsServer.js";
import { createDefaultIdentifyClusterServer } from "../cluster/server/IdentifyServer.js";
import { createDefaultOnOffClusterServer } from "../cluster/server/OnOffServer.js";
import { Device } from "./Device.js";
import { DeviceTypes } from "./DeviceTypes.js";
function getClusterInitialAttributeValues(attributeInitialValues, cluster) {
  if (attributeInitialValues === void 0) return void 0;
  return attributeInitialValues[cluster.id];
}
class OnOffBaseDevice extends extendPublicHandlerMethods(Device) {
  /**
   * Creates a new OnOffBaseDevice
   *
   * @protected
   * @param definition Device type definition of the device to create
   * @param attributeInitialValues Optional object with initial attribute values for automatically added clusters
   * @param options Optional endpoint options
   * @param isLighting Define if Lighting feature is set
   */
  constructor(definition, attributeInitialValues, options = {}, isLighting = false) {
    super(definition, options);
    this.isLighting = isLighting;
    this.addDeviceClusters(attributeInitialValues);
  }
  /**
   * Adds mandatory clusters to the device
   *
   * @protected
   * @param attributeInitialValues Optional object with initial attribute values for automatically added clusters
   * @param excludeList List of clusters to exclude from being added
   */
  addDeviceClusters(attributeInitialValues, excludeList = []) {
    if (!excludeList.includes(Identify.Cluster.id)) {
      this.addClusterServer(
        createDefaultIdentifyClusterServer({
          identify: async (data) => await this._executeHandler("identify", data)
        })
      );
    }
    if (!excludeList.includes(Groups.Cluster.id)) {
      this.addClusterServer(createDefaultGroupsClusterServer());
    }
    if (!excludeList.includes(OnOff.Cluster.id)) {
      this.addClusterServer(
        createDefaultOnOffClusterServer(
          this.commandHandler,
          getClusterInitialAttributeValues(attributeInitialValues, OnOff.Cluster),
          this.isLighting
        )
      );
    }
  }
  /**
   * Turns the device on or off
   * This is an example f a convenient device class API to control the device without need to access clusters
   *
   * @param onOff true to turn on, false to turn off
   */
  setOnOff(onOff) {
    this.getClusterServer(OnOff.Cluster)?.setOnOffAttribute(onOff);
  }
  getOnOff() {
    return this.getClusterServer(OnOff.Cluster)?.getOnOffAttribute() ?? false;
  }
  /**
   * Toggles the device on or off
   * This is an example f a convenient device class API to control the device without need to access clusters
   */
  toggle() {
    const cluster = this.getClusterServer(OnOff.Cluster);
    cluster?.setOnOffAttribute(!cluster?.getOnOffAttribute());
  }
  // Add Listeners convenient for chosen attributes
  /**
   * Adds a listener for the OnOff attribute
   * This is an example of a convenient device class API to control the device without need to access clusters
   *
   * @param listener Listener function to be called when the attribute changes
   */
  addOnOffListener(listener) {
    this.getClusterServer(OnOff.Cluster)?.subscribeOnOffAttribute(listener);
  }
}
class OnOffPluginUnitDevice extends OnOffBaseDevice {
  constructor(onOffAttributeInitialValues, options = {}) {
    const initialAttributeValues = {};
    if (onOffAttributeInitialValues !== void 0) {
      initialAttributeValues[OnOff.Cluster.id] = onOffAttributeInitialValues;
    }
    super(DeviceTypes.ON_OFF_PLUGIN_UNIT, initialAttributeValues, options, false);
  }
}
class OnOffLightDevice extends OnOffBaseDevice {
  constructor(onOffAttributeInitialValues, options = {}) {
    const initialAttributeValues = {};
    if (onOffAttributeInitialValues !== void 0) {
      initialAttributeValues[OnOff.Cluster.id] = onOffAttributeInitialValues;
    }
    super(DeviceTypes.ON_OFF_LIGHT, initialAttributeValues, options, true);
  }
  addDeviceClusters(attributeInitialValues, excludeList = []) {
    super.addDeviceClusters(attributeInitialValues, [OnOff.Cluster.id]);
    if (!excludeList.includes(OnOff.Cluster.id)) {
      this.addClusterServer(
        createDefaultOnOffClusterServer(
          this.commandHandler,
          getClusterInitialAttributeValues(
            attributeInitialValues,
            OnOff.Cluster.with(OnOff.Feature.Lighting)
          ),
          true
        )
      );
    }
  }
}
export {
  OnOffBaseDevice,
  OnOffLightDevice,
  OnOffPluginUnitDevice,
  getClusterInitialAttributeValues
};
//# sourceMappingURL=OnOffDevices.js.map
