/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { Construction, Logger } from "#general";
import { PeerDataStore } from "#protocol";
import { AttributeId, ClusterId, EndpointNumber, EventNumber } from "#types";
import { ClientEndpointStore } from "./ClientEndpointStore.js";
const logger = Logger.get("CachedClientNodeStore");
const VERSION_KEY = "__version__";
const MAX_EVENT_NUMBER_KEY = "__maxEventNumber__";
class CachedClientNodeStore extends PeerDataStore {
  #storage;
  #construction;
  #endpointStores = /* @__PURE__ */ new Map();
  #maxEventNumber = EventNumber(0);
  get construction() {
    return this.#construction;
  }
  constructor(storage, load = true) {
    super();
    this.#storage = storage;
    this.#construction = Construction(this, async () => {
      if (!load) {
        return;
      }
      this.#maxEventNumber = await this.#storage.get(MAX_EVENT_NUMBER_KEY, EventNumber(0));
      const knownParts = await this.#storage.contexts();
      for (const partId of knownParts) {
        await this.#loadEndpointStore(partId);
      }
    });
  }
  async #loadEndpointStore(partId) {
    const endpointNumber = EndpointNumber(parseInt(partId));
    const endpointStore = new ClientEndpointStore(this.#storage.createContext(partId));
    this.#endpointStores.set(endpointNumber, endpointStore);
    await endpointStore.construction;
  }
  #storeForEndpoint(endpointId) {
    this.#construction.assert();
    const existingStore = this.#endpointStores.get(endpointId);
    if (existingStore !== void 0) {
      return existingStore;
    }
    const store = new ClientEndpointStore(this.#storage.createContext(endpointId.toString()), false);
    this.#endpointStores.set(endpointId, store);
    return store;
  }
  get maxEventNumber() {
    return this.#maxEventNumber;
  }
  updateLastEventNumber(eventNumber) {
    this.#maxEventNumber = eventNumber;
    return this.#storage.set(MAX_EVENT_NUMBER_KEY, eventNumber);
  }
  retrieveAttribute(endpointId, clusterId, attributeId) {
    const store = this.#storeForEndpoint(endpointId);
    const clusterValues = store.get[clusterId];
    if (clusterValues === void 0) {
      return void 0;
    }
    const version = clusterValues[VERSION_KEY];
    if (version === void 0 || typeof version !== "number") {
      return void 0;
    }
    const attributeIdStr = attributeId?.toString();
    const data = clusterValues[attributeIdStr];
    const { value, attributeName } = data ?? {};
    if (value === void 0) {
      return void 0;
    }
    return {
      path: {
        endpointId,
        clusterId,
        attributeId,
        attributeName
      },
      value,
      version
    };
  }
  retrieveAttributes(endpointId, clusterId) {
    const store = this.#storeForEndpoint(endpointId);
    const clusterValues = store.get[clusterId];
    if (clusterValues === void 0) {
      return [];
    }
    const version = clusterValues[VERSION_KEY];
    if (version === void 0 || typeof version !== "number") {
      return [];
    }
    return Object.keys(clusterValues).filter((key) => key !== VERSION_KEY).map((key) => {
      const { value, attributeName } = clusterValues[key];
      return {
        path: { endpointId, clusterId, attributeId: AttributeId(parseInt(key)), attributeName },
        value,
        version
      };
    });
  }
  async persistAttributes(attributes) {
    const endpointDataMap = /* @__PURE__ */ new Map();
    for (const {
      path: { endpointId, clusterId, attributeId, attributeName },
      value,
      version
    } of attributes) {
      if (value === void 0) {
        logger.warn(`Ignoring undefined value for attribute ${attributeId} on endpoint ${endpointId}`);
        continue;
      }
      let endpointData = endpointDataMap.get(endpointId);
      if (endpointData === void 0) {
        endpointData = {};
        endpointDataMap.set(endpointId, endpointData);
      }
      let clusterData = endpointData[clusterId];
      if (clusterData === void 0) {
        clusterData = {};
        endpointData[clusterId] = clusterData;
      }
      clusterData[attributeId.toString()] = { value, attributeName };
      clusterData[VERSION_KEY] = version;
    }
    for (const [endpointId, endpointData] of endpointDataMap) {
      const store = this.#storeForEndpoint(endpointId);
      await store.set(endpointData);
    }
  }
  getClusterDataVersion(endpointId, clusterId) {
    const store = this.#storeForEndpoint(endpointId);
    const clusterValues = store.get[clusterId];
    return clusterValues?.[VERSION_KEY];
  }
  getClusterDataVersions(filterEndpointId, filterClusterId) {
    const versions = [];
    const filterClusterIdStr = filterClusterId?.toString();
    for (const [endpointId, store] of this.#endpointStores) {
      if (filterEndpointId !== void 0 && endpointId !== filterEndpointId) {
        continue;
      }
      const endpointData = store.get;
      for (const clusterId in endpointData) {
        if (filterClusterIdStr !== void 0 && clusterId !== filterClusterIdStr) {
          continue;
        }
        const version = endpointData[clusterId][VERSION_KEY];
        if (typeof version === "number") {
          versions.push({ endpointId, clusterId: ClusterId(parseInt(clusterId)), dataVersion: version });
        }
      }
    }
    return versions;
  }
}
export {
  CachedClientNodeStore
};
//# sourceMappingURL=CachedClientNodeStore.js.map
