import { LevelControl, OnOff } from "#clusters";
import { AttributeInitialValues, ClusterServerHandlers } from "../cluster/server/ClusterServerTypes.js";
import { ClusterId } from "#types";
import { DeviceTypeDefinition } from "./DeviceTypes.js";
import { EndpointOptions } from "./Endpoint.js";
import { OnOffBaseDevice } from "./OnOffDevices.js";
type DimmableDeviceCommands = {
    moveToLevel: ClusterServerHandlers<typeof LevelControl.Complete>["moveToLevel"];
    move: ClusterServerHandlers<typeof LevelControl.Complete>["move"];
    step: ClusterServerHandlers<typeof LevelControl.Complete>["step"];
    stop: ClusterServerHandlers<typeof LevelControl.Complete>["stop"];
    moveToLevelWithOnOff: ClusterServerHandlers<typeof LevelControl.Complete>["moveToLevelWithOnOff"];
    moveWithOnOff: ClusterServerHandlers<typeof LevelControl.Complete>["moveWithOnOff"];
    stepWithOnOff: ClusterServerHandlers<typeof LevelControl.Complete>["stepWithOnOff"];
    stopWithOnOff: ClusterServerHandlers<typeof LevelControl.Complete>["stopWithOnOff"];
};
declare const DimmableBaseDevice_base: new (definition: DeviceTypeDefinition, attributeInitialValues?: {
    [key: ClusterId]: AttributeInitialValues<any>;
} | undefined, options?: EndpointOptions | undefined, isLighting?: boolean | undefined) => OnOffBaseDevice & {
    addCommandHandler<K extends keyof DimmableDeviceCommands>(action: K, handler: DimmableDeviceCommands[K]): void;
    removeCommandHandler<K extends keyof DimmableDeviceCommands>(action: K, handler: DimmableDeviceCommands[K]): void;
    _executeHandler<K extends keyof DimmableDeviceCommands>(action: K, ...args: Parameters<DimmableDeviceCommands[K]>): Promise<void>;
};
declare class DimmableBaseDevice extends DimmableBaseDevice_base {
    constructor(definition: DeviceTypeDefinition, attributeInitialValues?: {
        [key: ClusterId]: AttributeInitialValues<any>;
    }, options?: EndpointOptions, isLighting?: boolean);
    protected addDeviceClusters(attributeInitialValues?: {
        [key: ClusterId]: AttributeInitialValues<any>;
    }, excludeList?: ClusterId[]): void;
    getCurrentLevel(): number;
    setCurrentLevel(level: number | null): void;
    /**
     * Adds a listener for the CurrentLevel attribute
     *
     * @param listener Listener function to be called when the attribute changes
     */
    addCurrentLevelListener(listener: (newValue: number | null, oldValue: number | null) => void): void;
}
export declare class DimmablePluginUnitDevice extends DimmableBaseDevice {
    constructor(onOffAttributeInitialValues?: AttributeInitialValues<typeof OnOff.Cluster.attributes>, dimmableAttributeValues?: AttributeInitialValues<typeof LevelControl.Cluster.attributes>, options?: EndpointOptions);
}
export declare class DimmableLightDevice extends DimmableBaseDevice {
    constructor(onOffAttributeInitialValues?: AttributeInitialValues<typeof OnOff.Cluster.attributes>, dimmableAttributeValues?: AttributeInitialValues<typeof LevelControl.Cluster.attributes>, options?: EndpointOptions);
}
export {};
//# sourceMappingURL=DimmableDevices.d.ts.map