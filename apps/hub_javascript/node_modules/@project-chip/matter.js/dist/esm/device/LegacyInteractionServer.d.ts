/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { AnyAttributeServer, AnyEventServer, AttributePath, AttributeServer, CommandPath, CommandServer, EndpointInterface, EventPath, EventStorageData, InteractionContext, InteractionServer, Message, MessageExchange } from "#protocol";
import { TlvEventFilter, TypeFromSchema } from "#types";
/**
 * Interactionserver for the legacy API code paths which includes ACL checks before calling the actual
 * attribute/command handlers.
 */
export declare class LegacyInteractionServer extends InteractionServer {
    #private;
    constructor(context: InteractionContext);
    protected readAttribute(path: AttributePath, attribute: AnyAttributeServer<any>, exchange: MessageExchange, isFabricFiltered: boolean, message: Message, endpoint: EndpointInterface, offline?: boolean): Promise<{
        version: number;
        value: any;
    }>;
    protected readEvent(path: EventPath, eventFilters: TypeFromSchema<typeof TlvEventFilter>[] | undefined, event: AnyEventServer<any, any>, exchange: MessageExchange, isFabricFiltered: boolean, message: Message, endpoint: EndpointInterface): Promise<EventStorageData<any>[]>;
    protected writeAttribute(path: AttributePath, attribute: AttributeServer<any>, value: any, exchange: MessageExchange, message: Message, endpoint: EndpointInterface, receivedWithinTimedInteraction?: boolean, isListWrite?: boolean): Promise<void>;
    protected invokeCommand(path: CommandPath, command: CommandServer<any, any>, exchange: MessageExchange, commandFields: any, message: Message, endpoint: EndpointInterface, receivedWithinTimedInteraction?: boolean): Promise<{
        code: import("#types").StatusCode;
        clusterCode?: number;
        responseId: import("#types").CommandId;
        response: import("#types").TlvStream;
    }>;
}
//# sourceMappingURL=LegacyInteractionServer.d.ts.map