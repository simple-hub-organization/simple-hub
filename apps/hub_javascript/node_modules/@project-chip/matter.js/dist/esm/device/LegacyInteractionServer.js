/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { AccessControlCluster } from "#clusters";
import { Diagnostic, InternalError, Logger } from "#general";
import {
  AccessControlManager,
  AccessDeniedError,
  FabricScopedAttributeServer,
  InteractionServer
} from "#protocol";
import { EndpointNumber } from "#types";
const logger = Logger.get("LegacyInteractionServer");
class LegacyInteractionServer extends InteractionServer {
  #endpointStructure;
  #aclManager;
  constructor(context) {
    super(context);
    this.#endpointStructure = context.structure;
  }
  #getAclManager(session) {
    if (this.#aclManager !== void 0) {
      return this.#aclManager;
    }
    const rootEndpoint = this.#endpointStructure.getEndpoint(EndpointNumber(0));
    if (rootEndpoint === void 0) {
      throw new InternalError("Root endpoint must exist.");
    }
    const aclCluster = rootEndpoint.getClusterServer(AccessControlCluster);
    if (aclCluster === void 0) {
      throw new InternalError("Access control cluster must exist on root endpoint.");
    }
    const aclManager = this.#aclManager = new AccessControlManager(aclCluster.attributes.acl.get(session, false));
    aclCluster.subscribeAclAttribute(() => {
      const completeVal = aclCluster.attributes.acl.get(session, false);
      logger.info("ACL updated", completeVal);
      aclManager.updateAccessControlList(completeVal);
    });
    return aclManager;
  }
  #assertAccess(path, exchange, desiredAccessLevel) {
    const { endpointId, clusterId } = path;
    const endpoint = this.#endpointStructure.getEndpoint(endpointId);
    if (endpoint === void 0) {
      throw new InternalError("Endpoint not found for ACL check. This should never happen.");
    }
    const aclManager = this.#getAclManager(exchange.session);
    if (!aclManager.allowsPrivilege(exchange.session, endpoint, clusterId, desiredAccessLevel)) {
      throw new AccessDeniedError(
        `Access to ${endpointId}/${Diagnostic.hex(clusterId)} denied on ${exchange.session.name}.`
      );
    }
  }
  async readAttribute(path, attribute, exchange, isFabricFiltered, message, endpoint, offline = false) {
    if (!offline) {
      this.#assertAccess(path, exchange, attribute.readAcl);
    }
    const data = await super.readAttribute(path, attribute, exchange, isFabricFiltered, message, endpoint);
    if (attribute instanceof FabricScopedAttributeServer && !isFabricFiltered) {
      const { value, version } = data;
      return {
        value: attribute.sanitizeFabricSensitiveFields(value, exchange.session.fabric),
        version
      };
    }
    return data;
  }
  async readEvent(path, eventFilters, event, exchange, isFabricFiltered, message, endpoint) {
    this.#assertAccess(path, exchange, event.readAcl);
    return super.readEvent(path, eventFilters, event, exchange, isFabricFiltered, message, endpoint);
  }
  async writeAttribute(path, attribute, value, exchange, message, endpoint, receivedWithinTimedInteraction, isListWrite) {
    this.#assertAccess(path, exchange, attribute.writeAcl);
    return super.writeAttribute(
      path,
      attribute,
      value,
      exchange,
      message,
      endpoint,
      receivedWithinTimedInteraction,
      isListWrite
    );
  }
  async invokeCommand(path, command, exchange, commandFields, message, endpoint, receivedWithinTimedInteraction = false) {
    this.#assertAccess(path, exchange, command.invokeAcl);
    return super.invokeCommand(
      path,
      command,
      exchange,
      commandFields,
      message,
      endpoint,
      receivedWithinTimedInteraction
    );
  }
}
export {
  LegacyInteractionServer
};
//# sourceMappingURL=LegacyInteractionServer.js.map
