import { LevelControl, OnOff } from "#clusters";
import { extendPublicHandlerMethods } from "#general";
import { createDefaultLevelControlClusterServer } from "../cluster/server/LevelControlServer.js";
import { createDefaultOnOffClusterServer } from "../cluster/server/OnOffServer.js";
import { DeviceTypes } from "./DeviceTypes.js";
import { OnOffBaseDevice, getClusterInitialAttributeValues } from "./OnOffDevices.js";
class DimmableBaseDevice extends extendPublicHandlerMethods(
  OnOffBaseDevice
) {
  constructor(definition, attributeInitialValues, options = {}, isLighting = false) {
    super(definition, attributeInitialValues, options, isLighting);
  }
  addDeviceClusters(attributeInitialValues, excludeList = []) {
    super.addDeviceClusters(attributeInitialValues, [...excludeList, OnOff.Cluster.id, LevelControl.Cluster.id]);
    if (!excludeList.includes(OnOff.Cluster.id)) {
      this.addClusterServer(
        createDefaultOnOffClusterServer(
          this.commandHandler,
          getClusterInitialAttributeValues(
            attributeInitialValues,
            OnOff.Cluster.with(OnOff.Feature.Lighting)
          ),
          this.isLighting
        )
      );
    }
    if (!excludeList.includes(LevelControl.Cluster.id)) {
      this.addClusterServer(
        createDefaultLevelControlClusterServer(
          this.commandHandler,
          getClusterInitialAttributeValues(
            attributeInitialValues,
            LevelControl.Cluster.with(LevelControl.Feature.OnOff, LevelControl.Feature.Lighting)
          )
        )
      );
    }
  }
  getCurrentLevel() {
    return this.getClusterServer(LevelControl.Cluster)?.getCurrentLevelAttribute() ?? 0;
  }
  setCurrentLevel(level) {
    this.getClusterServer(LevelControl.Cluster)?.setCurrentLevelAttribute(level);
  }
  /**
   * Adds a listener for the CurrentLevel attribute
   *
   * @param listener Listener function to be called when the attribute changes
   */
  addCurrentLevelListener(listener) {
    this.getClusterServer(LevelControl.Cluster)?.subscribeCurrentLevelAttribute(listener);
  }
}
class DimmablePluginUnitDevice extends DimmableBaseDevice {
  constructor(onOffAttributeInitialValues, dimmableAttributeValues, options = {}) {
    const initialAttributeValues = {};
    if (onOffAttributeInitialValues !== void 0) {
      initialAttributeValues[OnOff.Cluster.id] = onOffAttributeInitialValues;
    }
    if (dimmableAttributeValues !== void 0) {
      initialAttributeValues[LevelControl.Cluster.id] = dimmableAttributeValues;
    }
    super(DeviceTypes.DIMMABLE_PLUGIN_UNIT, initialAttributeValues, options, false);
  }
}
class DimmableLightDevice extends DimmableBaseDevice {
  constructor(onOffAttributeInitialValues, dimmableAttributeValues, options = {}) {
    const initialAttributeValues = {};
    if (onOffAttributeInitialValues !== void 0) {
      initialAttributeValues[OnOff.Cluster.id] = onOffAttributeInitialValues;
    }
    if (dimmableAttributeValues !== void 0) {
      initialAttributeValues[LevelControl.Cluster.id] = dimmableAttributeValues;
    }
    super(DeviceTypes.DIMMABLE_LIGHT, initialAttributeValues, options, true);
  }
}
export {
  DimmableLightDevice,
  DimmablePluginUnitDevice
};
//# sourceMappingURL=DimmableDevices.js.map
