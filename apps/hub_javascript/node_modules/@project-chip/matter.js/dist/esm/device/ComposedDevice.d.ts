import { Device } from "./Device.js";
import { DeviceTypeDefinition } from "./DeviceTypes.js";
import { Endpoint, EndpointOptions } from "./Endpoint.js";
/**
 * A ComposedDevice is a special endpoint that allows to combine multiple sub devices and expose this as one device
 * (e.g. a fan and a light).
 */
export declare class ComposedDevice extends Endpoint {
    /**
     * Creates a new ComposedDevice.
     *
     * @param definition DeviceTypeDefinitions of the composed device
     * @param devices Array with devices that should be combined into one device that are directly added.
     * @param options Optional Endpoint options
     */
    constructor(definition: DeviceTypeDefinition, devices?: Device[], options?: EndpointOptions);
    /**
     * Add a sub-device to the composed device.
     * @param device Device instance to add
     */
    addDevice(device: Device): void;
    /**
     * Get all sub-devices of the composed device.
     *
     * @returns Array with all sub-devices
     */
    getDevices(): Endpoint[];
    /**
     * Verify that the required clusters exists on the device.
     */
    verifyRequiredClusters(): void;
    /**
     * Set the reachability of the Composed device exposed via the bridge.
     *
     * @param reachable true if reachable, false otherwise
     */
    setBridgedDeviceReachability(reachable: boolean): void;
}
//# sourceMappingURL=ComposedDevice.d.ts.map