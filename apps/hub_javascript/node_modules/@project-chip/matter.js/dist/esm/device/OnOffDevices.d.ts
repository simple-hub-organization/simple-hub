/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { Identify, OnOff } from "#clusters";
import { MakeMandatory } from "#general";
import { Attributes, BitSchema, Cluster, ClusterId, Commands, Events, TypeFromPartialBitSchema } from "#types";
import { AttributeInitialValues, ClusterServerHandlers } from "../cluster/server/ClusterServerTypes.js";
import { Device } from "./Device.js";
import { DeviceTypeDefinition } from "./DeviceTypes.js";
import { EndpointOptions } from "./Endpoint.js";
type OnOffBaseDeviceCommands = {
    identify: ClusterServerHandlers<typeof Identify.Cluster>["identify"];
    offWithEffect: MakeMandatory<ClusterServerHandlers<typeof OnOff.Complete>["offWithEffect"]>;
};
/**
 * Utility function to get the initial attribute values for a cluster out of an object with initial attribute values
 * for multiple clusters
 *
 * @param attributeInitialValues Object with initial attribute values for automatically added clusters
 * @param cluster Cluster to get the initial attribute values for
 */
export declare function getClusterInitialAttributeValues<F extends BitSchema, SF extends TypeFromPartialBitSchema<F>, A extends Attributes, C extends Commands, E extends Events>(attributeInitialValues: {
    [key: ClusterId]: AttributeInitialValues<any>;
} | undefined, cluster: Cluster<F, SF, A, C, E>): AttributeInitialValues<A> | undefined;
declare const OnOffBaseDevice_base: new (definition: DeviceTypeDefinition, options?: EndpointOptions | undefined) => Device & {
    addCommandHandler<K extends keyof OnOffBaseDeviceCommands>(action: K, handler: OnOffBaseDeviceCommands[K]): void;
    removeCommandHandler<K extends keyof OnOffBaseDeviceCommands>(action: K, handler: OnOffBaseDeviceCommands[K]): void;
    _executeHandler<K extends keyof OnOffBaseDeviceCommands>(action: K, ...args: Parameters<OnOffBaseDeviceCommands[K]>): Promise<void>;
};
/**
 * Abstract Base class for OnOff devices
 */
export declare class OnOffBaseDevice extends OnOffBaseDevice_base {
    protected isLighting: boolean;
    /**
     * Creates a new OnOffBaseDevice
     *
     * @protected
     * @param definition Device type definition of the device to create
     * @param attributeInitialValues Optional object with initial attribute values for automatically added clusters
     * @param options Optional endpoint options
     * @param isLighting Define if Lighting feature is set
     */
    constructor(definition: DeviceTypeDefinition, attributeInitialValues?: {
        [key: ClusterId]: AttributeInitialValues<any>;
    }, options?: EndpointOptions, isLighting?: boolean);
    /**
     * Adds mandatory clusters to the device
     *
     * @protected
     * @param attributeInitialValues Optional object with initial attribute values for automatically added clusters
     * @param excludeList List of clusters to exclude from being added
     */
    protected addDeviceClusters(attributeInitialValues?: {
        [key: ClusterId]: AttributeInitialValues<any>;
    }, excludeList?: ClusterId[]): void;
    /**
     * Turns the device on or off
     * This is an example f a convenient device class API to control the device without need to access clusters
     *
     * @param onOff true to turn on, false to turn off
     */
    setOnOff(onOff: boolean): void;
    getOnOff(): boolean;
    /**
     * Toggles the device on or off
     * This is an example f a convenient device class API to control the device without need to access clusters
     */
    toggle(): void;
    /**
     * Adds a listener for the OnOff attribute
     * This is an example of a convenient device class API to control the device without need to access clusters
     *
     * @param listener Listener function to be called when the attribute changes
     */
    addOnOffListener(listener: (newValue: boolean, oldValue: boolean) => void): void;
}
/**
 * Device class for an OnOffPluginUnit Device
 */
export declare class OnOffPluginUnitDevice extends OnOffBaseDevice {
    constructor(onOffAttributeInitialValues?: AttributeInitialValues<typeof OnOff.Cluster.attributes>, options?: EndpointOptions);
}
/**
 * Device class for an OnOffPluginUnit Device
 */
export declare class OnOffLightDevice extends OnOffBaseDevice {
    constructor(onOffAttributeInitialValues?: AttributeInitialValues<typeof OnOff.Cluster.attributes>, options?: EndpointOptions);
    protected addDeviceClusters(attributeInitialValues?: {
        [key: ClusterId]: AttributeInitialValues<any>;
    }, excludeList?: ClusterId[]): void;
}
export {};
//# sourceMappingURL=OnOffDevices.d.ts.map