"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var StorageBackendDisk_exports = {};
__export(StorageBackendDisk_exports, {
  StorageBackendDisk: () => StorageBackendDisk
});
module.exports = __toCommonJS(StorageBackendDisk_exports);
var import_general = require("#general");
var import_node_localstorage = require("node-localstorage");
/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
class StorageBackendDisk extends import_general.SyncStorage {
  localStorage;
  isInitialized = false;
  constructor(path, clear = false) {
    super();
    this.localStorage = new import_node_localstorage.LocalStorage(path);
    if (clear) this.clear();
  }
  get initialized() {
    return this.isInitialized;
  }
  initialize() {
    this.isInitialized = true;
  }
  close() {
    this.isInitialized = false;
  }
  clear() {
    this.localStorage.clear();
  }
  getContextBaseKey(contexts, allowEmptyContext = false) {
    const contextKey = contexts.join(".");
    if (!contextKey.length && !allowEmptyContext || contextKey.includes("..") || contextKey.startsWith(".") || contextKey.endsWith("."))
      throw new import_general.StorageError("Context must not be an empty and not contain dots.");
    return contextKey;
  }
  buildStorageKey(contexts, key) {
    if (!key.length) {
      throw new import_general.StorageError("Key must not be an empty string.");
    }
    const contextKey = this.getContextBaseKey(contexts);
    return `${contextKey}.${key}`;
  }
  get(contexts, key) {
    const value = this.localStorage.getItem(this.buildStorageKey(contexts, key));
    if (value === null) return void 0;
    return (0, import_general.fromJson)(value);
  }
  set(contexts, keyOrValues, value) {
    if (typeof keyOrValues === "string") {
      this.localStorage.setItem(this.buildStorageKey(contexts, keyOrValues), (0, import_general.toJson)(value));
    } else {
      for (const [key, value2] of Object.entries(keyOrValues)) {
        this.localStorage.setItem(this.buildStorageKey(contexts, key), (0, import_general.toJson)(value2));
      }
    }
  }
  delete(contexts, key) {
    this.localStorage.removeItem(this.buildStorageKey(contexts, key));
  }
  /** Returns all keys of a storage context without keys of sub-contexts */
  keys(contexts) {
    const contextKey = this.getContextBaseKey(contexts);
    const keys = [];
    const contextKeyStart = `${contextKey}.`;
    const len = contextKeyStart.length;
    for (const key of Object.keys(this.localStorage)) {
      if (key.startsWith(contextKeyStart) && !key.includes(".", len)) {
        keys.push(key.substring(len));
      }
    }
    return keys;
  }
  values(contexts) {
    const values = {};
    for (const key of this.keys(contexts)) {
      values[key] = this.get(contexts, key);
    }
    return values;
  }
  contexts(contexts) {
    const contextKey = this.getContextBaseKey(contexts, true);
    const startContextKey = contextKey.length ? `${contextKey}.` : "";
    const len = startContextKey.length;
    const foundContexts = new Array();
    for (const key of Object.keys(this.localStorage)) {
      if (key.startsWith(startContextKey)) {
        const subKeys = key.substring(len).split(".");
        if (subKeys.length === 1) continue;
        const context = subKeys[0];
        if (!foundContexts.includes(context)) {
          foundContexts.push(context);
        }
      }
    }
    return foundContexts;
  }
  clearAll(contexts) {
    const contextKey = this.getContextBaseKey(contexts, true);
    const startContextKey = contextKey.length ? `${contextKey}.` : "";
    for (const key of Object.keys(this.localStorage)) {
      if (key.startsWith(startContextKey)) {
        this.localStorage.removeItem(key);
      }
    }
  }
}
//# sourceMappingURL=StorageBackendDisk.js.map
