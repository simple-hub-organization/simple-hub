/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { SupportedStorageTypes, SyncStorage } from "#general";
export declare class StorageBackendDisk extends SyncStorage {
    private readonly localStorage;
    protected isInitialized: boolean;
    constructor(path: string, clear?: boolean);
    get initialized(): boolean;
    initialize(): void;
    close(): void;
    clear(): void;
    getContextBaseKey(contexts: string[], allowEmptyContext?: boolean): string;
    buildStorageKey(contexts: string[], key: string): string;
    get<T extends SupportedStorageTypes>(contexts: string[], key: string): T | undefined;
    set(contexts: string[], key: string, value: SupportedStorageTypes): void;
    set(contexts: string[], values: Record<string, SupportedStorageTypes>): void;
    delete(contexts: string[], key: string): void;
    /** Returns all keys of a storage context without keys of sub-contexts */
    keys(contexts: string[]): string[];
    values(contexts: string[]): Record<string, SupportedStorageTypes>;
    contexts(contexts: string[]): string[];
    clearAll(contexts: string[]): void;
}
//# sourceMappingURL=StorageBackendDisk.d.ts.map