"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var NodePeerStore_exports = {};
__export(NodePeerStore_exports, {
  NodePeerStore: () => NodePeerStore
});
module.exports = __toCommonJS(NodePeerStore_exports);
var import_RemoteDescriptor = require("#behavior/system/commissioning/RemoteDescriptor.js");
var import_general = require("#general");
var import_protocol = require("#protocol");
/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
class NodePeerStore extends import_protocol.PeerAddressStore {
  #owner;
  constructor(owner) {
    super();
    this.#owner = owner;
  }
  async loadPeers() {
    return [...this.#owner.nodes].map((node) => {
      const commissioning = node.state.commissioning;
      if (!commissioning.peerAddress) {
        return;
      }
      return {
        address: commissioning.peerAddress,
        operationalAddress: commissioning.addresses?.find((addr) => addr.type === "udp"),
        discoveryData: import_RemoteDescriptor.RemoteDescriptor.fromLongForm(commissioning)
      };
    }).filter((addr) => addr !== void 0);
  }
  async updatePeer(peer) {
    const node = this.#owner.nodes.get(peer.address);
    if (!node) {
      return;
    }
    await node.act((agent) => {
      const state = agent.commissioning.state;
      import_RemoteDescriptor.RemoteDescriptor.toLongForm(peer.discoveryData, state);
      if (peer.operationalAddress) {
        state.addresses = [peer.operationalAddress];
      }
    });
  }
  async deletePeer(address) {
    const node = this.#owner.nodes.get(address);
    if (node) {
      await node.close();
    }
  }
  async createNodeStore() {
    throw new import_general.InternalError("Node store creation not supported");
  }
}
//# sourceMappingURL=NodePeerStore.js.map
