/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { EventEmitter, GeneratedClass, ObservableProxy } from "#general";
const EventCache = /* @__PURE__ */ new WeakMap();
function BackingEvents(backing) {
  const target = backing.endpoint.eventsOf(backing.type);
  const constructor = target.constructor;
  let Implementation = EventCache.get(constructor);
  if (Implementation === void 0) {
    Implementation = EventEmitterProxy(target);
    EventCache.set(constructor, Implementation);
  }
  return new Implementation(target);
}
const TARGET = Symbol("target");
function EventEmitterProxy(instance) {
  const descriptors = {};
  for (const key in instance) {
    const property = Symbol(key);
    descriptors[key] = {
      get() {
        let observable = this[property];
        if (observable === void 0) {
          observable = this[property] = new ObservableProxy(this[TARGET][key]);
        }
        return observable;
      }
    };
  }
  return GeneratedClass({
    name: `${instance.constructor.name}$Proxy`,
    base: EventEmitter,
    instanceDescriptors: descriptors,
    initialize(target) {
      this[TARGET] = target;
    }
  });
}
export {
  BackingEvents
};
//# sourceMappingURL=BackingEvents.js.map
