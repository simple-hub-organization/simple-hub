/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { Behavior } from "#behavior/Behavior.js";
import { BasicInformationBehavior } from "#behaviors/basic-information";
import {
  Ble,
  FabricAuthority,
  FabricAuthorityConfigurationProvider,
  FabricManager,
  MdnsService,
  ScannerSet
} from "#protocol";
import { CommissioningServer } from "../commissioning/CommissioningServer.js";
import { NetworkServer } from "../network/NetworkServer.js";
import { ActiveDiscoveries } from "./discovery/ActiveDiscoveries.js";
class ControllerBehavior extends Behavior {
  static id = "controller";
  async initialize() {
    if (this.state.ip === void 0) {
      this.state.ip = true;
    }
    if (this.state.ip !== false) {
      this.env.get(ScannerSet).add((await this.env.load(MdnsService)).scanner);
    }
    if (this.state.ble === void 0) {
      this.state.ble = (await this.agent.load(NetworkServer)).state.ble;
    }
    if (this.state.ble !== false) {
      this.env.get(ScannerSet).add(Ble.get().getBleScanner());
    }
    if (!this.env.has(FabricAuthorityConfigurationProvider)) {
      const biState = this.endpoint.stateOf(BasicInformationBehavior);
      this.env.set(
        FabricAuthorityConfigurationProvider,
        new class extends FabricAuthorityConfigurationProvider {
          get vendorId() {
            return biState.vendorId;
          }
        }()
      );
    }
    const commissioning = this.agent.get(CommissioningServer);
    if (commissioning.state.enabled === void 0) {
      const controlledFabrics = this.env.get(FabricAuthority).fabrics.length;
      const totalFabrics = this.env.get(FabricManager).length;
      if (controlledFabrics === totalFabrics) {
        commissioning.state.enabled = false;
      }
    }
  }
  async [Symbol.asyncDispose]() {
    const discoveries = this.env.get(ActiveDiscoveries);
    while (discoveries.size) {
      for (const discovery of discoveries) {
        discovery.cancel();
      }
      await Promise.allSettled([...discoveries]);
    }
  }
}
((ControllerBehavior2) => {
  class State {
    /**
     * Set to false to disable scanning on BLE.
     *
     * By default the controller scans via BLE if BLE is available.
     */
    ble = void 0;
    /**
     * Set to false to disable scanning on IP networks.
     *
     * By default the controller always scans on IP networks.
     */
    ip = void 0;
  }
  ControllerBehavior2.State = State;
})(ControllerBehavior || (ControllerBehavior = {}));
export {
  ControllerBehavior
};
//# sourceMappingURL=ControllerBehavior.js.map
