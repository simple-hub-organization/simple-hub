/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { ExpiredReferenceError } from "../../errors.js";
function ManagedReference(parent, index, assertWriteOk, clone) {
  let value = parent.value[index];
  let expired = false;
  let location = {
    ...parent.location,
    path: parent.location.path.at(index)
  };
  const reference = {
    owner: parent,
    get value() {
      return value;
    },
    get expired() {
      return expired;
    },
    get location() {
      return location;
    },
    set location(loc) {
      location = loc;
    },
    get rootOwner() {
      return parent.rootOwner;
    },
    set value(newValue) {
      if (value === newValue) {
        return;
      }
      assertWriteOk(newValue);
      replaceValue(newValue);
      this.change(() => parent.value[index] = newValue);
    },
    get original() {
      if (!parent.original) {
        return void 0;
      }
      return parent.original[index];
    },
    change(mutator) {
      if (expired) {
        throw new ExpiredReferenceError(this.location);
      }
      parent.change(() => {
        if (clone && value === this.original) {
          const newValue = clone(value);
          parent.value[index] = newValue;
          replaceValue(newValue);
        }
        mutator();
      });
    },
    refresh() {
      if (parent.expired) {
        expired = true;
        return;
      }
      if (parent.value === void 0) {
        expired = true;
        replaceValue(void 0);
        return;
      }
      replaceValue(parent.value[index]);
    }
  };
  if (!parent.subrefs) {
    parent.subrefs = {};
  }
  parent.subrefs[index] = reference;
  return reference;
  function replaceValue(newValue) {
    value = newValue;
    const subrefs = reference.subrefs;
    if (subrefs) {
      for (const key in subrefs) {
        subrefs[key].refresh();
      }
    }
  }
}
export {
  ManagedReference
};
//# sourceMappingURL=ManagedReference.js.map
