/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
/*** THIS FILE IS GENERATED, DO NOT EDIT ***/
import { IdentifyServer as BaseIdentifyServer } from "../behaviors/identify/IdentifyServer.js";
import { ThermostatServer as BaseThermostatServer } from "../behaviors/thermostat/ThermostatServer.js";
import { GroupsServer as BaseGroupsServer } from "../behaviors/groups/GroupsServer.js";
import { ScenesManagementServer as BaseScenesManagementServer } from "../behaviors/scenes-management/ScenesManagementServer.js";
import { ThermostatUserInterfaceConfigurationServer as BaseThermostatUserInterfaceConfigurationServer } from "../behaviors/thermostat-user-interface-configuration/ThermostatUserInterfaceConfigurationServer.js";
import { EnergyPreferenceServer as BaseEnergyPreferenceServer } from "../behaviors/energy-preference/EnergyPreferenceServer.js";
import { TimeSynchronizationServer as BaseTimeSynchronizationServer } from "../behaviors/time-synchronization/TimeSynchronizationServer.js";
import { MutableEndpoint } from "../endpoint/type/MutableEndpoint.js";
import { Identity } from "#general";
/**
 * A Thermostat device is capable of having either built-in or separate sensors for temperature, humidity or occupancy.
 * It allows the desired temperature to be set either remotely or locally. The thermostat is capable of sending heating
 * and/or cooling requirement notifications to a heating/cooling unit (for example, an indoor air handler) or is
 * capable of including a mechanism to control a heating or cooling unit directly.
 *
 * ThermostatDevice requires Thermostat cluster but Thermostat is not added by default because you must select the
 * features your device supports. You can add manually using ThermostatDevice.with().
 *
 * @see {@link MatterSpecification.v13.Device} ยง 9.1
 */
export interface ThermostatDevice extends Identity<typeof ThermostatDeviceDefinition> {
}
export declare namespace ThermostatRequirements {
    /**
     * The Identify cluster is required by the Matter specification.
     *
     * We provide this alias to the default implementation {@link IdentifyServer} for convenience.
     */
    const IdentifyServer: typeof BaseIdentifyServer;
    /**
     * The Thermostat cluster is required by the Matter specification.
     *
     * We provide this alias to the default implementation {@link ThermostatServer} for convenience.
     */
    const ThermostatServer: typeof BaseThermostatServer;
    /**
     * The Groups cluster is optional per the Matter specification.
     *
     * We provide this alias to the default implementation {@link GroupsServer} for convenience.
     */
    const GroupsServer: typeof BaseGroupsServer;
    /**
     * The ScenesManagement cluster is optional per the Matter specification.
     *
     * We provide this alias to the default implementation {@link ScenesManagementServer} for convenience.
     */
    const ScenesManagementServer: typeof BaseScenesManagementServer;
    /**
     * The ThermostatUserInterfaceConfiguration cluster is optional per the Matter specification.
     *
     * We provide this alias to the default implementation {@link ThermostatUserInterfaceConfigurationServer} for
     * convenience.
     */
    const ThermostatUserInterfaceConfigurationServer: typeof BaseThermostatUserInterfaceConfigurationServer;
    /**
     * The EnergyPreference cluster is optional per the Matter specification.
     *
     * We provide this alias to the default implementation {@link EnergyPreferenceServer} for convenience.
     */
    const EnergyPreferenceServer: typeof BaseEnergyPreferenceServer;
    /**
     * The TimeSynchronization cluster is optional per the Matter specification.
     *
     * We provide this alias to the default implementation {@link TimeSynchronizationServer} for convenience.
     */
    const TimeSynchronizationServer: typeof BaseTimeSynchronizationServer;
    /**
     * The RelativeHumidityMeasurement cluster is optional per the Matter specification.
     *
     * We provide this alias to the default implementation {@link RelativeHumidityMeasurementBehavior} for convenience.
     */
    const RelativeHumidityMeasurementBehavior: import("../index.js").ClusterBehavior.Type<import("@matter/types/clusters/relative-humidity-measurement").RelativeHumidityMeasurement.Cluster, typeof import("../index.js").ClusterBehavior, {
        components: never[];
    }>;
    /**
     * The TimeSynchronization cluster is optional per the Matter specification.
     *
     * We provide this alias to the default implementation {@link TimeSynchronizationBehavior} for convenience.
     */
    const TimeSynchronizationBehavior: import("../index.js").ClusterBehavior.Type<import("@matter/types/clusters/time-synchronization").TimeSynchronization.Cluster, import("../index.js").ClusterBehavior.Type<import("@matter/types").ClusterType.Of<{
        readonly id: 0;
        readonly revision: 0;
        readonly name: "Unknown";
        readonly attributes: {};
        readonly commands: {};
        readonly events: {};
    }>, typeof import("../index.js").ClusterBehavior, import("../behaviors/index.js").TimeSynchronizationInterface>, import("../behaviors/index.js").TimeSynchronizationInterface>;
    /**
     * The FanControl cluster is optional per the Matter specification.
     *
     * We provide this alias to the default implementation {@link FanControlBehavior} for convenience.
     */
    const FanControlBehavior: import("../index.js").ClusterBehavior.Type<import("@matter/types/clusters/fan-control").FanControl.Cluster, import("../index.js").ClusterBehavior.Type<import("@matter/types").ClusterType.Of<{
        readonly id: 0;
        readonly revision: 0;
        readonly name: "Unknown";
        readonly attributes: {};
        readonly commands: {};
        readonly events: {};
    }>, typeof import("../index.js").ClusterBehavior, import("../behaviors/index.js").FanControlInterface>, import("../behaviors/index.js").FanControlInterface>;
    /**
     * The TemperatureMeasurement cluster is optional per the Matter specification.
     *
     * We provide this alias to the default implementation {@link TemperatureMeasurementBehavior} for convenience.
     */
    const TemperatureMeasurementBehavior: import("../index.js").ClusterBehavior.Type<import("@matter/types/clusters/temperature-measurement").TemperatureMeasurement.Cluster, typeof import("../index.js").ClusterBehavior, {
        components: never[];
    }>;
    /**
     * The OccupancySensing cluster is optional per the Matter specification.
     *
     * We provide this alias to the default implementation {@link OccupancySensingBehavior} for convenience.
     */
    const OccupancySensingBehavior: import("../index.js").ClusterBehavior.Type<import("@matter/types/clusters/occupancy-sensing").OccupancySensing.Cluster, typeof import("../index.js").ClusterBehavior, {
        components: never[];
    }>;
    /**
     * An implementation for each server cluster supported by the endpoint per the Matter specification.
     */
    const server: {
        mandatory: {
            Identify: typeof BaseIdentifyServer;
            Thermostat: typeof BaseThermostatServer;
        };
        optional: {
            Groups: typeof BaseGroupsServer;
            ScenesManagement: typeof BaseScenesManagementServer;
            ThermostatUserInterfaceConfiguration: typeof BaseThermostatUserInterfaceConfigurationServer;
            EnergyPreference: typeof BaseEnergyPreferenceServer;
            TimeSynchronization: typeof BaseTimeSynchronizationServer;
        };
    };
    /**
     * A definition for each client cluster supported by the endpoint per the Matter specification.
     */
    const client: {
        optional: {
            RelativeHumidityMeasurement: import("../index.js").ClusterBehavior.Type<import("@matter/types/clusters/relative-humidity-measurement").RelativeHumidityMeasurement.Cluster, typeof import("../index.js").ClusterBehavior, {
                components: never[];
            }>;
            TimeSynchronization: import("../index.js").ClusterBehavior.Type<import("@matter/types/clusters/time-synchronization").TimeSynchronization.Cluster, import("../index.js").ClusterBehavior.Type<import("@matter/types").ClusterType.Of<{
                readonly id: 0;
                readonly revision: 0;
                readonly name: "Unknown";
                readonly attributes: {};
                readonly commands: {};
                readonly events: {};
            }>, typeof import("../index.js").ClusterBehavior, import("../behaviors/index.js").TimeSynchronizationInterface>, import("../behaviors/index.js").TimeSynchronizationInterface>;
            FanControl: import("../index.js").ClusterBehavior.Type<import("@matter/types/clusters/fan-control").FanControl.Cluster, import("../index.js").ClusterBehavior.Type<import("@matter/types").ClusterType.Of<{
                readonly id: 0;
                readonly revision: 0;
                readonly name: "Unknown";
                readonly attributes: {};
                readonly commands: {};
                readonly events: {};
            }>, typeof import("../index.js").ClusterBehavior, import("../behaviors/index.js").FanControlInterface>, import("../behaviors/index.js").FanControlInterface>;
            TemperatureMeasurement: import("../index.js").ClusterBehavior.Type<import("@matter/types/clusters/temperature-measurement").TemperatureMeasurement.Cluster, typeof import("../index.js").ClusterBehavior, {
                components: never[];
            }>;
            OccupancySensing: import("../index.js").ClusterBehavior.Type<import("@matter/types/clusters/occupancy-sensing").OccupancySensing.Cluster, typeof import("../index.js").ClusterBehavior, {
                components: never[];
            }>;
        };
        mandatory: {};
    };
}
export declare const ThermostatDeviceDefinition: MutableEndpoint.With<import("../index.js").EndpointType.For<{
    readonly name: "Thermostat";
    readonly deviceType: 769;
    readonly deviceRevision: 3;
    readonly requirements: typeof ThermostatRequirements;
    readonly behaviors: {
        readonly identify: typeof BaseIdentifyServer;
    };
}>, {
    readonly identify: typeof BaseIdentifyServer;
}>;
export declare const ThermostatDevice: ThermostatDevice;
//# sourceMappingURL=thermostat.d.ts.map