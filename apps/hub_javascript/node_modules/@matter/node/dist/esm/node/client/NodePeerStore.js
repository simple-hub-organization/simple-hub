/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { RemoteDescriptor } from "#behavior/system/commissioning/RemoteDescriptor.js";
import { InternalError } from "#general";
import { PeerAddressStore } from "#protocol";
class NodePeerStore extends PeerAddressStore {
  #owner;
  constructor(owner) {
    super();
    this.#owner = owner;
  }
  async loadPeers() {
    return [...this.#owner.nodes].map((node) => {
      const commissioning = node.state.commissioning;
      if (!commissioning.peerAddress) {
        return;
      }
      return {
        address: commissioning.peerAddress,
        operationalAddress: commissioning.addresses?.find((addr) => addr.type === "udp"),
        discoveryData: RemoteDescriptor.fromLongForm(commissioning)
      };
    }).filter((addr) => addr !== void 0);
  }
  async updatePeer(peer) {
    const node = this.#owner.nodes.get(peer.address);
    if (!node) {
      return;
    }
    await node.act((agent) => {
      const state = agent.commissioning.state;
      RemoteDescriptor.toLongForm(peer.discoveryData, state);
      if (peer.operationalAddress) {
        state.addresses = [peer.operationalAddress];
      }
    });
  }
  async deletePeer(address) {
    const node = this.#owner.nodes.get(address);
    if (node) {
      await node.close();
    }
  }
  async createNodeStore() {
    throw new InternalError("Node store creation not supported");
  }
}
export {
  NodePeerStore
};
//# sourceMappingURL=NodePeerStore.js.map
