/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
/*** THIS FILE IS GENERATED, DO NOT EDIT ***/
import { MutableCluster } from "../cluster/mutation/MutableCluster.js";
import { Attribute, Command, OptionalAttribute, OptionalWritableAttribute, WritableAttribute, FixedAttribute, OptionalFixedAttribute } from "../cluster/Cluster.js";
import { BitFlag, BitField } from "../schema/BitmapSchema.js";
import { TypeFromSchema } from "../tlv/TlvSchema.js";
import { Identity } from "#general";
export declare namespace ColorControl {
    /**
     * These are optional features supported by ColorControlCluster.
     *
     * @see {@link MatterSpecification.v13.Cluster} § 3.2.5
     */
    enum Feature {
        /**
         * HueSaturation (HS)
         *
         * Supports color specification via hue/saturation.
         */
        HueSaturation = "HueSaturation",
        /**
         * EnhancedHue (EHUE)
         *
         * Enhanced hue is supported.
         */
        EnhancedHue = "EnhancedHue",
        /**
         * ColorLoop (CL)
         *
         * Color loop is supported.
         */
        ColorLoop = "ColorLoop",
        /**
         * Xy (XY)
         *
         * Supports color specification via XY.
         */
        Xy = "Xy",
        /**
         * ColorTemperature (CT)
         *
         * Supports specification of color temperature.
         */
        ColorTemperature = "ColorTemperature"
    }
    /**
     * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.4.2
     */
    enum Direction {
        ShortestDistance = 0,
        LongestDistance = 1,
        Up = 2,
        Down = 3
    }
    /**
     * The value of the ColorControl options attribute
     *
     * @see {@link MatterSpecification.v13.Cluster} § 3.2.7.11
     */
    const Options: {
        executeIfOff: BitFlag;
    };
    /**
     * Input to the ColorControl moveToHue command
     *
     * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.4
     */
    const TlvMoveToHueRequest: import("../tlv/TlvObject.js").ObjectSchema<{
        /**
         * The Hue field specifies the hue to be moved to.
         *
         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.4.1
         */
        hue: import("../tlv/TlvObject.js").FieldType<number>;
        /**
         * The Direction field shall be one of the non-reserved values in Values of the Direction Field.
         *
         * ### Table 17. Values of the Direction Field
         *
         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.4.2
         */
        direction: import("../tlv/TlvObject.js").FieldType<Direction>;
        /**
         * The TransitionTime field specifies, in 1/10ths of a second, the time that shall be taken to move to the new
         * hue.
         *
         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.4.3
         */
        transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
            executeIfOff: BitFlag;
        }>>;
        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
            executeIfOff: BitFlag;
        }>>;
    }>;
    /**
     * Input to the ColorControl moveToHue command
     *
     * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.4
     */
    interface MoveToHueRequest extends TypeFromSchema<typeof TlvMoveToHueRequest> {
    }
    /**
     * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.5.1
     */
    enum MoveMode {
        Stop = 0,
        Up = 1,
        Down = 3
    }
    /**
     * Input to the ColorControl moveHue command
     *
     * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.5
     */
    const TlvMoveHueRequest: import("../tlv/TlvObject.js").ObjectSchema<{
        /**
         * The MoveMode field shall be one of the non-reserved values in Values of the MoveMode Field. If the MoveMode
         * field is equal to 0 (Stop), the Rate field shall be ignored.
         *
         * ### Table 18. Values of the MoveMode Field
         *
         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.5.1
         */
        moveMode: import("../tlv/TlvObject.js").FieldType<MoveMode>;
        /**
         * The Rate field specifies the rate of movement in steps per second. A step is a change in the device’s hue of
         * one unit. If the MoveMode field is set to 1 (up) or 3 (down) and the Rate field has a value of zero, the
         * command has no effect and a response command shall be sent in response, with the status code set to
         * INVALID_COMMAND. If the MoveMode field is set to 0 (stop) the Rate field shall be ignored.
         *
         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.5.2
         */
        rate: import("../tlv/TlvObject.js").FieldType<number>;
        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
            executeIfOff: BitFlag;
        }>>;
        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
            executeIfOff: BitFlag;
        }>>;
    }>;
    /**
     * Input to the ColorControl moveHue command
     *
     * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.5
     */
    interface MoveHueRequest extends TypeFromSchema<typeof TlvMoveHueRequest> {
    }
    /**
     * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.6.1
     */
    enum StepMode {
        Up = 1,
        Down = 3
    }
    /**
     * Input to the ColorControl stepHue command
     *
     * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.6
     */
    const TlvStepHueRequest: import("../tlv/TlvObject.js").ObjectSchema<{
        /**
         * The StepMode field shall be one of the non-reserved values in Values of the StepMode Field.
         *
         * ### Table 20. Values of the StepMode Field
         *
         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.6.1
         */
        stepMode: import("../tlv/TlvObject.js").FieldType<StepMode>;
        /**
         * The change to be added to (or subtracted from) the current value of the device’s hue.
         *
         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.6.2
         */
        stepSize: import("../tlv/TlvObject.js").FieldType<number>;
        /**
         * The TransitionTime field specifies, in 1/10ths of a second, the time that shall be taken to perform the
         * step. A step is a change in the device’s hue of ‘Step size’ units.
         *
         * NOTE
         *
         * Here the TransitionTime data field is of data type uint8, where uint16 is more common for TransitionTime
         * data fields in other clusters / commands.
         *
         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.6.3
         */
        transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
            executeIfOff: BitFlag;
        }>>;
        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
            executeIfOff: BitFlag;
        }>>;
    }>;
    /**
     * Input to the ColorControl stepHue command
     *
     * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.6
     */
    interface StepHueRequest extends TypeFromSchema<typeof TlvStepHueRequest> {
    }
    /**
     * Input to the ColorControl moveToSaturation command
     *
     * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.7
     */
    const TlvMoveToSaturationRequest: import("../tlv/TlvObject.js").ObjectSchema<{
        saturation: import("../tlv/TlvObject.js").FieldType<number>;
        transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
            executeIfOff: BitFlag;
        }>>;
        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
            executeIfOff: BitFlag;
        }>>;
    }>;
    /**
     * Input to the ColorControl moveToSaturation command
     *
     * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.7
     */
    interface MoveToSaturationRequest extends TypeFromSchema<typeof TlvMoveToSaturationRequest> {
    }
    /**
     * Input to the ColorControl moveSaturation command
     *
     * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.8
     */
    const TlvMoveSaturationRequest: import("../tlv/TlvObject.js").ObjectSchema<{
        /**
         * The MoveMode field shall be one of the non-reserved values in Values of the MoveMode Field. If the MoveMode
         * field is equal to 0 (Stop), the Rate field shall be ignored.
         *
         * ### Table 22. Values of the MoveMode Field
         *
         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.8.1
         */
        moveMode: import("../tlv/TlvObject.js").FieldType<MoveMode>;
        /**
         * The Rate field specifies the rate of movement in steps per second. A step is a change in the device’s
         * saturation of one unit. If the MoveMode field is set to 1 (up) or 3 (down) and the Rate field has a value of
         * zero, the command has no effect and a response command shall be sent in response, with the status code set
         * to INVALID_COMMAND. If the MoveMode field is set to 0 (stop) the Rate field shall be ignored.
         *
         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.8.2
         */
        rate: import("../tlv/TlvObject.js").FieldType<number>;
        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
            executeIfOff: BitFlag;
        }>>;
        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
            executeIfOff: BitFlag;
        }>>;
    }>;
    /**
     * Input to the ColorControl moveSaturation command
     *
     * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.8
     */
    interface MoveSaturationRequest extends TypeFromSchema<typeof TlvMoveSaturationRequest> {
    }
    /**
     * Input to the ColorControl stepSaturation command
     *
     * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.9
     */
    const TlvStepSaturationRequest: import("../tlv/TlvObject.js").ObjectSchema<{
        /**
         * The StepMode field shall be one of the non-reserved values in Values of the StepMode Field.
         *
         * ### Table 24. Values of the StepMode Field
         *
         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.9.1
         */
        stepMode: import("../tlv/TlvObject.js").FieldType<StepMode>;
        /**
         * The change to be added to (or subtracted from) the current value of the device’s saturation.
         *
         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.9.2
         */
        stepSize: import("../tlv/TlvObject.js").FieldType<number>;
        /**
         * The TransitionTime field specifies, in 1/10ths of a second, the time that shall be taken to perform the
         * step. A step is a change in the device’s saturation of ‘Step size’ units.
         *
         * NOTE
         *
         * Here the TransitionTime data field is of data type uint8, where uint16 is more common for TransitionTime
         * data fields in other clusters / commands.
         *
         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.9.3
         */
        transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
            executeIfOff: BitFlag;
        }>>;
        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
            executeIfOff: BitFlag;
        }>>;
    }>;
    /**
     * Input to the ColorControl stepSaturation command
     *
     * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.9
     */
    interface StepSaturationRequest extends TypeFromSchema<typeof TlvStepSaturationRequest> {
    }
    /**
     * Input to the ColorControl moveToHueAndSaturation command
     *
     * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.10
     */
    const TlvMoveToHueAndSaturationRequest: import("../tlv/TlvObject.js").ObjectSchema<{
        hue: import("../tlv/TlvObject.js").FieldType<number>;
        saturation: import("../tlv/TlvObject.js").FieldType<number>;
        transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
            executeIfOff: BitFlag;
        }>>;
        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
            executeIfOff: BitFlag;
        }>>;
    }>;
    /**
     * Input to the ColorControl moveToHueAndSaturation command
     *
     * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.10
     */
    interface MoveToHueAndSaturationRequest extends TypeFromSchema<typeof TlvMoveToHueAndSaturationRequest> {
    }
    /**
     * Input to the ColorControl moveToColor command
     *
     * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.11
     */
    const TlvMoveToColorRequest: import("../tlv/TlvObject.js").ObjectSchema<{
        colorX: import("../tlv/TlvObject.js").FieldType<number>;
        colorY: import("../tlv/TlvObject.js").FieldType<number>;
        transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
            executeIfOff: BitFlag;
        }>>;
        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
            executeIfOff: BitFlag;
        }>>;
    }>;
    /**
     * Input to the ColorControl moveToColor command
     *
     * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.11
     */
    interface MoveToColorRequest extends TypeFromSchema<typeof TlvMoveToColorRequest> {
    }
    /**
     * Input to the ColorControl moveColor command
     *
     * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.12
     */
    const TlvMoveColorRequest: import("../tlv/TlvObject.js").ObjectSchema<{
        /**
         * The RateX field specifies the rate of movement in steps per second. A step is a change in the device’s
         * CurrentX attribute of one unit.
         *
         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.12.1
         */
        rateX: import("../tlv/TlvObject.js").FieldType<number>;
        /**
         * The RateY field specifies the rate of movement in steps per second. A step is a change in the device’s
         * CurrentY attribute of one unit.
         *
         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.12.2
         */
        rateY: import("../tlv/TlvObject.js").FieldType<number>;
        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
            executeIfOff: BitFlag;
        }>>;
        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
            executeIfOff: BitFlag;
        }>>;
    }>;
    /**
     * Input to the ColorControl moveColor command
     *
     * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.12
     */
    interface MoveColorRequest extends TypeFromSchema<typeof TlvMoveColorRequest> {
    }
    /**
     * Input to the ColorControl stepColor command
     *
     * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.13
     */
    const TlvStepColorRequest: import("../tlv/TlvObject.js").ObjectSchema<{
        stepX: import("../tlv/TlvObject.js").FieldType<number>;
        stepY: import("../tlv/TlvObject.js").FieldType<number>;
        /**
         * The TransitionTime field specifies, in 1/10ths of a second, the time that shall be taken to perform the
         * color change.
         *
         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.13.2
         */
        transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
            executeIfOff: BitFlag;
        }>>;
        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
            executeIfOff: BitFlag;
        }>>;
    }>;
    /**
     * Input to the ColorControl stepColor command
     *
     * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.13
     */
    interface StepColorRequest extends TypeFromSchema<typeof TlvStepColorRequest> {
    }
    /**
     * Input to the ColorControl moveToColorTemperature command
     *
     * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.14
     */
    const TlvMoveToColorTemperatureRequest: import("../tlv/TlvObject.js").ObjectSchema<{
        colorTemperatureMireds: import("../tlv/TlvObject.js").FieldType<number>;
        transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
            executeIfOff: BitFlag;
        }>>;
        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
            executeIfOff: BitFlag;
        }>>;
    }>;
    /**
     * Input to the ColorControl moveToColorTemperature command
     *
     * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.14
     */
    interface MoveToColorTemperatureRequest extends TypeFromSchema<typeof TlvMoveToColorTemperatureRequest> {
    }
    /**
     * Input to the ColorControl moveColorTemperature command
     *
     * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.21
     */
    const TlvMoveColorTemperatureRequest: import("../tlv/TlvObject.js").ObjectSchema<{
        /**
         * This field is identical to the MoveMode field of the MoveHue command of the Color Control cluster (see
         * sub-clause MoveHue Command). If the MoveMode field is equal to 0 (Stop), the Rate field shall be ignored.
         *
         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.21.1
         */
        moveMode: import("../tlv/TlvObject.js").FieldType<MoveMode>;
        /**
         * The Rate field specifies the rate of movement in steps per second. A step is a change in the color
         * temperature of a device by one unit. If the MoveMode field is set to 1 (up) or 3 (down) and the Rate field
         * has a value of zero, the command has no effect and a response command shall be sent in response, with the
         * status code set to INVALID_COMMAND. If the MoveMode field is set to 0 (stop) the Rate field shall be ignored.
         *
         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.21.2
         */
        rate: import("../tlv/TlvObject.js").FieldType<number>;
        /**
         * The ColorTemperatureMinimumMireds field specifies a lower bound on the ColorTemperatureMireds attribute (≡
         * an upper bound on the color temperature in kelvins) for the current move operation
         *
         * ColorTempPhysicalMinMireds <= ColorTemperatureMinimumMireds field <= ColorTemperatureMireds
         *
         * As such if the move operation takes the ColorTemperatureMireds attribute towards the value of the
         * ColorTemperatureMinimumMireds field it shall be clipped so that the above invariant is satisfied. If the
         * ColorTemperatureMinimumMireds field is set to 0, ColorTempPhysicalMinMireds shall be used as the lower bound
         * for the ColorTemperatureMireds attribute.
         *
         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.21.3
         */
        colorTemperatureMinimumMireds: import("../tlv/TlvObject.js").FieldType<number>;
        /**
         * The ColorTemperatureMaximumMireds field specifies an upper bound on the ColorTemperatureMireds attribute (≡
         * a lower bound on the color temperature in kelvins) for the current move operation
         *
         * ColorTemperatureMireds <= ColorTemperatureMaximumMireds field <= ColorTempPhysicalMaxMireds
         *
         * As such if the move operation takes the ColorTemperatureMireds attribute towards the value of the
         * ColorTemperatureMaximumMireds field it shall be clipped so that the above invariant is satisfied. If the
         * ColorTemperatureMaximumMireds field is set to 0, ColorTempPhysicalMaxMireds shall be used as the upper bound
         * for the ColorTemperatureMireds attribute.
         *
         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.21.4
         */
        colorTemperatureMaximumMireds: import("../tlv/TlvObject.js").FieldType<number>;
        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
            executeIfOff: BitFlag;
        }>>;
        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
            executeIfOff: BitFlag;
        }>>;
    }>;
    /**
     * Input to the ColorControl moveColorTemperature command
     *
     * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.21
     */
    interface MoveColorTemperatureRequest extends TypeFromSchema<typeof TlvMoveColorTemperatureRequest> {
    }
    /**
     * Input to the ColorControl stepColorTemperature command
     *
     * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.22
     */
    const TlvStepColorTemperatureRequest: import("../tlv/TlvObject.js").ObjectSchema<{
        /**
         * This field is identical to the StepMode field of the StepHue command of the Color Control cluster (see
         * sub-clause StepHue Command).
         *
         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.22.1
         */
        stepMode: import("../tlv/TlvObject.js").FieldType<StepMode>;
        /**
         * The StepSize field specifies the change to be added to (or subtracted from) the current value of the
         * device’s color temperature.
         *
         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.22.2
         */
        stepSize: import("../tlv/TlvObject.js").FieldType<number>;
        /**
         * The TransitionTime field specifies, in units of 1/10ths of a second, the time that shall be taken to perform
         * the step. A step is a change to the device’s color temperature of a magnitude corresponding to the StepSize
         * field.
         *
         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.22.3
         */
        transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
        /**
         * The ColorTemperatureMinimumMireds field specifies a lower bound on the ColorTemperatureMireds attribute (≡
         * an upper bound on the color temperature in kelvins) for the current step operation
         *
         * ColorTempPhysicalMinMireds <= ColorTemperatureMinimumMireds field <= ColorTemperatureMireds
         *
         * As such if the step operation takes the ColorTemperatureMireds attribute towards the value of the Color
         * Temperature Minimum Mireds field it shall be clipped so that the above invariant is satisfied. If the
         * ColorTemperatureMinimumMireds field is set to 0, ColorTempPhysicalMinMireds shall be used as the lower bound
         * for the ColorTemperatureMireds attribute.
         *
         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.22.4
         */
        colorTemperatureMinimumMireds: import("../tlv/TlvObject.js").FieldType<number>;
        /**
         * The ColorTemperatureMaximumMireds field specifies an upper bound on the ColorTemperatureMireds attribute (≡
         * a lower bound on the color temperature in kelvins) for the current step operation
         *
         * ColorTemperatureMireds ≤ ColorTemperatureMaximumMireds field ≤ ColorTempPhysicalMaxMireds
         *
         * As such if the step operation takes the ColorTemperatureMireds attribute towards the value of the
         * ColorTemperatureMaximumMireds field it shall be clipped so that the above invariant is satisfied. If the
         * ColorTemperatureMaximum Mireds field is set to 0, ColorTempPhysicalMaxMireds shall be used as the upper
         * bound for the ColorTemperatureMireds attribute.
         *
         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.22.5
         */
        colorTemperatureMaximumMireds: import("../tlv/TlvObject.js").FieldType<number>;
        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
            executeIfOff: BitFlag;
        }>>;
        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
            executeIfOff: BitFlag;
        }>>;
    }>;
    /**
     * Input to the ColorControl stepColorTemperature command
     *
     * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.22
     */
    interface StepColorTemperatureRequest extends TypeFromSchema<typeof TlvStepColorTemperatureRequest> {
    }
    /**
     * Input to the ColorControl enhancedMoveToHue command
     *
     * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.15
     */
    const TlvEnhancedMoveToHueRequest: import("../tlv/TlvObject.js").ObjectSchema<{
        /**
         * The EnhancedHue field specifies the target extended hue for the lamp.
         *
         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.15.1
         */
        enhancedHue: import("../tlv/TlvObject.js").FieldType<number>;
        /**
         * This field is identical to the Direction field of the MoveToHue command of the Color Control cluster (see
         * sub-clause Use of the OptionsMask and OptionsOverride fields).
         *
         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.15.2
         */
        direction: import("../tlv/TlvObject.js").FieldType<Direction>;
        /**
         * This field is identical to the TransitionTime field of the MoveToHue command of the Color Control cluster
         * (see sub-clause Use of the OptionsMask and OptionsOverride fields).
         *
         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.15.3
         */
        transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
            executeIfOff: BitFlag;
        }>>;
        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
            executeIfOff: BitFlag;
        }>>;
    }>;
    /**
     * Input to the ColorControl enhancedMoveToHue command
     *
     * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.15
     */
    interface EnhancedMoveToHueRequest extends TypeFromSchema<typeof TlvEnhancedMoveToHueRequest> {
    }
    /**
     * Input to the ColorControl enhancedMoveHue command
     *
     * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.16
     */
    const TlvEnhancedMoveHueRequest: import("../tlv/TlvObject.js").ObjectSchema<{
        /**
         * This field is identical to the MoveMode field of the MoveHue command of the Color Control cluster (see
         * sub-clause MoveHue Command). If the MoveMode field is equal to 0 (Stop), the Rate field shall be ignored.
         *
         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.16.1
         */
        moveMode: import("../tlv/TlvObject.js").FieldType<MoveMode>;
        /**
         * The Rate field specifies the rate of movement in steps per second. A step is a change in the extended hue of
         * a device by one unit. If the MoveMode field is set to 1 (up) or 3 (down) and the Rate field has a value of
         * zero, the command has no effect and a response command shall be sent in response, with the status code set
         * to INVALID_COMMAND. If the MoveMode field is set to 0 (stop) the Rate field shall be ignored.
         *
         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.16.2
         */
        rate: import("../tlv/TlvObject.js").FieldType<number>;
        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
            executeIfOff: BitFlag;
        }>>;
        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
            executeIfOff: BitFlag;
        }>>;
    }>;
    /**
     * Input to the ColorControl enhancedMoveHue command
     *
     * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.16
     */
    interface EnhancedMoveHueRequest extends TypeFromSchema<typeof TlvEnhancedMoveHueRequest> {
    }
    /**
     * Input to the ColorControl enhancedStepHue command
     *
     * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.17
     */
    const TlvEnhancedStepHueRequest: import("../tlv/TlvObject.js").ObjectSchema<{
        /**
         * This field is identical to the StepMode field of the StepHue command of the Color Control cluster (see
         * sub-clause StepHue Command).
         *
         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.17.1
         */
        stepMode: import("../tlv/TlvObject.js").FieldType<StepMode>;
        /**
         * The StepSize field specifies the change to be added to (or subtracted from) the current value of the
         * device’s enhanced hue.
         *
         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.17.2
         */
        stepSize: import("../tlv/TlvObject.js").FieldType<number>;
        /**
         * The TransitionTime field specifies, in units of 1/10ths of a second, the time that shall be taken to perform
         * the step. A step is a change to the device’s enhanced hue of a magnitude corresponding to the StepSize field.
         *
         * NOTE
         *
         * Here TransitionTime data field is of data type uint16, while the TransitionTime data field of the StepHue
         * command is of data type uint8.
         *
         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.17.3
         */
        transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
            executeIfOff: BitFlag;
        }>>;
        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
            executeIfOff: BitFlag;
        }>>;
    }>;
    /**
     * Input to the ColorControl enhancedStepHue command
     *
     * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.17
     */
    interface EnhancedStepHueRequest extends TypeFromSchema<typeof TlvEnhancedStepHueRequest> {
    }
    /**
     * Input to the ColorControl enhancedMoveToHueAndSaturation command
     *
     * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.18
     */
    const TlvEnhancedMoveToHueAndSaturationRequest: import("../tlv/TlvObject.js").ObjectSchema<{
        /**
         * The EnhancedHue field specifies the target extended hue for the lamp.
         *
         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.18.1
         */
        enhancedHue: import("../tlv/TlvObject.js").FieldType<number>;
        /**
         * This field is identical to the Saturation field of the MoveToHueAndSaturation command of the Color Control
         * cluster (see sub-clause MoveToHueAndSaturation Command).
         *
         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.18.2
         */
        saturation: import("../tlv/TlvObject.js").FieldType<number>;
        /**
         * This field is identical to the TransitionTime field of the MoveToHue command of the Color Control cluster
         * (see sub-clause MoveToHueAndSaturation Command).
         *
         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.18.3
         */
        transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
            executeIfOff: BitFlag;
        }>>;
        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
            executeIfOff: BitFlag;
        }>>;
    }>;
    /**
     * Input to the ColorControl enhancedMoveToHueAndSaturation command
     *
     * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.18
     */
    interface EnhancedMoveToHueAndSaturationRequest extends TypeFromSchema<typeof TlvEnhancedMoveToHueAndSaturationRequest> {
    }
    /**
     * The value of the ColorControl colorLoopActive attribute
     *
     * @see {@link MatterSpecification.v13.Cluster} § 3.2.7.14
     */
    enum ColorLoopActive {
        Inactive = 0,
        Active = 1
    }
    /**
     * The value of the ColorControl colorLoopDirection attribute
     *
     * @see {@link MatterSpecification.v13.Cluster} § 3.2.7.15
     */
    enum ColorLoopDirection {
        Decrement = 0,
        Increment = 1
    }
    /**
     * The value of ColorControl.updateFlags
     *
     * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.19.1
     */
    const UpdateFlags: {
        updateAction: BitFlag;
        updateDirection: BitFlag;
        updateTime: BitFlag;
        updateStartHue: BitFlag;
        reserved: BitField;
    };
    /**
     * The value of ColorControl.action
     *
     * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.19.2
     */
    enum Action {
        DeActivateTheColorLoop = 0,
        ActivateTheColorLoopFromTheValueInTheColorLoopStartEnhancedHueField = 1,
        ActivateTheColorLoopFromTheValueOfTheEnhancedCurrentHueAttribute = 2
    }
    /**
     * The value of ColorControl.direction
     *
     * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.19.3
     */
    enum ColorLoopSetDirection {
        DecrementTheHueInTheColorLoop = 0,
        IncrementTheHueInTheColorLoop = 1
    }
    /**
     * Input to the ColorControl colorLoopSet command
     *
     * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.19
     */
    const TlvColorLoopSetRequest: import("../tlv/TlvObject.js").ObjectSchema<{
        /**
         * The UpdateFlags field specifies which color loop attributes to update before the color loop is started. This
         * field shall be formatted as illustrated in Format of the UpdateFlags Field of the ColorLoopSet Command.
         *
         * ### Table 28. Format of the UpdateFlags Field of the ColorLoopSet Command
         *
         * The UpdateAction sub-field is 1 bit in length and specifies whether the device shall adhere to the action
         * field in order to process the command. If this sub-field is set to 1, the device shall adhere to the action
         * field. If this sub-field is set to 0, the device shall ignore the Action field.
         *
         * The UpdateDirection sub-field is 1 bit in length and specifies whether the device shall update the
         * ColorLoopDirection attribute with the Direction field. If this sub-field is set to 1, the device shall
         * update the value of the ColorLoopDirection attribute with the value of the Direction field. If this
         * sub-field is set to 0, the device shall ignore the Direction field.
         *
         * The UpdateTime sub-field is 1 bit in length and specifies whether the device shall update the ColorLoopTime
         * attribute with the Time field. If this sub-field is set to 1, the device shall update the value of the
         * ColorLoopTime attribute with the value of the Time field. If this sub-field is set to 0, the device shall
         * ignore the Time field.
         *
         * The UpdateStartHue sub-field is 1 bit in length and specifies whether the device shall update the
         * ColorLoopStartEnhancedHue attribute with the StartHue field. If this sub-field is set to 1, the device shall
         * update the value of the ColorLoopStartEnhancedHue attribute with the value of the StartHue field. If this
         * sub-field is set to 0, the device shall ignore the StartHue field.
         *
         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.19.1
         */
        updateFlags: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
            updateAction: BitFlag;
            updateDirection: BitFlag;
            updateTime: BitFlag;
            updateStartHue: BitFlag;
            reserved: BitField;
        }>>;
        /**
         * The Action field specifies the action to take for the color loop if the UpdateAction sub-field of the
         * UpdateFlags field is set to 1. This field shall be set to one of the non-reserved values listed in Values of
         * the Action Field of the ColorLoopSet Command.
         *
         * ### Table 29. Values of the Action Field of the ColorLoopSet Command
         *
         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.19.2
         */
        action: import("../tlv/TlvObject.js").FieldType<Action>;
        /**
         * The Direction field specifies the direction for the color loop if the Update Direction field of the
         * UpdateFlags field is set to 1. This field shall be set to one of the non-reserved values listed in Values of
         * the Direction Field of the ColorLoopSet Command.
         *
         * ### Table 30. Values of the Direction Field of the ColorLoopSet Command
         *
         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.19.3
         */
        direction: import("../tlv/TlvObject.js").FieldType<ColorLoopSetDirection>;
        /**
         * The Time field specifies the number of seconds over which to perform a full color loop if the UpdateTime
         * sub-field of the UpdateFlags field is set to 1.
         *
         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.19.4
         */
        time: import("../tlv/TlvObject.js").FieldType<number>;
        startHue: import("../tlv/TlvObject.js").FieldType<number>;
        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
            executeIfOff: BitFlag;
        }>>;
        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
            executeIfOff: BitFlag;
        }>>;
    }>;
    /**
     * Input to the ColorControl colorLoopSet command
     *
     * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.19
     */
    interface ColorLoopSetRequest extends TypeFromSchema<typeof TlvColorLoopSetRequest> {
    }
    /**
     * Input to the ColorControl stopMoveStep command
     *
     * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.20
     */
    const TlvStopMoveStepRequest: import("../tlv/TlvObject.js").ObjectSchema<{
        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
            executeIfOff: BitFlag;
        }>>;
        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
            executeIfOff: BitFlag;
        }>>;
    }>;
    /**
     * Input to the ColorControl stopMoveStep command
     *
     * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.20
     */
    interface StopMoveStepRequest extends TypeFromSchema<typeof TlvStopMoveStepRequest> {
    }
    /**
     * The value of the ColorControl driftCompensation attribute
     *
     * @see {@link MatterSpecification.v13.Cluster} § 3.2.7.7
     */
    enum DriftCompensation {
        None = 0,
        OtherUnknown = 1,
        TemperatureMonitoring = 2,
        OpticalLuminanceMonitoringAndFeedback = 3,
        OpticalColorMonitoringAndFeedback = 4
    }
    /**
     * The value of the ColorControl colorMode attribute
     *
     * @see {@link MatterSpecification.v13.Cluster} § 3.2.7.10
     */
    enum ColorMode {
        CurrentHueAndCurrentSaturation = 0,
        CurrentXAndCurrentY = 1,
        ColorTemperatureMireds = 2
    }
    /**
     * The value of the ColorControl enhancedColorMode attribute
     *
     * @see {@link MatterSpecification.v13.Cluster} § 3.2.7.13
     */
    enum EnhancedColorMode {
        CurrentHueAndCurrentSaturation = 0,
        CurrentXAndCurrentY = 1,
        ColorTemperatureMireds = 2,
        EnhancedCurrentHueAndCurrentSaturation = 3
    }
    /**
     * The value of the ColorControl colorCapabilities attribute
     *
     * @see {@link MatterSpecification.v13.Cluster} § 3.2.7.19
     */
    const ColorCapabilities: {
        hueSaturation: BitFlag;
        enhancedHue: BitFlag;
        colorLoop: BitFlag;
        xy: BitFlag;
        colorTemperature: BitFlag;
    };
    /**
     * A ColorControlCluster supports these elements if it supports feature HueSaturation.
     */
    const HueSaturationComponent: {
        readonly attributes: {
            /**
             * The CurrentHue attribute contains the current hue value of the light. It is updated as fast as practical
             * during commands that change the hue.
             *
             * The hue in degrees shall be related to the CurrentHue attribute by the relationship: Hue = CurrentHue x
             * 360 / 254 (CurrentHue in the range 0 to 254 inclusive)
             *
             * If this attribute is implemented then the CurrentSaturation and ColorMode attributes shall also be
             * implemented.
             *
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.7.2
             */
            readonly currentHue: Attribute<number, any>;
            /**
             * The CurrentSaturation attribute holds the current saturation value of the light. It is updated as fast
             * as practical during commands that change the saturation.
             *
             * The saturation shall be related to the CurrentSaturation attribute by the relationship: Saturation =
             * CurrentSaturation/254 (CurrentSaturation in the range 0 to 254 inclusive)
             *
             * If this attribute is implemented then the CurrentHue and ColorMode attributes shall also be implemented.
             *
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.7.3
             */
            readonly currentSaturation: Attribute<number, any>;
        };
        readonly commands: {
            /**
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.4
             */
            readonly moveToHue: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * The Hue field specifies the hue to be moved to.
                 *
                 * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.4.1
                 */
                hue: import("../tlv/TlvObject.js").FieldType<number>;
                /**
                 * The Direction field shall be one of the non-reserved values in Values of the Direction Field.
                 *
                 * ### Table 17. Values of the Direction Field
                 *
                 * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.4.2
                 */
                direction: import("../tlv/TlvObject.js").FieldType<Direction>;
                /**
                 * The TransitionTime field specifies, in 1/10ths of a second, the time that shall be taken to move to the new
                 * hue.
                 *
                 * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.4.3
                 */
                transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
                optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: BitFlag;
                }>>;
                optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: BitFlag;
                }>>;
            }>, void, any>;
            /**
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.5
             */
            readonly moveHue: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * The MoveMode field shall be one of the non-reserved values in Values of the MoveMode Field. If the MoveMode
                 * field is equal to 0 (Stop), the Rate field shall be ignored.
                 *
                 * ### Table 18. Values of the MoveMode Field
                 *
                 * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.5.1
                 */
                moveMode: import("../tlv/TlvObject.js").FieldType<MoveMode>;
                /**
                 * The Rate field specifies the rate of movement in steps per second. A step is a change in the device’s hue of
                 * one unit. If the MoveMode field is set to 1 (up) or 3 (down) and the Rate field has a value of zero, the
                 * command has no effect and a response command shall be sent in response, with the status code set to
                 * INVALID_COMMAND. If the MoveMode field is set to 0 (stop) the Rate field shall be ignored.
                 *
                 * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.5.2
                 */
                rate: import("../tlv/TlvObject.js").FieldType<number>;
                optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: BitFlag;
                }>>;
                optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: BitFlag;
                }>>;
            }>, void, any>;
            /**
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.6
             */
            readonly stepHue: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * The StepMode field shall be one of the non-reserved values in Values of the StepMode Field.
                 *
                 * ### Table 20. Values of the StepMode Field
                 *
                 * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.6.1
                 */
                stepMode: import("../tlv/TlvObject.js").FieldType<StepMode>;
                /**
                 * The change to be added to (or subtracted from) the current value of the device’s hue.
                 *
                 * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.6.2
                 */
                stepSize: import("../tlv/TlvObject.js").FieldType<number>;
                /**
                 * The TransitionTime field specifies, in 1/10ths of a second, the time that shall be taken to perform the
                 * step. A step is a change in the device’s hue of ‘Step size’ units.
                 *
                 * NOTE
                 *
                 * Here the TransitionTime data field is of data type uint8, where uint16 is more common for TransitionTime
                 * data fields in other clusters / commands.
                 *
                 * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.6.3
                 */
                transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
                optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: BitFlag;
                }>>;
                optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: BitFlag;
                }>>;
            }>, void, any>;
            /**
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.7
             */
            readonly moveToSaturation: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                saturation: import("../tlv/TlvObject.js").FieldType<number>;
                transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
                optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: BitFlag;
                }>>;
                optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: BitFlag;
                }>>;
            }>, void, any>;
            /**
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.8
             */
            readonly moveSaturation: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * The MoveMode field shall be one of the non-reserved values in Values of the MoveMode Field. If the MoveMode
                 * field is equal to 0 (Stop), the Rate field shall be ignored.
                 *
                 * ### Table 22. Values of the MoveMode Field
                 *
                 * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.8.1
                 */
                moveMode: import("../tlv/TlvObject.js").FieldType<MoveMode>;
                /**
                 * The Rate field specifies the rate of movement in steps per second. A step is a change in the device’s
                 * saturation of one unit. If the MoveMode field is set to 1 (up) or 3 (down) and the Rate field has a value of
                 * zero, the command has no effect and a response command shall be sent in response, with the status code set
                 * to INVALID_COMMAND. If the MoveMode field is set to 0 (stop) the Rate field shall be ignored.
                 *
                 * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.8.2
                 */
                rate: import("../tlv/TlvObject.js").FieldType<number>;
                optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: BitFlag;
                }>>;
                optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: BitFlag;
                }>>;
            }>, void, any>;
            /**
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.9
             */
            readonly stepSaturation: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * The StepMode field shall be one of the non-reserved values in Values of the StepMode Field.
                 *
                 * ### Table 24. Values of the StepMode Field
                 *
                 * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.9.1
                 */
                stepMode: import("../tlv/TlvObject.js").FieldType<StepMode>;
                /**
                 * The change to be added to (or subtracted from) the current value of the device’s saturation.
                 *
                 * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.9.2
                 */
                stepSize: import("../tlv/TlvObject.js").FieldType<number>;
                /**
                 * The TransitionTime field specifies, in 1/10ths of a second, the time that shall be taken to perform the
                 * step. A step is a change in the device’s saturation of ‘Step size’ units.
                 *
                 * NOTE
                 *
                 * Here the TransitionTime data field is of data type uint8, where uint16 is more common for TransitionTime
                 * data fields in other clusters / commands.
                 *
                 * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.9.3
                 */
                transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
                optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: BitFlag;
                }>>;
                optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: BitFlag;
                }>>;
            }>, void, any>;
            /**
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.10
             */
            readonly moveToHueAndSaturation: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                hue: import("../tlv/TlvObject.js").FieldType<number>;
                saturation: import("../tlv/TlvObject.js").FieldType<number>;
                transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
                optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: BitFlag;
                }>>;
                optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: BitFlag;
                }>>;
            }>, void, any>;
        };
    };
    /**
     * A ColorControlCluster supports these elements if it supports feature Xy.
     */
    const XyComponent: {
        readonly attributes: {
            /**
             * The CurrentX attribute contains the current value of the normalized chromaticity value x, as defined in
             * the CIE xyY Color Space. It is updated as fast as practical during commands that change the color.
             *
             * The value of x shall be related to the CurrentX attribute by the relationship x = CurrentX / 65536
             * (CurrentX in the range 0 to 65279 inclusive)
             *
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.7.5
             */
            readonly currentX: Attribute<number, any>;
            /**
             * The CurrentY attribute contains the current value of the normalized chromaticity value y, as defined in
             * the CIE xyY Color Space. It is updated as fast as practical during commands that change the color.
             *
             * The value of y shall be related to the CurrentY attribute by the relationship y = CurrentY / 65536
             * (CurrentY in the range 0 to 65279 inclusive)
             *
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.7.6
             */
            readonly currentY: Attribute<number, any>;
        };
        readonly commands: {
            /**
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.11
             */
            readonly moveToColor: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                colorX: import("../tlv/TlvObject.js").FieldType<number>;
                colorY: import("../tlv/TlvObject.js").FieldType<number>;
                transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
                optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: BitFlag;
                }>>;
                optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: BitFlag;
                }>>;
            }>, void, any>;
            /**
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.12
             */
            readonly moveColor: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * The RateX field specifies the rate of movement in steps per second. A step is a change in the device’s
                 * CurrentX attribute of one unit.
                 *
                 * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.12.1
                 */
                rateX: import("../tlv/TlvObject.js").FieldType<number>;
                /**
                 * The RateY field specifies the rate of movement in steps per second. A step is a change in the device’s
                 * CurrentY attribute of one unit.
                 *
                 * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.12.2
                 */
                rateY: import("../tlv/TlvObject.js").FieldType<number>;
                optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: BitFlag;
                }>>;
                optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: BitFlag;
                }>>;
            }>, void, any>;
            /**
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.13
             */
            readonly stepColor: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                stepX: import("../tlv/TlvObject.js").FieldType<number>;
                stepY: import("../tlv/TlvObject.js").FieldType<number>;
                /**
                 * The TransitionTime field specifies, in 1/10ths of a second, the time that shall be taken to perform the
                 * color change.
                 *
                 * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.13.2
                 */
                transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
                optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: BitFlag;
                }>>;
                optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: BitFlag;
                }>>;
            }>, void, any>;
        };
    };
    /**
     * A ColorControlCluster supports these elements if it supports feature ColorTemperature.
     */
    const ColorTemperatureComponent: {
        readonly attributes: {
            /**
             * The ColorTemperatureMireds attribute contains a scaled inverse of the current value of the color
             * temperature. The unit of ColorTemperatureMireds is the mired (micro reciprocal degree), a.k.a. mirek
             * (micro reciprocal kelvin). It is updated as fast as practical during commands that change the color.
             *
             * The color temperature value in kelvins shall be related to the ColorTemperatureMireds attribute in
             * mireds by the relationship
             *
             * Color temperature in kelvins = 1,000,000 / ColorTemperatureMireds, where ColorTemperatureMireds is in
             * the range 1 to 65279 mireds inclusive, giving a color temperature range from 1,000,000 kelvins to 15.32
             * kelvins.
             *
             * If this attribute is implemented then the ColorMode attribute shall also be implemented.
             *
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.7.9
             */
            readonly colorTemperatureMireds: Attribute<number, any>;
            /**
             * The ColorTempPhysicalMinMireds attribute indicates the minimum mired value supported by the hardware.
             * ColorTempPhysicalMinMireds corresponds to the maximum color temperature in kelvins supported by the
             * hardware. ColorTempPhysicalMinMireds <= ColorTemperatureMireds.
             *
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.7.20
             */
            readonly colorTempPhysicalMinMireds: Attribute<number, any>;
            /**
             * The ColorTempPhysicalMaxMireds attribute indicates the maximum mired value supported by the hardware.
             * ColorTempPhysicalMaxMireds corresponds to the minimum color temperature in kelvins supported by the
             * hardware. ColorTemperatureMireds <= ColorTempPhysicalMaxMireds.
             *
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.7.21
             */
            readonly colorTempPhysicalMaxMireds: Attribute<number, any>;
            /**
             * The CoupleColorTempToLevelMinMireds attribute specifies a lower bound on the value of the
             * ColorTemperatureMireds attribute for the purposes of coupling the ColorTemperatureMireds attribute to
             * the CurrentLevel attribute when the CoupleColorTempToLevel bit of the Options attribute of the Level
             * Control cluster is equal to 1. When coupling the ColorTemperatureMireds attribute to the CurrentLevel
             * attribute, this value shall correspond to a CurrentLevel value of 0xFE (100%).
             *
             * This attribute shall be set such that the following relationship exists: ColorTempPhysicalMinMireds ≤
             * CoupleColorTempToLevelMinMireds ≤ ColorTemperatureMireds
             *
             * Note that since this attribute is stored as a micro reciprocal degree (mired) value (i.e. color
             * temperature in kelvins = 1,000,000 / CoupleColorTempToLevelMinMireds), the
             * CoupleColorTempToLevelMinMireds attribute corresponds to an upper bound on the value of the color
             * temperature in kelvins supported by the device.
             *
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.7.22
             */
            readonly coupleColorTempToLevelMinMireds: OptionalAttribute<number, any>;
            /**
             * The StartUpColorTemperatureMireds attribute shall define the desired startup color temperature value a
             * lamp shall use when it is supplied with power and this value shall be reflected in the
             * ColorTemperatureMireds attribute. In addition, the ColorMode and EnhancedColorMode attributes shall be
             * set to 0x02 (color temperature). The values of the StartUpColorTemperatureMireds attribute are listed in
             * the table below,
             *
             * Table 12. Values of the StartUpColorTemperatureMireds attribute
             *
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.7.23
             */
            readonly startUpColorTemperatureMireds: OptionalWritableAttribute<number | null, any>;
        };
        readonly commands: {
            /**
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.14
             */
            readonly moveToColorTemperature: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                colorTemperatureMireds: import("../tlv/TlvObject.js").FieldType<number>;
                transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
                optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: BitFlag;
                }>>;
                optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: BitFlag;
                }>>;
            }>, void, any>;
            /**
             * The MoveColorTemperature command allows the color temperature of a lamp to be moved at a specified rate.
             *
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.21
             */
            readonly moveColorTemperature: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field is identical to the MoveMode field of the MoveHue command of the Color Control cluster (see
                 * sub-clause MoveHue Command). If the MoveMode field is equal to 0 (Stop), the Rate field shall be ignored.
                 *
                 * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.21.1
                 */
                moveMode: import("../tlv/TlvObject.js").FieldType<MoveMode>;
                /**
                 * The Rate field specifies the rate of movement in steps per second. A step is a change in the color
                 * temperature of a device by one unit. If the MoveMode field is set to 1 (up) or 3 (down) and the Rate field
                 * has a value of zero, the command has no effect and a response command shall be sent in response, with the
                 * status code set to INVALID_COMMAND. If the MoveMode field is set to 0 (stop) the Rate field shall be ignored.
                 *
                 * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.21.2
                 */
                rate: import("../tlv/TlvObject.js").FieldType<number>;
                /**
                 * The ColorTemperatureMinimumMireds field specifies a lower bound on the ColorTemperatureMireds attribute (≡
                 * an upper bound on the color temperature in kelvins) for the current move operation
                 *
                 * ColorTempPhysicalMinMireds <= ColorTemperatureMinimumMireds field <= ColorTemperatureMireds
                 *
                 * As such if the move operation takes the ColorTemperatureMireds attribute towards the value of the
                 * ColorTemperatureMinimumMireds field it shall be clipped so that the above invariant is satisfied. If the
                 * ColorTemperatureMinimumMireds field is set to 0, ColorTempPhysicalMinMireds shall be used as the lower bound
                 * for the ColorTemperatureMireds attribute.
                 *
                 * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.21.3
                 */
                colorTemperatureMinimumMireds: import("../tlv/TlvObject.js").FieldType<number>;
                /**
                 * The ColorTemperatureMaximumMireds field specifies an upper bound on the ColorTemperatureMireds attribute (≡
                 * a lower bound on the color temperature in kelvins) for the current move operation
                 *
                 * ColorTemperatureMireds <= ColorTemperatureMaximumMireds field <= ColorTempPhysicalMaxMireds
                 *
                 * As such if the move operation takes the ColorTemperatureMireds attribute towards the value of the
                 * ColorTemperatureMaximumMireds field it shall be clipped so that the above invariant is satisfied. If the
                 * ColorTemperatureMaximumMireds field is set to 0, ColorTempPhysicalMaxMireds shall be used as the upper bound
                 * for the ColorTemperatureMireds attribute.
                 *
                 * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.21.4
                 */
                colorTemperatureMaximumMireds: import("../tlv/TlvObject.js").FieldType<number>;
                optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: BitFlag;
                }>>;
                optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: BitFlag;
                }>>;
            }>, void, any>;
            /**
             * The StepColorTemperature command allows the color temperature of a lamp to be stepped with a specified
             * step size.
             *
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.22
             */
            readonly stepColorTemperature: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field is identical to the StepMode field of the StepHue command of the Color Control cluster (see
                 * sub-clause StepHue Command).
                 *
                 * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.22.1
                 */
                stepMode: import("../tlv/TlvObject.js").FieldType<StepMode>;
                /**
                 * The StepSize field specifies the change to be added to (or subtracted from) the current value of the
                 * device’s color temperature.
                 *
                 * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.22.2
                 */
                stepSize: import("../tlv/TlvObject.js").FieldType<number>;
                /**
                 * The TransitionTime field specifies, in units of 1/10ths of a second, the time that shall be taken to perform
                 * the step. A step is a change to the device’s color temperature of a magnitude corresponding to the StepSize
                 * field.
                 *
                 * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.22.3
                 */
                transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
                /**
                 * The ColorTemperatureMinimumMireds field specifies a lower bound on the ColorTemperatureMireds attribute (≡
                 * an upper bound on the color temperature in kelvins) for the current step operation
                 *
                 * ColorTempPhysicalMinMireds <= ColorTemperatureMinimumMireds field <= ColorTemperatureMireds
                 *
                 * As such if the step operation takes the ColorTemperatureMireds attribute towards the value of the Color
                 * Temperature Minimum Mireds field it shall be clipped so that the above invariant is satisfied. If the
                 * ColorTemperatureMinimumMireds field is set to 0, ColorTempPhysicalMinMireds shall be used as the lower bound
                 * for the ColorTemperatureMireds attribute.
                 *
                 * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.22.4
                 */
                colorTemperatureMinimumMireds: import("../tlv/TlvObject.js").FieldType<number>;
                /**
                 * The ColorTemperatureMaximumMireds field specifies an upper bound on the ColorTemperatureMireds attribute (≡
                 * a lower bound on the color temperature in kelvins) for the current step operation
                 *
                 * ColorTemperatureMireds ≤ ColorTemperatureMaximumMireds field ≤ ColorTempPhysicalMaxMireds
                 *
                 * As such if the step operation takes the ColorTemperatureMireds attribute towards the value of the
                 * ColorTemperatureMaximumMireds field it shall be clipped so that the above invariant is satisfied. If the
                 * ColorTemperatureMaximum Mireds field is set to 0, ColorTempPhysicalMaxMireds shall be used as the upper
                 * bound for the ColorTemperatureMireds attribute.
                 *
                 * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.22.5
                 */
                colorTemperatureMaximumMireds: import("../tlv/TlvObject.js").FieldType<number>;
                optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: BitFlag;
                }>>;
                optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: BitFlag;
                }>>;
            }>, void, any>;
        };
    };
    /**
     * A ColorControlCluster supports these elements if it supports feature EnhancedHue.
     */
    const EnhancedHueComponent: {
        readonly attributes: {
            /**
             * The EnhancedCurrentHue attribute represents non-equidistant steps along the CIE 1931 color triangle, and
             * it provides 16-bits precision.
             *
             * The upper 8 bits of this attribute shall be used as an index in the implementation specific XY lookup
             * table to provide the non-equidistance steps. The lower 8 bits shall be used to interpolate between these
             * steps in a linear way in order to provide color zoom for the user.
             *
             * To provide compatibility with standard ZCL, the CurrentHue attribute shall contain a hue value in the
             * range 0 to 254, calculated from the EnhancedCurrentHue attribute.
             *
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.7.12
             */
            readonly enhancedCurrentHue: Attribute<number, any>;
        };
        readonly commands: {
            /**
             * The EnhancedMoveToHue command allows lamps to be moved in a smooth continuous transition from their
             * current hue to a target hue.
             *
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.15
             */
            readonly enhancedMoveToHue: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * The EnhancedHue field specifies the target extended hue for the lamp.
                 *
                 * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.15.1
                 */
                enhancedHue: import("../tlv/TlvObject.js").FieldType<number>;
                /**
                 * This field is identical to the Direction field of the MoveToHue command of the Color Control cluster (see
                 * sub-clause Use of the OptionsMask and OptionsOverride fields).
                 *
                 * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.15.2
                 */
                direction: import("../tlv/TlvObject.js").FieldType<Direction>;
                /**
                 * This field is identical to the TransitionTime field of the MoveToHue command of the Color Control cluster
                 * (see sub-clause Use of the OptionsMask and OptionsOverride fields).
                 *
                 * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.15.3
                 */
                transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
                optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: BitFlag;
                }>>;
                optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: BitFlag;
                }>>;
            }>, void, any>;
            /**
             * The EnhancedMoveHue command allows lamps to be moved in a continuous stepped transition from their
             * current hue to a target hue.
             *
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.16
             */
            readonly enhancedMoveHue: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field is identical to the MoveMode field of the MoveHue command of the Color Control cluster (see
                 * sub-clause MoveHue Command). If the MoveMode field is equal to 0 (Stop), the Rate field shall be ignored.
                 *
                 * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.16.1
                 */
                moveMode: import("../tlv/TlvObject.js").FieldType<MoveMode>;
                /**
                 * The Rate field specifies the rate of movement in steps per second. A step is a change in the extended hue of
                 * a device by one unit. If the MoveMode field is set to 1 (up) or 3 (down) and the Rate field has a value of
                 * zero, the command has no effect and a response command shall be sent in response, with the status code set
                 * to INVALID_COMMAND. If the MoveMode field is set to 0 (stop) the Rate field shall be ignored.
                 *
                 * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.16.2
                 */
                rate: import("../tlv/TlvObject.js").FieldType<number>;
                optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: BitFlag;
                }>>;
                optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: BitFlag;
                }>>;
            }>, void, any>;
            /**
             * The EnhancedStepHue command allows lamps to be moved in a stepped transition from their current hue to a
             * target hue, resulting in a linear transition through XY space.
             *
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.17
             */
            readonly enhancedStepHue: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field is identical to the StepMode field of the StepHue command of the Color Control cluster (see
                 * sub-clause StepHue Command).
                 *
                 * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.17.1
                 */
                stepMode: import("../tlv/TlvObject.js").FieldType<StepMode>;
                /**
                 * The StepSize field specifies the change to be added to (or subtracted from) the current value of the
                 * device’s enhanced hue.
                 *
                 * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.17.2
                 */
                stepSize: import("../tlv/TlvObject.js").FieldType<number>;
                /**
                 * The TransitionTime field specifies, in units of 1/10ths of a second, the time that shall be taken to perform
                 * the step. A step is a change to the device’s enhanced hue of a magnitude corresponding to the StepSize field.
                 *
                 * NOTE
                 *
                 * Here TransitionTime data field is of data type uint16, while the TransitionTime data field of the StepHue
                 * command is of data type uint8.
                 *
                 * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.17.3
                 */
                transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
                optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: BitFlag;
                }>>;
                optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: BitFlag;
                }>>;
            }>, void, any>;
            /**
             * The EnhancedMoveToHueAndSaturation command allows lamps to be moved in a smooth continuous transition
             * from their current hue to a target hue and from their current saturation to a target saturation.
             *
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.18
             */
            readonly enhancedMoveToHueAndSaturation: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * The EnhancedHue field specifies the target extended hue for the lamp.
                 *
                 * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.18.1
                 */
                enhancedHue: import("../tlv/TlvObject.js").FieldType<number>;
                /**
                 * This field is identical to the Saturation field of the MoveToHueAndSaturation command of the Color Control
                 * cluster (see sub-clause MoveToHueAndSaturation Command).
                 *
                 * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.18.2
                 */
                saturation: import("../tlv/TlvObject.js").FieldType<number>;
                /**
                 * This field is identical to the TransitionTime field of the MoveToHue command of the Color Control cluster
                 * (see sub-clause MoveToHueAndSaturation Command).
                 *
                 * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.18.3
                 */
                transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
                optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: BitFlag;
                }>>;
                optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: BitFlag;
                }>>;
            }>, void, any>;
        };
    };
    /**
     * A ColorControlCluster supports these elements if it supports feature ColorLoop.
     */
    const ColorLoopComponent: {
        readonly attributes: {
            /**
             * The ColorLoopActive attribute specifies the current active status of the color loop. If this attribute
             * has the value 0, the color loop shall not be active. If this attribute has the value 1, the color loop
             * shall be active. All other values (2 to 254) are reserved.
             *
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.7.14
             */
            readonly colorLoopActive: Attribute<ColorLoopActive, any>;
            /**
             * The ColorLoopDirection attribute specifies the current direction of the color loop. If this attribute
             * has the value 0, the EnhancedCurrentHue attribute shall be decremented. If this attribute has the value
             * 1, the EnhancedCurrentHue attribute shall be incremented. All other values (2 to 254) are reserved.
             *
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.7.15
             */
            readonly colorLoopDirection: Attribute<ColorLoopDirection, any>;
            /**
             * The ColorLoopTime attribute specifies the number of seconds it shall take to perform a full color loop,
             * i.e., to cycle all values of the EnhancedCurrentHue attribute (between 0 and 0xFFFE).
             *
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.7.16
             */
            readonly colorLoopTime: Attribute<number, any>;
            /**
             * The ColorLoopStartEnhancedHue attribute specifies the value of the EnhancedCurrentHue attribute from
             * which the color loop shall be started.
             *
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.7.17
             */
            readonly colorLoopStartEnhancedHue: Attribute<number, any>;
            /**
             * The ColorLoopStoredEnhancedHue attribute specifies the value of the EnhancedCurrentHue attribute before
             * the color loop was started. Once the color loop is complete, the EnhancedCurrentHue attribute shall be
             * restored to this value.
             *
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.7.18
             */
            readonly colorLoopStoredEnhancedHue: Attribute<number, any>;
        };
        readonly commands: {
            /**
             * The Color Loop Set command allows a color loop to be activated such that the color lamp cycles through
             * its range of hues.
             *
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.19
             */
            readonly colorLoopSet: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * The UpdateFlags field specifies which color loop attributes to update before the color loop is started. This
                 * field shall be formatted as illustrated in Format of the UpdateFlags Field of the ColorLoopSet Command.
                 *
                 * ### Table 28. Format of the UpdateFlags Field of the ColorLoopSet Command
                 *
                 * The UpdateAction sub-field is 1 bit in length and specifies whether the device shall adhere to the action
                 * field in order to process the command. If this sub-field is set to 1, the device shall adhere to the action
                 * field. If this sub-field is set to 0, the device shall ignore the Action field.
                 *
                 * The UpdateDirection sub-field is 1 bit in length and specifies whether the device shall update the
                 * ColorLoopDirection attribute with the Direction field. If this sub-field is set to 1, the device shall
                 * update the value of the ColorLoopDirection attribute with the value of the Direction field. If this
                 * sub-field is set to 0, the device shall ignore the Direction field.
                 *
                 * The UpdateTime sub-field is 1 bit in length and specifies whether the device shall update the ColorLoopTime
                 * attribute with the Time field. If this sub-field is set to 1, the device shall update the value of the
                 * ColorLoopTime attribute with the value of the Time field. If this sub-field is set to 0, the device shall
                 * ignore the Time field.
                 *
                 * The UpdateStartHue sub-field is 1 bit in length and specifies whether the device shall update the
                 * ColorLoopStartEnhancedHue attribute with the StartHue field. If this sub-field is set to 1, the device shall
                 * update the value of the ColorLoopStartEnhancedHue attribute with the value of the StartHue field. If this
                 * sub-field is set to 0, the device shall ignore the StartHue field.
                 *
                 * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.19.1
                 */
                updateFlags: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    updateAction: BitFlag;
                    updateDirection: BitFlag;
                    updateTime: BitFlag;
                    updateStartHue: BitFlag;
                    reserved: BitField;
                }>>;
                /**
                 * The Action field specifies the action to take for the color loop if the UpdateAction sub-field of the
                 * UpdateFlags field is set to 1. This field shall be set to one of the non-reserved values listed in Values of
                 * the Action Field of the ColorLoopSet Command.
                 *
                 * ### Table 29. Values of the Action Field of the ColorLoopSet Command
                 *
                 * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.19.2
                 */
                action: import("../tlv/TlvObject.js").FieldType<Action>;
                /**
                 * The Direction field specifies the direction for the color loop if the Update Direction field of the
                 * UpdateFlags field is set to 1. This field shall be set to one of the non-reserved values listed in Values of
                 * the Direction Field of the ColorLoopSet Command.
                 *
                 * ### Table 30. Values of the Direction Field of the ColorLoopSet Command
                 *
                 * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.19.3
                 */
                direction: import("../tlv/TlvObject.js").FieldType<ColorLoopSetDirection>;
                /**
                 * The Time field specifies the number of seconds over which to perform a full color loop if the UpdateTime
                 * sub-field of the UpdateFlags field is set to 1.
                 *
                 * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.19.4
                 */
                time: import("../tlv/TlvObject.js").FieldType<number>;
                startHue: import("../tlv/TlvObject.js").FieldType<number>;
                optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: BitFlag;
                }>>;
                optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: BitFlag;
                }>>;
            }>, void, any>;
        };
    };
    /**
     * A ColorControlCluster supports these elements if it supports features HueSaturation, Xy or ColorTemperature.
     */
    const HueSaturationOrXyOrColorTemperatureComponent: {
        readonly commands: {
            /**
             * The StopMoveStep command is provided to allow MoveTo and Step commands to be stopped. (Note this
             * automatically provides symmetry to the Level Control cluster.)
             *
             * NOTE the StopMoveStep command has no effect on an active color loop.
             *
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.20
             */
            readonly stopMoveStep: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: BitFlag;
                }>>;
                optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: BitFlag;
                }>>;
            }>, void, any>;
        };
    };
    /**
     * These elements and properties are present in all ColorControl clusters.
     */
    const Base: {
        readonly id: 768;
        readonly name: "ColorControl";
        readonly revision: 6;
        readonly features: {
            /**
             * HueSaturation
             *
             * Supports color specification via hue/saturation.
             */
            readonly hueSaturation: BitFlag;
            /**
             * EnhancedHue
             *
             * Enhanced hue is supported.
             */
            readonly enhancedHue: BitFlag;
            /**
             * ColorLoop
             *
             * Color loop is supported.
             */
            readonly colorLoop: BitFlag;
            /**
             * Xy
             *
             * Supports color specification via XY.
             */
            readonly xy: BitFlag;
            /**
             * ColorTemperature
             *
             * Supports specification of color temperature.
             */
            readonly colorTemperature: BitFlag;
        };
        readonly attributes: {
            /**
             * The RemainingTime attribute holds the time remaining, in 1/10ths of a second, until the currently active
             * command will be complete.
             *
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.7.4
             */
            readonly remainingTime: OptionalAttribute<number, any>;
            /**
             * The DriftCompensation attribute indicates what mechanism, if any, is in use for compensation for
             * color/intensity drift over time. It shall be one of the non-reserved values in Values of the
             * DriftCompensation Attribute.
             *
             * ### Table 8. Values of the DriftCompensation Attribute
             *
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.7.7
             */
            readonly driftCompensation: OptionalAttribute<DriftCompensation, any>;
            /**
             * The CompensationText attribute holds a textual indication of what mechanism, if any, is in use to
             * compensate for color/intensity drift over time.
             *
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.7.8
             */
            readonly compensationText: OptionalAttribute<string, any>;
            /**
             * The ColorMode attribute indicates which attributes are currently determining the color of the device.
             *
             * The value of the ColorMode attribute cannot be written directly - it is set upon reception of any
             * command in section Commands to the appropriate mode for that command.
             *
             * Table 9. Values of the ColorMode Attribute
             *
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.7.10
             */
            readonly colorMode: Attribute<ColorMode, any>;
            /**
             * The Options attribute is meant to be changed only during commissioning. The Options attribute is a
             * bitmap that determines the default behavior of some cluster commands. Each command that is dependent on
             * the Options attribute shall first construct a temporary Options bitmap that is in effect during the
             * command processing. The temporary Options bitmap has the same format and meaning as the Options
             * attribute, but includes any bits that may be overridden by command fields.
             *
             * Below is the format and description of the Options attribute and temporary Options bitmap and the effect
             * on dependent commands.
             *
             * Table 10. Options Attribute
             *
             * ExecuteIfOff Options bit: Command execution shall NOT continue beyond the Options processing if all of
             * these criteria are true:
             *
             *   • The On/Off cluster exists on the same endpoint as this cluster.
             *
             *   • The OnOff attribute of the On/Off cluster, on this endpoint, is FALSE.
             *
             *   • The value of the ExecuteIfOff bit is 0.
             *
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.7.11
             */
            readonly options: WritableAttribute<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                executeIfOff: BitFlag;
            }>, any>;
            /**
             * The NumberOfPrimaries attribute contains the number of color primaries implemented on this device. A
             * value of null shall indicate that the number of primaries is unknown.
             *
             * Where this attribute is implemented, the attributes below for indicating the “x” and “y” color values of
             * the primaries shall also be implemented for each of the primaries from 1 to NumberOfPrimaries, without
             * leaving gaps. Implementation of the Primary1Intensity attribute and subsequent intensity attributes is
             * optional.
             *
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.8.1
             */
            readonly numberOfPrimaries: FixedAttribute<number | null, any>;
            /**
             * The Primary1X attribute contains the normalized chromaticity value x for this primary, as defined in the
             * CIE xyY Color Space.
             *
             * The value of x shall be related to the Primary1X attribute by the relationship x = Primary1X / 65536
             * (Primary1X in the range 0 to 65279 inclusive)
             *
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.8.2
             */
            readonly primary1X: OptionalFixedAttribute<number, any>;
            /**
             * The Primary1Y attribute contains the normalized chromaticity value y for this primary, as defined in the
             * CIE xyY Color Space.
             *
             * The value of y shall be related to the Primary1Y attribute by the relationship y = Primary1Y / 65536
             * (Primary1Y in the range 0 to 65279 inclusive)
             *
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.8.3
             */
            readonly primary1Y: OptionalFixedAttribute<number, any>;
            /**
             * The Primary1intensity attribute contains a representation of the maximum intensity of this primary as
             * defined in the Dimming Light Curve in the Ballast Configuration cluster (see Ballast Configuration
             * Cluster), normalized such that the primary with the highest maximum intensity contains the value 0xFE.
             *
             * A value of null shall indicate that this primary is not available.
             *
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.8.4
             */
            readonly primary1Intensity: OptionalFixedAttribute<number | null, any>;
            /**
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.8
             */
            readonly primary2X: OptionalFixedAttribute<number, any>;
            /**
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.8
             */
            readonly primary2Y: OptionalFixedAttribute<number, any>;
            /**
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.8
             */
            readonly primary2Intensity: OptionalFixedAttribute<number | null, any>;
            /**
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.8
             */
            readonly primary3X: OptionalFixedAttribute<number, any>;
            /**
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.8
             */
            readonly primary3Y: OptionalFixedAttribute<number, any>;
            /**
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.8
             */
            readonly primary3Intensity: OptionalFixedAttribute<number | null, any>;
            /**
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.9
             */
            readonly primary4X: OptionalFixedAttribute<number, any>;
            /**
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.9
             */
            readonly primary4Y: OptionalFixedAttribute<number, any>;
            /**
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.9
             */
            readonly primary4Intensity: OptionalFixedAttribute<number | null, any>;
            /**
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.9
             */
            readonly primary5X: OptionalFixedAttribute<number, any>;
            /**
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.9
             */
            readonly primary5Y: OptionalFixedAttribute<number, any>;
            /**
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.9
             */
            readonly primary5Intensity: OptionalFixedAttribute<number | null, any>;
            /**
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.9
             */
            readonly primary6X: OptionalFixedAttribute<number, any>;
            /**
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.9
             */
            readonly primary6Y: OptionalFixedAttribute<number, any>;
            /**
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.9
             */
            readonly primary6Intensity: OptionalFixedAttribute<number | null, any>;
            /**
             * The WhitePointX attribute contains the normalized chromaticity value x, as defined in the CIE xyY Color
             * Space, of the current white point of the device.
             *
             * The value of x shall be related to the WhitePointX attribute by the relationship x = WhitePointX / 65536
             * (WhitePointX in the range 0 to 65279 inclusive)
             *
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.10.1
             */
            readonly whitePointX: OptionalWritableAttribute<number, any>;
            /**
             * The WhitePointY attribute contains the normalized chromaticity value y, as defined in the CIE xyY
             *
             * Color Space, of the current white point of the device.
             *
             * The value of y shall be related to the WhitePointY attribute by the relationship y = WhitePointY / 65536
             * (WhitePointY in the range 0 to 65279 inclusive)
             *
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.10.2
             */
            readonly whitePointY: OptionalWritableAttribute<number, any>;
            /**
             * The ColorPointRX attribute contains the normalized chromaticity value x, as defined in the CIE xyY Color
             * Space, of the red color point of the device.
             *
             * The value of x shall be related to the ColorPointRX attribute by the relationship x = ColorPointRX /
             * 65536 (ColorPointRX in the range 0 to 65279 inclusive)
             *
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.10.3
             */
            readonly colorPointRx: OptionalWritableAttribute<number, any>;
            /**
             * The ColorPointRY attribute contains the normalized chromaticity value y, as defined in the CIE xyY Color
             * Space, of the red color point of the device.
             *
             * The value of y shall be related to the ColorPointRY attribute by the relationship y = ColorPointRY /
             * 65536 (ColorPointRY in the range 0 to 65279 inclusive)
             *
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.10.4
             */
            readonly colorPointRy: OptionalWritableAttribute<number, any>;
            /**
             * The ColorPointRIntensity attribute contains a representation of the relative intensity of the red color
             * point as defined in the Dimming Light Curve in the Ballast Configuration cluster (see Ballast
             * Configuration Cluster), normalized such that the color point with the highest relative intensity
             * contains the value 0xFE.
             *
             * A value of null shall indicate an invalid value.
             *
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.10.5
             */
            readonly colorPointRIntensity: OptionalWritableAttribute<number | null, any>;
            /**
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.10
             */
            readonly colorPointGx: OptionalWritableAttribute<number, any>;
            /**
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.10
             */
            readonly colorPointGy: OptionalWritableAttribute<number, any>;
            /**
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.10
             */
            readonly colorPointGIntensity: OptionalWritableAttribute<number | null, any>;
            /**
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.10
             */
            readonly colorPointBx: OptionalWritableAttribute<number, any>;
            /**
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.10
             */
            readonly colorPointBy: OptionalWritableAttribute<number, any>;
            /**
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.10
             */
            readonly colorPointBIntensity: OptionalWritableAttribute<number | null, any>;
            /**
             * The EnhancedColorMode attribute specifies which attributes are currently determining the color of the
             * device, as detailed in Values of the EnhancedColorMode Attribute.
             *
             * ### Table 11. Values of the EnhancedColorMode Attribute
             *
             * To provide compatibility with standard ZCL, the original ColorMode attribute shall indicate ‘CurrentHue
             * and CurrentSaturation’ when the light uses the EnhancedCurrentHue attribute. If the ColorMode attribute
             * is changed, e.g., due to one of the standard Color Control cluster commands defined in the ZCL, its new
             * value shall be copied to the EnhancedColorMode attribute.
             *
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.7.13
             */
            readonly enhancedColorMode: Attribute<EnhancedColorMode, any>;
            /**
             * Bits 0-4 of the ColorCapabilities attribute shall have the same values as the corresponding bits of the
             * FeatureMap attribute. All other bits in ColorCapabilities shall be 0.
             *
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.7.19
             */
            readonly colorCapabilities: Attribute<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                hueSaturation: BitFlag;
                enhancedHue: BitFlag;
                colorLoop: BitFlag;
                xy: BitFlag;
                colorTemperature: BitFlag;
            }>, any>;
        };
        /**
         * This metadata controls which ColorControlCluster elements matter.js activates for specific feature
         * combinations.
         */
        readonly extensions: readonly [{
            readonly flags: {
                readonly hueSaturation: true;
            };
            readonly component: {
                readonly attributes: {
                    /**
                     * The CurrentHue attribute contains the current hue value of the light. It is updated as fast as practical
                     * during commands that change the hue.
                     *
                     * The hue in degrees shall be related to the CurrentHue attribute by the relationship: Hue = CurrentHue x
                     * 360 / 254 (CurrentHue in the range 0 to 254 inclusive)
                     *
                     * If this attribute is implemented then the CurrentSaturation and ColorMode attributes shall also be
                     * implemented.
                     *
                     * @see {@link MatterSpecification.v13.Cluster} § 3.2.7.2
                     */
                    readonly currentHue: Attribute<number, any>;
                    /**
                     * The CurrentSaturation attribute holds the current saturation value of the light. It is updated as fast
                     * as practical during commands that change the saturation.
                     *
                     * The saturation shall be related to the CurrentSaturation attribute by the relationship: Saturation =
                     * CurrentSaturation/254 (CurrentSaturation in the range 0 to 254 inclusive)
                     *
                     * If this attribute is implemented then the CurrentHue and ColorMode attributes shall also be implemented.
                     *
                     * @see {@link MatterSpecification.v13.Cluster} § 3.2.7.3
                     */
                    readonly currentSaturation: Attribute<number, any>;
                };
                readonly commands: {
                    /**
                     * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.4
                     */
                    readonly moveToHue: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * The Hue field specifies the hue to be moved to.
                         *
                         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.4.1
                         */
                        hue: import("../tlv/TlvObject.js").FieldType<number>;
                        /**
                         * The Direction field shall be one of the non-reserved values in Values of the Direction Field.
                         *
                         * ### Table 17. Values of the Direction Field
                         *
                         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.4.2
                         */
                        direction: import("../tlv/TlvObject.js").FieldType<Direction>;
                        /**
                         * The TransitionTime field specifies, in 1/10ths of a second, the time that shall be taken to move to the new
                         * hue.
                         *
                         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.4.3
                         */
                        transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
                        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            executeIfOff: BitFlag;
                        }>>;
                        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            executeIfOff: BitFlag;
                        }>>;
                    }>, void, any>;
                    /**
                     * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.5
                     */
                    readonly moveHue: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * The MoveMode field shall be one of the non-reserved values in Values of the MoveMode Field. If the MoveMode
                         * field is equal to 0 (Stop), the Rate field shall be ignored.
                         *
                         * ### Table 18. Values of the MoveMode Field
                         *
                         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.5.1
                         */
                        moveMode: import("../tlv/TlvObject.js").FieldType<MoveMode>;
                        /**
                         * The Rate field specifies the rate of movement in steps per second. A step is a change in the device’s hue of
                         * one unit. If the MoveMode field is set to 1 (up) or 3 (down) and the Rate field has a value of zero, the
                         * command has no effect and a response command shall be sent in response, with the status code set to
                         * INVALID_COMMAND. If the MoveMode field is set to 0 (stop) the Rate field shall be ignored.
                         *
                         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.5.2
                         */
                        rate: import("../tlv/TlvObject.js").FieldType<number>;
                        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            executeIfOff: BitFlag;
                        }>>;
                        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            executeIfOff: BitFlag;
                        }>>;
                    }>, void, any>;
                    /**
                     * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.6
                     */
                    readonly stepHue: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * The StepMode field shall be one of the non-reserved values in Values of the StepMode Field.
                         *
                         * ### Table 20. Values of the StepMode Field
                         *
                         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.6.1
                         */
                        stepMode: import("../tlv/TlvObject.js").FieldType<StepMode>;
                        /**
                         * The change to be added to (or subtracted from) the current value of the device’s hue.
                         *
                         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.6.2
                         */
                        stepSize: import("../tlv/TlvObject.js").FieldType<number>;
                        /**
                         * The TransitionTime field specifies, in 1/10ths of a second, the time that shall be taken to perform the
                         * step. A step is a change in the device’s hue of ‘Step size’ units.
                         *
                         * NOTE
                         *
                         * Here the TransitionTime data field is of data type uint8, where uint16 is more common for TransitionTime
                         * data fields in other clusters / commands.
                         *
                         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.6.3
                         */
                        transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
                        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            executeIfOff: BitFlag;
                        }>>;
                        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            executeIfOff: BitFlag;
                        }>>;
                    }>, void, any>;
                    /**
                     * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.7
                     */
                    readonly moveToSaturation: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        saturation: import("../tlv/TlvObject.js").FieldType<number>;
                        transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
                        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            executeIfOff: BitFlag;
                        }>>;
                        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            executeIfOff: BitFlag;
                        }>>;
                    }>, void, any>;
                    /**
                     * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.8
                     */
                    readonly moveSaturation: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * The MoveMode field shall be one of the non-reserved values in Values of the MoveMode Field. If the MoveMode
                         * field is equal to 0 (Stop), the Rate field shall be ignored.
                         *
                         * ### Table 22. Values of the MoveMode Field
                         *
                         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.8.1
                         */
                        moveMode: import("../tlv/TlvObject.js").FieldType<MoveMode>;
                        /**
                         * The Rate field specifies the rate of movement in steps per second. A step is a change in the device’s
                         * saturation of one unit. If the MoveMode field is set to 1 (up) or 3 (down) and the Rate field has a value of
                         * zero, the command has no effect and a response command shall be sent in response, with the status code set
                         * to INVALID_COMMAND. If the MoveMode field is set to 0 (stop) the Rate field shall be ignored.
                         *
                         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.8.2
                         */
                        rate: import("../tlv/TlvObject.js").FieldType<number>;
                        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            executeIfOff: BitFlag;
                        }>>;
                        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            executeIfOff: BitFlag;
                        }>>;
                    }>, void, any>;
                    /**
                     * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.9
                     */
                    readonly stepSaturation: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * The StepMode field shall be one of the non-reserved values in Values of the StepMode Field.
                         *
                         * ### Table 24. Values of the StepMode Field
                         *
                         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.9.1
                         */
                        stepMode: import("../tlv/TlvObject.js").FieldType<StepMode>;
                        /**
                         * The change to be added to (or subtracted from) the current value of the device’s saturation.
                         *
                         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.9.2
                         */
                        stepSize: import("../tlv/TlvObject.js").FieldType<number>;
                        /**
                         * The TransitionTime field specifies, in 1/10ths of a second, the time that shall be taken to perform the
                         * step. A step is a change in the device’s saturation of ‘Step size’ units.
                         *
                         * NOTE
                         *
                         * Here the TransitionTime data field is of data type uint8, where uint16 is more common for TransitionTime
                         * data fields in other clusters / commands.
                         *
                         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.9.3
                         */
                        transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
                        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            executeIfOff: BitFlag;
                        }>>;
                        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            executeIfOff: BitFlag;
                        }>>;
                    }>, void, any>;
                    /**
                     * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.10
                     */
                    readonly moveToHueAndSaturation: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        hue: import("../tlv/TlvObject.js").FieldType<number>;
                        saturation: import("../tlv/TlvObject.js").FieldType<number>;
                        transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
                        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            executeIfOff: BitFlag;
                        }>>;
                        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            executeIfOff: BitFlag;
                        }>>;
                    }>, void, any>;
                };
            };
        }, {
            readonly flags: {
                readonly xy: true;
            };
            readonly component: {
                readonly attributes: {
                    /**
                     * The CurrentX attribute contains the current value of the normalized chromaticity value x, as defined in
                     * the CIE xyY Color Space. It is updated as fast as practical during commands that change the color.
                     *
                     * The value of x shall be related to the CurrentX attribute by the relationship x = CurrentX / 65536
                     * (CurrentX in the range 0 to 65279 inclusive)
                     *
                     * @see {@link MatterSpecification.v13.Cluster} § 3.2.7.5
                     */
                    readonly currentX: Attribute<number, any>;
                    /**
                     * The CurrentY attribute contains the current value of the normalized chromaticity value y, as defined in
                     * the CIE xyY Color Space. It is updated as fast as practical during commands that change the color.
                     *
                     * The value of y shall be related to the CurrentY attribute by the relationship y = CurrentY / 65536
                     * (CurrentY in the range 0 to 65279 inclusive)
                     *
                     * @see {@link MatterSpecification.v13.Cluster} § 3.2.7.6
                     */
                    readonly currentY: Attribute<number, any>;
                };
                readonly commands: {
                    /**
                     * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.11
                     */
                    readonly moveToColor: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        colorX: import("../tlv/TlvObject.js").FieldType<number>;
                        colorY: import("../tlv/TlvObject.js").FieldType<number>;
                        transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
                        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            executeIfOff: BitFlag;
                        }>>;
                        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            executeIfOff: BitFlag;
                        }>>;
                    }>, void, any>;
                    /**
                     * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.12
                     */
                    readonly moveColor: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * The RateX field specifies the rate of movement in steps per second. A step is a change in the device’s
                         * CurrentX attribute of one unit.
                         *
                         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.12.1
                         */
                        rateX: import("../tlv/TlvObject.js").FieldType<number>;
                        /**
                         * The RateY field specifies the rate of movement in steps per second. A step is a change in the device’s
                         * CurrentY attribute of one unit.
                         *
                         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.12.2
                         */
                        rateY: import("../tlv/TlvObject.js").FieldType<number>;
                        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            executeIfOff: BitFlag;
                        }>>;
                        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            executeIfOff: BitFlag;
                        }>>;
                    }>, void, any>;
                    /**
                     * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.13
                     */
                    readonly stepColor: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        stepX: import("../tlv/TlvObject.js").FieldType<number>;
                        stepY: import("../tlv/TlvObject.js").FieldType<number>;
                        /**
                         * The TransitionTime field specifies, in 1/10ths of a second, the time that shall be taken to perform the
                         * color change.
                         *
                         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.13.2
                         */
                        transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
                        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            executeIfOff: BitFlag;
                        }>>;
                        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            executeIfOff: BitFlag;
                        }>>;
                    }>, void, any>;
                };
            };
        }, {
            readonly flags: {
                readonly colorTemperature: true;
            };
            readonly component: {
                readonly attributes: {
                    /**
                     * The ColorTemperatureMireds attribute contains a scaled inverse of the current value of the color
                     * temperature. The unit of ColorTemperatureMireds is the mired (micro reciprocal degree), a.k.a. mirek
                     * (micro reciprocal kelvin). It is updated as fast as practical during commands that change the color.
                     *
                     * The color temperature value in kelvins shall be related to the ColorTemperatureMireds attribute in
                     * mireds by the relationship
                     *
                     * Color temperature in kelvins = 1,000,000 / ColorTemperatureMireds, where ColorTemperatureMireds is in
                     * the range 1 to 65279 mireds inclusive, giving a color temperature range from 1,000,000 kelvins to 15.32
                     * kelvins.
                     *
                     * If this attribute is implemented then the ColorMode attribute shall also be implemented.
                     *
                     * @see {@link MatterSpecification.v13.Cluster} § 3.2.7.9
                     */
                    readonly colorTemperatureMireds: Attribute<number, any>;
                    /**
                     * The ColorTempPhysicalMinMireds attribute indicates the minimum mired value supported by the hardware.
                     * ColorTempPhysicalMinMireds corresponds to the maximum color temperature in kelvins supported by the
                     * hardware. ColorTempPhysicalMinMireds <= ColorTemperatureMireds.
                     *
                     * @see {@link MatterSpecification.v13.Cluster} § 3.2.7.20
                     */
                    readonly colorTempPhysicalMinMireds: Attribute<number, any>;
                    /**
                     * The ColorTempPhysicalMaxMireds attribute indicates the maximum mired value supported by the hardware.
                     * ColorTempPhysicalMaxMireds corresponds to the minimum color temperature in kelvins supported by the
                     * hardware. ColorTemperatureMireds <= ColorTempPhysicalMaxMireds.
                     *
                     * @see {@link MatterSpecification.v13.Cluster} § 3.2.7.21
                     */
                    readonly colorTempPhysicalMaxMireds: Attribute<number, any>;
                    /**
                     * The CoupleColorTempToLevelMinMireds attribute specifies a lower bound on the value of the
                     * ColorTemperatureMireds attribute for the purposes of coupling the ColorTemperatureMireds attribute to
                     * the CurrentLevel attribute when the CoupleColorTempToLevel bit of the Options attribute of the Level
                     * Control cluster is equal to 1. When coupling the ColorTemperatureMireds attribute to the CurrentLevel
                     * attribute, this value shall correspond to a CurrentLevel value of 0xFE (100%).
                     *
                     * This attribute shall be set such that the following relationship exists: ColorTempPhysicalMinMireds ≤
                     * CoupleColorTempToLevelMinMireds ≤ ColorTemperatureMireds
                     *
                     * Note that since this attribute is stored as a micro reciprocal degree (mired) value (i.e. color
                     * temperature in kelvins = 1,000,000 / CoupleColorTempToLevelMinMireds), the
                     * CoupleColorTempToLevelMinMireds attribute corresponds to an upper bound on the value of the color
                     * temperature in kelvins supported by the device.
                     *
                     * @see {@link MatterSpecification.v13.Cluster} § 3.2.7.22
                     */
                    readonly coupleColorTempToLevelMinMireds: OptionalAttribute<number, any>;
                    /**
                     * The StartUpColorTemperatureMireds attribute shall define the desired startup color temperature value a
                     * lamp shall use when it is supplied with power and this value shall be reflected in the
                     * ColorTemperatureMireds attribute. In addition, the ColorMode and EnhancedColorMode attributes shall be
                     * set to 0x02 (color temperature). The values of the StartUpColorTemperatureMireds attribute are listed in
                     * the table below,
                     *
                     * Table 12. Values of the StartUpColorTemperatureMireds attribute
                     *
                     * @see {@link MatterSpecification.v13.Cluster} § 3.2.7.23
                     */
                    readonly startUpColorTemperatureMireds: OptionalWritableAttribute<number | null, any>;
                };
                readonly commands: {
                    /**
                     * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.14
                     */
                    readonly moveToColorTemperature: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        colorTemperatureMireds: import("../tlv/TlvObject.js").FieldType<number>;
                        transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
                        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            executeIfOff: BitFlag;
                        }>>;
                        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            executeIfOff: BitFlag;
                        }>>;
                    }>, void, any>;
                    /**
                     * The MoveColorTemperature command allows the color temperature of a lamp to be moved at a specified rate.
                     *
                     * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.21
                     */
                    readonly moveColorTemperature: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * This field is identical to the MoveMode field of the MoveHue command of the Color Control cluster (see
                         * sub-clause MoveHue Command). If the MoveMode field is equal to 0 (Stop), the Rate field shall be ignored.
                         *
                         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.21.1
                         */
                        moveMode: import("../tlv/TlvObject.js").FieldType<MoveMode>;
                        /**
                         * The Rate field specifies the rate of movement in steps per second. A step is a change in the color
                         * temperature of a device by one unit. If the MoveMode field is set to 1 (up) or 3 (down) and the Rate field
                         * has a value of zero, the command has no effect and a response command shall be sent in response, with the
                         * status code set to INVALID_COMMAND. If the MoveMode field is set to 0 (stop) the Rate field shall be ignored.
                         *
                         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.21.2
                         */
                        rate: import("../tlv/TlvObject.js").FieldType<number>;
                        /**
                         * The ColorTemperatureMinimumMireds field specifies a lower bound on the ColorTemperatureMireds attribute (≡
                         * an upper bound on the color temperature in kelvins) for the current move operation
                         *
                         * ColorTempPhysicalMinMireds <= ColorTemperatureMinimumMireds field <= ColorTemperatureMireds
                         *
                         * As such if the move operation takes the ColorTemperatureMireds attribute towards the value of the
                         * ColorTemperatureMinimumMireds field it shall be clipped so that the above invariant is satisfied. If the
                         * ColorTemperatureMinimumMireds field is set to 0, ColorTempPhysicalMinMireds shall be used as the lower bound
                         * for the ColorTemperatureMireds attribute.
                         *
                         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.21.3
                         */
                        colorTemperatureMinimumMireds: import("../tlv/TlvObject.js").FieldType<number>;
                        /**
                         * The ColorTemperatureMaximumMireds field specifies an upper bound on the ColorTemperatureMireds attribute (≡
                         * a lower bound on the color temperature in kelvins) for the current move operation
                         *
                         * ColorTemperatureMireds <= ColorTemperatureMaximumMireds field <= ColorTempPhysicalMaxMireds
                         *
                         * As such if the move operation takes the ColorTemperatureMireds attribute towards the value of the
                         * ColorTemperatureMaximumMireds field it shall be clipped so that the above invariant is satisfied. If the
                         * ColorTemperatureMaximumMireds field is set to 0, ColorTempPhysicalMaxMireds shall be used as the upper bound
                         * for the ColorTemperatureMireds attribute.
                         *
                         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.21.4
                         */
                        colorTemperatureMaximumMireds: import("../tlv/TlvObject.js").FieldType<number>;
                        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            executeIfOff: BitFlag;
                        }>>;
                        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            executeIfOff: BitFlag;
                        }>>;
                    }>, void, any>;
                    /**
                     * The StepColorTemperature command allows the color temperature of a lamp to be stepped with a specified
                     * step size.
                     *
                     * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.22
                     */
                    readonly stepColorTemperature: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * This field is identical to the StepMode field of the StepHue command of the Color Control cluster (see
                         * sub-clause StepHue Command).
                         *
                         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.22.1
                         */
                        stepMode: import("../tlv/TlvObject.js").FieldType<StepMode>;
                        /**
                         * The StepSize field specifies the change to be added to (or subtracted from) the current value of the
                         * device’s color temperature.
                         *
                         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.22.2
                         */
                        stepSize: import("../tlv/TlvObject.js").FieldType<number>;
                        /**
                         * The TransitionTime field specifies, in units of 1/10ths of a second, the time that shall be taken to perform
                         * the step. A step is a change to the device’s color temperature of a magnitude corresponding to the StepSize
                         * field.
                         *
                         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.22.3
                         */
                        transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
                        /**
                         * The ColorTemperatureMinimumMireds field specifies a lower bound on the ColorTemperatureMireds attribute (≡
                         * an upper bound on the color temperature in kelvins) for the current step operation
                         *
                         * ColorTempPhysicalMinMireds <= ColorTemperatureMinimumMireds field <= ColorTemperatureMireds
                         *
                         * As such if the step operation takes the ColorTemperatureMireds attribute towards the value of the Color
                         * Temperature Minimum Mireds field it shall be clipped so that the above invariant is satisfied. If the
                         * ColorTemperatureMinimumMireds field is set to 0, ColorTempPhysicalMinMireds shall be used as the lower bound
                         * for the ColorTemperatureMireds attribute.
                         *
                         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.22.4
                         */
                        colorTemperatureMinimumMireds: import("../tlv/TlvObject.js").FieldType<number>;
                        /**
                         * The ColorTemperatureMaximumMireds field specifies an upper bound on the ColorTemperatureMireds attribute (≡
                         * a lower bound on the color temperature in kelvins) for the current step operation
                         *
                         * ColorTemperatureMireds ≤ ColorTemperatureMaximumMireds field ≤ ColorTempPhysicalMaxMireds
                         *
                         * As such if the step operation takes the ColorTemperatureMireds attribute towards the value of the
                         * ColorTemperatureMaximumMireds field it shall be clipped so that the above invariant is satisfied. If the
                         * ColorTemperatureMaximum Mireds field is set to 0, ColorTempPhysicalMaxMireds shall be used as the upper
                         * bound for the ColorTemperatureMireds attribute.
                         *
                         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.22.5
                         */
                        colorTemperatureMaximumMireds: import("../tlv/TlvObject.js").FieldType<number>;
                        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            executeIfOff: BitFlag;
                        }>>;
                        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            executeIfOff: BitFlag;
                        }>>;
                    }>, void, any>;
                };
            };
        }, {
            readonly flags: {
                readonly enhancedHue: true;
            };
            readonly component: {
                readonly attributes: {
                    /**
                     * The EnhancedCurrentHue attribute represents non-equidistant steps along the CIE 1931 color triangle, and
                     * it provides 16-bits precision.
                     *
                     * The upper 8 bits of this attribute shall be used as an index in the implementation specific XY lookup
                     * table to provide the non-equidistance steps. The lower 8 bits shall be used to interpolate between these
                     * steps in a linear way in order to provide color zoom for the user.
                     *
                     * To provide compatibility with standard ZCL, the CurrentHue attribute shall contain a hue value in the
                     * range 0 to 254, calculated from the EnhancedCurrentHue attribute.
                     *
                     * @see {@link MatterSpecification.v13.Cluster} § 3.2.7.12
                     */
                    readonly enhancedCurrentHue: Attribute<number, any>;
                };
                readonly commands: {
                    /**
                     * The EnhancedMoveToHue command allows lamps to be moved in a smooth continuous transition from their
                     * current hue to a target hue.
                     *
                     * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.15
                     */
                    readonly enhancedMoveToHue: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * The EnhancedHue field specifies the target extended hue for the lamp.
                         *
                         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.15.1
                         */
                        enhancedHue: import("../tlv/TlvObject.js").FieldType<number>;
                        /**
                         * This field is identical to the Direction field of the MoveToHue command of the Color Control cluster (see
                         * sub-clause Use of the OptionsMask and OptionsOverride fields).
                         *
                         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.15.2
                         */
                        direction: import("../tlv/TlvObject.js").FieldType<Direction>;
                        /**
                         * This field is identical to the TransitionTime field of the MoveToHue command of the Color Control cluster
                         * (see sub-clause Use of the OptionsMask and OptionsOverride fields).
                         *
                         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.15.3
                         */
                        transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
                        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            executeIfOff: BitFlag;
                        }>>;
                        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            executeIfOff: BitFlag;
                        }>>;
                    }>, void, any>;
                    /**
                     * The EnhancedMoveHue command allows lamps to be moved in a continuous stepped transition from their
                     * current hue to a target hue.
                     *
                     * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.16
                     */
                    readonly enhancedMoveHue: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * This field is identical to the MoveMode field of the MoveHue command of the Color Control cluster (see
                         * sub-clause MoveHue Command). If the MoveMode field is equal to 0 (Stop), the Rate field shall be ignored.
                         *
                         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.16.1
                         */
                        moveMode: import("../tlv/TlvObject.js").FieldType<MoveMode>;
                        /**
                         * The Rate field specifies the rate of movement in steps per second. A step is a change in the extended hue of
                         * a device by one unit. If the MoveMode field is set to 1 (up) or 3 (down) and the Rate field has a value of
                         * zero, the command has no effect and a response command shall be sent in response, with the status code set
                         * to INVALID_COMMAND. If the MoveMode field is set to 0 (stop) the Rate field shall be ignored.
                         *
                         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.16.2
                         */
                        rate: import("../tlv/TlvObject.js").FieldType<number>;
                        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            executeIfOff: BitFlag;
                        }>>;
                        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            executeIfOff: BitFlag;
                        }>>;
                    }>, void, any>;
                    /**
                     * The EnhancedStepHue command allows lamps to be moved in a stepped transition from their current hue to a
                     * target hue, resulting in a linear transition through XY space.
                     *
                     * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.17
                     */
                    readonly enhancedStepHue: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * This field is identical to the StepMode field of the StepHue command of the Color Control cluster (see
                         * sub-clause StepHue Command).
                         *
                         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.17.1
                         */
                        stepMode: import("../tlv/TlvObject.js").FieldType<StepMode>;
                        /**
                         * The StepSize field specifies the change to be added to (or subtracted from) the current value of the
                         * device’s enhanced hue.
                         *
                         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.17.2
                         */
                        stepSize: import("../tlv/TlvObject.js").FieldType<number>;
                        /**
                         * The TransitionTime field specifies, in units of 1/10ths of a second, the time that shall be taken to perform
                         * the step. A step is a change to the device’s enhanced hue of a magnitude corresponding to the StepSize field.
                         *
                         * NOTE
                         *
                         * Here TransitionTime data field is of data type uint16, while the TransitionTime data field of the StepHue
                         * command is of data type uint8.
                         *
                         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.17.3
                         */
                        transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
                        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            executeIfOff: BitFlag;
                        }>>;
                        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            executeIfOff: BitFlag;
                        }>>;
                    }>, void, any>;
                    /**
                     * The EnhancedMoveToHueAndSaturation command allows lamps to be moved in a smooth continuous transition
                     * from their current hue to a target hue and from their current saturation to a target saturation.
                     *
                     * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.18
                     */
                    readonly enhancedMoveToHueAndSaturation: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * The EnhancedHue field specifies the target extended hue for the lamp.
                         *
                         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.18.1
                         */
                        enhancedHue: import("../tlv/TlvObject.js").FieldType<number>;
                        /**
                         * This field is identical to the Saturation field of the MoveToHueAndSaturation command of the Color Control
                         * cluster (see sub-clause MoveToHueAndSaturation Command).
                         *
                         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.18.2
                         */
                        saturation: import("../tlv/TlvObject.js").FieldType<number>;
                        /**
                         * This field is identical to the TransitionTime field of the MoveToHue command of the Color Control cluster
                         * (see sub-clause MoveToHueAndSaturation Command).
                         *
                         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.18.3
                         */
                        transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
                        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            executeIfOff: BitFlag;
                        }>>;
                        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            executeIfOff: BitFlag;
                        }>>;
                    }>, void, any>;
                };
            };
        }, {
            readonly flags: {
                readonly colorLoop: true;
            };
            readonly component: {
                readonly attributes: {
                    /**
                     * The ColorLoopActive attribute specifies the current active status of the color loop. If this attribute
                     * has the value 0, the color loop shall not be active. If this attribute has the value 1, the color loop
                     * shall be active. All other values (2 to 254) are reserved.
                     *
                     * @see {@link MatterSpecification.v13.Cluster} § 3.2.7.14
                     */
                    readonly colorLoopActive: Attribute<ColorLoopActive, any>;
                    /**
                     * The ColorLoopDirection attribute specifies the current direction of the color loop. If this attribute
                     * has the value 0, the EnhancedCurrentHue attribute shall be decremented. If this attribute has the value
                     * 1, the EnhancedCurrentHue attribute shall be incremented. All other values (2 to 254) are reserved.
                     *
                     * @see {@link MatterSpecification.v13.Cluster} § 3.2.7.15
                     */
                    readonly colorLoopDirection: Attribute<ColorLoopDirection, any>;
                    /**
                     * The ColorLoopTime attribute specifies the number of seconds it shall take to perform a full color loop,
                     * i.e., to cycle all values of the EnhancedCurrentHue attribute (between 0 and 0xFFFE).
                     *
                     * @see {@link MatterSpecification.v13.Cluster} § 3.2.7.16
                     */
                    readonly colorLoopTime: Attribute<number, any>;
                    /**
                     * The ColorLoopStartEnhancedHue attribute specifies the value of the EnhancedCurrentHue attribute from
                     * which the color loop shall be started.
                     *
                     * @see {@link MatterSpecification.v13.Cluster} § 3.2.7.17
                     */
                    readonly colorLoopStartEnhancedHue: Attribute<number, any>;
                    /**
                     * The ColorLoopStoredEnhancedHue attribute specifies the value of the EnhancedCurrentHue attribute before
                     * the color loop was started. Once the color loop is complete, the EnhancedCurrentHue attribute shall be
                     * restored to this value.
                     *
                     * @see {@link MatterSpecification.v13.Cluster} § 3.2.7.18
                     */
                    readonly colorLoopStoredEnhancedHue: Attribute<number, any>;
                };
                readonly commands: {
                    /**
                     * The Color Loop Set command allows a color loop to be activated such that the color lamp cycles through
                     * its range of hues.
                     *
                     * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.19
                     */
                    readonly colorLoopSet: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * The UpdateFlags field specifies which color loop attributes to update before the color loop is started. This
                         * field shall be formatted as illustrated in Format of the UpdateFlags Field of the ColorLoopSet Command.
                         *
                         * ### Table 28. Format of the UpdateFlags Field of the ColorLoopSet Command
                         *
                         * The UpdateAction sub-field is 1 bit in length and specifies whether the device shall adhere to the action
                         * field in order to process the command. If this sub-field is set to 1, the device shall adhere to the action
                         * field. If this sub-field is set to 0, the device shall ignore the Action field.
                         *
                         * The UpdateDirection sub-field is 1 bit in length and specifies whether the device shall update the
                         * ColorLoopDirection attribute with the Direction field. If this sub-field is set to 1, the device shall
                         * update the value of the ColorLoopDirection attribute with the value of the Direction field. If this
                         * sub-field is set to 0, the device shall ignore the Direction field.
                         *
                         * The UpdateTime sub-field is 1 bit in length and specifies whether the device shall update the ColorLoopTime
                         * attribute with the Time field. If this sub-field is set to 1, the device shall update the value of the
                         * ColorLoopTime attribute with the value of the Time field. If this sub-field is set to 0, the device shall
                         * ignore the Time field.
                         *
                         * The UpdateStartHue sub-field is 1 bit in length and specifies whether the device shall update the
                         * ColorLoopStartEnhancedHue attribute with the StartHue field. If this sub-field is set to 1, the device shall
                         * update the value of the ColorLoopStartEnhancedHue attribute with the value of the StartHue field. If this
                         * sub-field is set to 0, the device shall ignore the StartHue field.
                         *
                         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.19.1
                         */
                        updateFlags: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            updateAction: BitFlag;
                            updateDirection: BitFlag;
                            updateTime: BitFlag;
                            updateStartHue: BitFlag;
                            reserved: BitField;
                        }>>;
                        /**
                         * The Action field specifies the action to take for the color loop if the UpdateAction sub-field of the
                         * UpdateFlags field is set to 1. This field shall be set to one of the non-reserved values listed in Values of
                         * the Action Field of the ColorLoopSet Command.
                         *
                         * ### Table 29. Values of the Action Field of the ColorLoopSet Command
                         *
                         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.19.2
                         */
                        action: import("../tlv/TlvObject.js").FieldType<Action>;
                        /**
                         * The Direction field specifies the direction for the color loop if the Update Direction field of the
                         * UpdateFlags field is set to 1. This field shall be set to one of the non-reserved values listed in Values of
                         * the Direction Field of the ColorLoopSet Command.
                         *
                         * ### Table 30. Values of the Direction Field of the ColorLoopSet Command
                         *
                         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.19.3
                         */
                        direction: import("../tlv/TlvObject.js").FieldType<ColorLoopSetDirection>;
                        /**
                         * The Time field specifies the number of seconds over which to perform a full color loop if the UpdateTime
                         * sub-field of the UpdateFlags field is set to 1.
                         *
                         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.19.4
                         */
                        time: import("../tlv/TlvObject.js").FieldType<number>;
                        startHue: import("../tlv/TlvObject.js").FieldType<number>;
                        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            executeIfOff: BitFlag;
                        }>>;
                        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            executeIfOff: BitFlag;
                        }>>;
                    }>, void, any>;
                };
            };
        }, {
            readonly flags: {
                readonly hueSaturation: true;
            };
            readonly component: {
                readonly commands: {
                    /**
                     * The StopMoveStep command is provided to allow MoveTo and Step commands to be stopped. (Note this
                     * automatically provides symmetry to the Level Control cluster.)
                     *
                     * NOTE the StopMoveStep command has no effect on an active color loop.
                     *
                     * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.20
                     */
                    readonly stopMoveStep: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            executeIfOff: BitFlag;
                        }>>;
                        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            executeIfOff: BitFlag;
                        }>>;
                    }>, void, any>;
                };
            };
        }, {
            readonly flags: {
                readonly xy: true;
            };
            readonly component: {
                readonly commands: {
                    /**
                     * The StopMoveStep command is provided to allow MoveTo and Step commands to be stopped. (Note this
                     * automatically provides symmetry to the Level Control cluster.)
                     *
                     * NOTE the StopMoveStep command has no effect on an active color loop.
                     *
                     * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.20
                     */
                    readonly stopMoveStep: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            executeIfOff: BitFlag;
                        }>>;
                        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            executeIfOff: BitFlag;
                        }>>;
                    }>, void, any>;
                };
            };
        }, {
            readonly flags: {
                readonly colorTemperature: true;
            };
            readonly component: {
                readonly commands: {
                    /**
                     * The StopMoveStep command is provided to allow MoveTo and Step commands to be stopped. (Note this
                     * automatically provides symmetry to the Level Control cluster.)
                     *
                     * NOTE the StopMoveStep command has no effect on an active color loop.
                     *
                     * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.20
                     */
                    readonly stopMoveStep: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            executeIfOff: BitFlag;
                        }>>;
                        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            executeIfOff: BitFlag;
                        }>>;
                    }>, void, any>;
                };
            };
        }];
    };
    /**
     * @see {@link Cluster}
     */
    const ClusterInstance: MutableCluster<{
        readonly id: 768;
        readonly name: "ColorControl";
        readonly revision: 6;
        readonly features: {
            /**
             * HueSaturation
             *
             * Supports color specification via hue/saturation.
             */
            readonly hueSaturation: BitFlag;
            /**
             * EnhancedHue
             *
             * Enhanced hue is supported.
             */
            readonly enhancedHue: BitFlag;
            /**
             * ColorLoop
             *
             * Color loop is supported.
             */
            readonly colorLoop: BitFlag;
            /**
             * Xy
             *
             * Supports color specification via XY.
             */
            readonly xy: BitFlag;
            /**
             * ColorTemperature
             *
             * Supports specification of color temperature.
             */
            readonly colorTemperature: BitFlag;
        };
        readonly attributes: {
            /**
             * The RemainingTime attribute holds the time remaining, in 1/10ths of a second, until the currently active
             * command will be complete.
             *
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.7.4
             */
            readonly remainingTime: OptionalAttribute<number, any>;
            /**
             * The DriftCompensation attribute indicates what mechanism, if any, is in use for compensation for
             * color/intensity drift over time. It shall be one of the non-reserved values in Values of the
             * DriftCompensation Attribute.
             *
             * ### Table 8. Values of the DriftCompensation Attribute
             *
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.7.7
             */
            readonly driftCompensation: OptionalAttribute<DriftCompensation, any>;
            /**
             * The CompensationText attribute holds a textual indication of what mechanism, if any, is in use to
             * compensate for color/intensity drift over time.
             *
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.7.8
             */
            readonly compensationText: OptionalAttribute<string, any>;
            /**
             * The ColorMode attribute indicates which attributes are currently determining the color of the device.
             *
             * The value of the ColorMode attribute cannot be written directly - it is set upon reception of any
             * command in section Commands to the appropriate mode for that command.
             *
             * Table 9. Values of the ColorMode Attribute
             *
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.7.10
             */
            readonly colorMode: Attribute<ColorMode, any>;
            /**
             * The Options attribute is meant to be changed only during commissioning. The Options attribute is a
             * bitmap that determines the default behavior of some cluster commands. Each command that is dependent on
             * the Options attribute shall first construct a temporary Options bitmap that is in effect during the
             * command processing. The temporary Options bitmap has the same format and meaning as the Options
             * attribute, but includes any bits that may be overridden by command fields.
             *
             * Below is the format and description of the Options attribute and temporary Options bitmap and the effect
             * on dependent commands.
             *
             * Table 10. Options Attribute
             *
             * ExecuteIfOff Options bit: Command execution shall NOT continue beyond the Options processing if all of
             * these criteria are true:
             *
             *   • The On/Off cluster exists on the same endpoint as this cluster.
             *
             *   • The OnOff attribute of the On/Off cluster, on this endpoint, is FALSE.
             *
             *   • The value of the ExecuteIfOff bit is 0.
             *
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.7.11
             */
            readonly options: WritableAttribute<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                executeIfOff: BitFlag;
            }>, any>;
            /**
             * The NumberOfPrimaries attribute contains the number of color primaries implemented on this device. A
             * value of null shall indicate that the number of primaries is unknown.
             *
             * Where this attribute is implemented, the attributes below for indicating the “x” and “y” color values of
             * the primaries shall also be implemented for each of the primaries from 1 to NumberOfPrimaries, without
             * leaving gaps. Implementation of the Primary1Intensity attribute and subsequent intensity attributes is
             * optional.
             *
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.8.1
             */
            readonly numberOfPrimaries: FixedAttribute<number | null, any>;
            /**
             * The Primary1X attribute contains the normalized chromaticity value x for this primary, as defined in the
             * CIE xyY Color Space.
             *
             * The value of x shall be related to the Primary1X attribute by the relationship x = Primary1X / 65536
             * (Primary1X in the range 0 to 65279 inclusive)
             *
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.8.2
             */
            readonly primary1X: OptionalFixedAttribute<number, any>;
            /**
             * The Primary1Y attribute contains the normalized chromaticity value y for this primary, as defined in the
             * CIE xyY Color Space.
             *
             * The value of y shall be related to the Primary1Y attribute by the relationship y = Primary1Y / 65536
             * (Primary1Y in the range 0 to 65279 inclusive)
             *
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.8.3
             */
            readonly primary1Y: OptionalFixedAttribute<number, any>;
            /**
             * The Primary1intensity attribute contains a representation of the maximum intensity of this primary as
             * defined in the Dimming Light Curve in the Ballast Configuration cluster (see Ballast Configuration
             * Cluster), normalized such that the primary with the highest maximum intensity contains the value 0xFE.
             *
             * A value of null shall indicate that this primary is not available.
             *
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.8.4
             */
            readonly primary1Intensity: OptionalFixedAttribute<number | null, any>;
            /**
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.8
             */
            readonly primary2X: OptionalFixedAttribute<number, any>;
            /**
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.8
             */
            readonly primary2Y: OptionalFixedAttribute<number, any>;
            /**
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.8
             */
            readonly primary2Intensity: OptionalFixedAttribute<number | null, any>;
            /**
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.8
             */
            readonly primary3X: OptionalFixedAttribute<number, any>;
            /**
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.8
             */
            readonly primary3Y: OptionalFixedAttribute<number, any>;
            /**
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.8
             */
            readonly primary3Intensity: OptionalFixedAttribute<number | null, any>;
            /**
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.9
             */
            readonly primary4X: OptionalFixedAttribute<number, any>;
            /**
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.9
             */
            readonly primary4Y: OptionalFixedAttribute<number, any>;
            /**
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.9
             */
            readonly primary4Intensity: OptionalFixedAttribute<number | null, any>;
            /**
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.9
             */
            readonly primary5X: OptionalFixedAttribute<number, any>;
            /**
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.9
             */
            readonly primary5Y: OptionalFixedAttribute<number, any>;
            /**
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.9
             */
            readonly primary5Intensity: OptionalFixedAttribute<number | null, any>;
            /**
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.9
             */
            readonly primary6X: OptionalFixedAttribute<number, any>;
            /**
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.9
             */
            readonly primary6Y: OptionalFixedAttribute<number, any>;
            /**
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.9
             */
            readonly primary6Intensity: OptionalFixedAttribute<number | null, any>;
            /**
             * The WhitePointX attribute contains the normalized chromaticity value x, as defined in the CIE xyY Color
             * Space, of the current white point of the device.
             *
             * The value of x shall be related to the WhitePointX attribute by the relationship x = WhitePointX / 65536
             * (WhitePointX in the range 0 to 65279 inclusive)
             *
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.10.1
             */
            readonly whitePointX: OptionalWritableAttribute<number, any>;
            /**
             * The WhitePointY attribute contains the normalized chromaticity value y, as defined in the CIE xyY
             *
             * Color Space, of the current white point of the device.
             *
             * The value of y shall be related to the WhitePointY attribute by the relationship y = WhitePointY / 65536
             * (WhitePointY in the range 0 to 65279 inclusive)
             *
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.10.2
             */
            readonly whitePointY: OptionalWritableAttribute<number, any>;
            /**
             * The ColorPointRX attribute contains the normalized chromaticity value x, as defined in the CIE xyY Color
             * Space, of the red color point of the device.
             *
             * The value of x shall be related to the ColorPointRX attribute by the relationship x = ColorPointRX /
             * 65536 (ColorPointRX in the range 0 to 65279 inclusive)
             *
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.10.3
             */
            readonly colorPointRx: OptionalWritableAttribute<number, any>;
            /**
             * The ColorPointRY attribute contains the normalized chromaticity value y, as defined in the CIE xyY Color
             * Space, of the red color point of the device.
             *
             * The value of y shall be related to the ColorPointRY attribute by the relationship y = ColorPointRY /
             * 65536 (ColorPointRY in the range 0 to 65279 inclusive)
             *
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.10.4
             */
            readonly colorPointRy: OptionalWritableAttribute<number, any>;
            /**
             * The ColorPointRIntensity attribute contains a representation of the relative intensity of the red color
             * point as defined in the Dimming Light Curve in the Ballast Configuration cluster (see Ballast
             * Configuration Cluster), normalized such that the color point with the highest relative intensity
             * contains the value 0xFE.
             *
             * A value of null shall indicate an invalid value.
             *
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.10.5
             */
            readonly colorPointRIntensity: OptionalWritableAttribute<number | null, any>;
            /**
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.10
             */
            readonly colorPointGx: OptionalWritableAttribute<number, any>;
            /**
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.10
             */
            readonly colorPointGy: OptionalWritableAttribute<number, any>;
            /**
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.10
             */
            readonly colorPointGIntensity: OptionalWritableAttribute<number | null, any>;
            /**
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.10
             */
            readonly colorPointBx: OptionalWritableAttribute<number, any>;
            /**
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.10
             */
            readonly colorPointBy: OptionalWritableAttribute<number, any>;
            /**
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.10
             */
            readonly colorPointBIntensity: OptionalWritableAttribute<number | null, any>;
            /**
             * The EnhancedColorMode attribute specifies which attributes are currently determining the color of the
             * device, as detailed in Values of the EnhancedColorMode Attribute.
             *
             * ### Table 11. Values of the EnhancedColorMode Attribute
             *
             * To provide compatibility with standard ZCL, the original ColorMode attribute shall indicate ‘CurrentHue
             * and CurrentSaturation’ when the light uses the EnhancedCurrentHue attribute. If the ColorMode attribute
             * is changed, e.g., due to one of the standard Color Control cluster commands defined in the ZCL, its new
             * value shall be copied to the EnhancedColorMode attribute.
             *
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.7.13
             */
            readonly enhancedColorMode: Attribute<EnhancedColorMode, any>;
            /**
             * Bits 0-4 of the ColorCapabilities attribute shall have the same values as the corresponding bits of the
             * FeatureMap attribute. All other bits in ColorCapabilities shall be 0.
             *
             * @see {@link MatterSpecification.v13.Cluster} § 3.2.7.19
             */
            readonly colorCapabilities: Attribute<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                hueSaturation: BitFlag;
                enhancedHue: BitFlag;
                colorLoop: BitFlag;
                xy: BitFlag;
                colorTemperature: BitFlag;
            }>, any>;
        };
        /**
         * This metadata controls which ColorControlCluster elements matter.js activates for specific feature
         * combinations.
         */
        readonly extensions: readonly [{
            readonly flags: {
                readonly hueSaturation: true;
            };
            readonly component: {
                readonly attributes: {
                    /**
                     * The CurrentHue attribute contains the current hue value of the light. It is updated as fast as practical
                     * during commands that change the hue.
                     *
                     * The hue in degrees shall be related to the CurrentHue attribute by the relationship: Hue = CurrentHue x
                     * 360 / 254 (CurrentHue in the range 0 to 254 inclusive)
                     *
                     * If this attribute is implemented then the CurrentSaturation and ColorMode attributes shall also be
                     * implemented.
                     *
                     * @see {@link MatterSpecification.v13.Cluster} § 3.2.7.2
                     */
                    readonly currentHue: Attribute<number, any>;
                    /**
                     * The CurrentSaturation attribute holds the current saturation value of the light. It is updated as fast
                     * as practical during commands that change the saturation.
                     *
                     * The saturation shall be related to the CurrentSaturation attribute by the relationship: Saturation =
                     * CurrentSaturation/254 (CurrentSaturation in the range 0 to 254 inclusive)
                     *
                     * If this attribute is implemented then the CurrentHue and ColorMode attributes shall also be implemented.
                     *
                     * @see {@link MatterSpecification.v13.Cluster} § 3.2.7.3
                     */
                    readonly currentSaturation: Attribute<number, any>;
                };
                readonly commands: {
                    /**
                     * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.4
                     */
                    readonly moveToHue: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * The Hue field specifies the hue to be moved to.
                         *
                         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.4.1
                         */
                        hue: import("../tlv/TlvObject.js").FieldType<number>;
                        /**
                         * The Direction field shall be one of the non-reserved values in Values of the Direction Field.
                         *
                         * ### Table 17. Values of the Direction Field
                         *
                         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.4.2
                         */
                        direction: import("../tlv/TlvObject.js").FieldType<Direction>;
                        /**
                         * The TransitionTime field specifies, in 1/10ths of a second, the time that shall be taken to move to the new
                         * hue.
                         *
                         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.4.3
                         */
                        transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
                        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            executeIfOff: BitFlag;
                        }>>;
                        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            executeIfOff: BitFlag;
                        }>>;
                    }>, void, any>;
                    /**
                     * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.5
                     */
                    readonly moveHue: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * The MoveMode field shall be one of the non-reserved values in Values of the MoveMode Field. If the MoveMode
                         * field is equal to 0 (Stop), the Rate field shall be ignored.
                         *
                         * ### Table 18. Values of the MoveMode Field
                         *
                         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.5.1
                         */
                        moveMode: import("../tlv/TlvObject.js").FieldType<MoveMode>;
                        /**
                         * The Rate field specifies the rate of movement in steps per second. A step is a change in the device’s hue of
                         * one unit. If the MoveMode field is set to 1 (up) or 3 (down) and the Rate field has a value of zero, the
                         * command has no effect and a response command shall be sent in response, with the status code set to
                         * INVALID_COMMAND. If the MoveMode field is set to 0 (stop) the Rate field shall be ignored.
                         *
                         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.5.2
                         */
                        rate: import("../tlv/TlvObject.js").FieldType<number>;
                        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            executeIfOff: BitFlag;
                        }>>;
                        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            executeIfOff: BitFlag;
                        }>>;
                    }>, void, any>;
                    /**
                     * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.6
                     */
                    readonly stepHue: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * The StepMode field shall be one of the non-reserved values in Values of the StepMode Field.
                         *
                         * ### Table 20. Values of the StepMode Field
                         *
                         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.6.1
                         */
                        stepMode: import("../tlv/TlvObject.js").FieldType<StepMode>;
                        /**
                         * The change to be added to (or subtracted from) the current value of the device’s hue.
                         *
                         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.6.2
                         */
                        stepSize: import("../tlv/TlvObject.js").FieldType<number>;
                        /**
                         * The TransitionTime field specifies, in 1/10ths of a second, the time that shall be taken to perform the
                         * step. A step is a change in the device’s hue of ‘Step size’ units.
                         *
                         * NOTE
                         *
                         * Here the TransitionTime data field is of data type uint8, where uint16 is more common for TransitionTime
                         * data fields in other clusters / commands.
                         *
                         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.6.3
                         */
                        transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
                        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            executeIfOff: BitFlag;
                        }>>;
                        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            executeIfOff: BitFlag;
                        }>>;
                    }>, void, any>;
                    /**
                     * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.7
                     */
                    readonly moveToSaturation: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        saturation: import("../tlv/TlvObject.js").FieldType<number>;
                        transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
                        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            executeIfOff: BitFlag;
                        }>>;
                        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            executeIfOff: BitFlag;
                        }>>;
                    }>, void, any>;
                    /**
                     * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.8
                     */
                    readonly moveSaturation: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * The MoveMode field shall be one of the non-reserved values in Values of the MoveMode Field. If the MoveMode
                         * field is equal to 0 (Stop), the Rate field shall be ignored.
                         *
                         * ### Table 22. Values of the MoveMode Field
                         *
                         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.8.1
                         */
                        moveMode: import("../tlv/TlvObject.js").FieldType<MoveMode>;
                        /**
                         * The Rate field specifies the rate of movement in steps per second. A step is a change in the device’s
                         * saturation of one unit. If the MoveMode field is set to 1 (up) or 3 (down) and the Rate field has a value of
                         * zero, the command has no effect and a response command shall be sent in response, with the status code set
                         * to INVALID_COMMAND. If the MoveMode field is set to 0 (stop) the Rate field shall be ignored.
                         *
                         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.8.2
                         */
                        rate: import("../tlv/TlvObject.js").FieldType<number>;
                        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            executeIfOff: BitFlag;
                        }>>;
                        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            executeIfOff: BitFlag;
                        }>>;
                    }>, void, any>;
                    /**
                     * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.9
                     */
                    readonly stepSaturation: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * The StepMode field shall be one of the non-reserved values in Values of the StepMode Field.
                         *
                         * ### Table 24. Values of the StepMode Field
                         *
                         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.9.1
                         */
                        stepMode: import("../tlv/TlvObject.js").FieldType<StepMode>;
                        /**
                         * The change to be added to (or subtracted from) the current value of the device’s saturation.
                         *
                         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.9.2
                         */
                        stepSize: import("../tlv/TlvObject.js").FieldType<number>;
                        /**
                         * The TransitionTime field specifies, in 1/10ths of a second, the time that shall be taken to perform the
                         * step. A step is a change in the device’s saturation of ‘Step size’ units.
                         *
                         * NOTE
                         *
                         * Here the TransitionTime data field is of data type uint8, where uint16 is more common for TransitionTime
                         * data fields in other clusters / commands.
                         *
                         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.9.3
                         */
                        transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
                        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            executeIfOff: BitFlag;
                        }>>;
                        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            executeIfOff: BitFlag;
                        }>>;
                    }>, void, any>;
                    /**
                     * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.10
                     */
                    readonly moveToHueAndSaturation: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        hue: import("../tlv/TlvObject.js").FieldType<number>;
                        saturation: import("../tlv/TlvObject.js").FieldType<number>;
                        transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
                        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            executeIfOff: BitFlag;
                        }>>;
                        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            executeIfOff: BitFlag;
                        }>>;
                    }>, void, any>;
                };
            };
        }, {
            readonly flags: {
                readonly xy: true;
            };
            readonly component: {
                readonly attributes: {
                    /**
                     * The CurrentX attribute contains the current value of the normalized chromaticity value x, as defined in
                     * the CIE xyY Color Space. It is updated as fast as practical during commands that change the color.
                     *
                     * The value of x shall be related to the CurrentX attribute by the relationship x = CurrentX / 65536
                     * (CurrentX in the range 0 to 65279 inclusive)
                     *
                     * @see {@link MatterSpecification.v13.Cluster} § 3.2.7.5
                     */
                    readonly currentX: Attribute<number, any>;
                    /**
                     * The CurrentY attribute contains the current value of the normalized chromaticity value y, as defined in
                     * the CIE xyY Color Space. It is updated as fast as practical during commands that change the color.
                     *
                     * The value of y shall be related to the CurrentY attribute by the relationship y = CurrentY / 65536
                     * (CurrentY in the range 0 to 65279 inclusive)
                     *
                     * @see {@link MatterSpecification.v13.Cluster} § 3.2.7.6
                     */
                    readonly currentY: Attribute<number, any>;
                };
                readonly commands: {
                    /**
                     * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.11
                     */
                    readonly moveToColor: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        colorX: import("../tlv/TlvObject.js").FieldType<number>;
                        colorY: import("../tlv/TlvObject.js").FieldType<number>;
                        transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
                        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            executeIfOff: BitFlag;
                        }>>;
                        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            executeIfOff: BitFlag;
                        }>>;
                    }>, void, any>;
                    /**
                     * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.12
                     */
                    readonly moveColor: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * The RateX field specifies the rate of movement in steps per second. A step is a change in the device’s
                         * CurrentX attribute of one unit.
                         *
                         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.12.1
                         */
                        rateX: import("../tlv/TlvObject.js").FieldType<number>;
                        /**
                         * The RateY field specifies the rate of movement in steps per second. A step is a change in the device’s
                         * CurrentY attribute of one unit.
                         *
                         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.12.2
                         */
                        rateY: import("../tlv/TlvObject.js").FieldType<number>;
                        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            executeIfOff: BitFlag;
                        }>>;
                        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            executeIfOff: BitFlag;
                        }>>;
                    }>, void, any>;
                    /**
                     * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.13
                     */
                    readonly stepColor: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        stepX: import("../tlv/TlvObject.js").FieldType<number>;
                        stepY: import("../tlv/TlvObject.js").FieldType<number>;
                        /**
                         * The TransitionTime field specifies, in 1/10ths of a second, the time that shall be taken to perform the
                         * color change.
                         *
                         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.13.2
                         */
                        transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
                        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            executeIfOff: BitFlag;
                        }>>;
                        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            executeIfOff: BitFlag;
                        }>>;
                    }>, void, any>;
                };
            };
        }, {
            readonly flags: {
                readonly colorTemperature: true;
            };
            readonly component: {
                readonly attributes: {
                    /**
                     * The ColorTemperatureMireds attribute contains a scaled inverse of the current value of the color
                     * temperature. The unit of ColorTemperatureMireds is the mired (micro reciprocal degree), a.k.a. mirek
                     * (micro reciprocal kelvin). It is updated as fast as practical during commands that change the color.
                     *
                     * The color temperature value in kelvins shall be related to the ColorTemperatureMireds attribute in
                     * mireds by the relationship
                     *
                     * Color temperature in kelvins = 1,000,000 / ColorTemperatureMireds, where ColorTemperatureMireds is in
                     * the range 1 to 65279 mireds inclusive, giving a color temperature range from 1,000,000 kelvins to 15.32
                     * kelvins.
                     *
                     * If this attribute is implemented then the ColorMode attribute shall also be implemented.
                     *
                     * @see {@link MatterSpecification.v13.Cluster} § 3.2.7.9
                     */
                    readonly colorTemperatureMireds: Attribute<number, any>;
                    /**
                     * The ColorTempPhysicalMinMireds attribute indicates the minimum mired value supported by the hardware.
                     * ColorTempPhysicalMinMireds corresponds to the maximum color temperature in kelvins supported by the
                     * hardware. ColorTempPhysicalMinMireds <= ColorTemperatureMireds.
                     *
                     * @see {@link MatterSpecification.v13.Cluster} § 3.2.7.20
                     */
                    readonly colorTempPhysicalMinMireds: Attribute<number, any>;
                    /**
                     * The ColorTempPhysicalMaxMireds attribute indicates the maximum mired value supported by the hardware.
                     * ColorTempPhysicalMaxMireds corresponds to the minimum color temperature in kelvins supported by the
                     * hardware. ColorTemperatureMireds <= ColorTempPhysicalMaxMireds.
                     *
                     * @see {@link MatterSpecification.v13.Cluster} § 3.2.7.21
                     */
                    readonly colorTempPhysicalMaxMireds: Attribute<number, any>;
                    /**
                     * The CoupleColorTempToLevelMinMireds attribute specifies a lower bound on the value of the
                     * ColorTemperatureMireds attribute for the purposes of coupling the ColorTemperatureMireds attribute to
                     * the CurrentLevel attribute when the CoupleColorTempToLevel bit of the Options attribute of the Level
                     * Control cluster is equal to 1. When coupling the ColorTemperatureMireds attribute to the CurrentLevel
                     * attribute, this value shall correspond to a CurrentLevel value of 0xFE (100%).
                     *
                     * This attribute shall be set such that the following relationship exists: ColorTempPhysicalMinMireds ≤
                     * CoupleColorTempToLevelMinMireds ≤ ColorTemperatureMireds
                     *
                     * Note that since this attribute is stored as a micro reciprocal degree (mired) value (i.e. color
                     * temperature in kelvins = 1,000,000 / CoupleColorTempToLevelMinMireds), the
                     * CoupleColorTempToLevelMinMireds attribute corresponds to an upper bound on the value of the color
                     * temperature in kelvins supported by the device.
                     *
                     * @see {@link MatterSpecification.v13.Cluster} § 3.2.7.22
                     */
                    readonly coupleColorTempToLevelMinMireds: OptionalAttribute<number, any>;
                    /**
                     * The StartUpColorTemperatureMireds attribute shall define the desired startup color temperature value a
                     * lamp shall use when it is supplied with power and this value shall be reflected in the
                     * ColorTemperatureMireds attribute. In addition, the ColorMode and EnhancedColorMode attributes shall be
                     * set to 0x02 (color temperature). The values of the StartUpColorTemperatureMireds attribute are listed in
                     * the table below,
                     *
                     * Table 12. Values of the StartUpColorTemperatureMireds attribute
                     *
                     * @see {@link MatterSpecification.v13.Cluster} § 3.2.7.23
                     */
                    readonly startUpColorTemperatureMireds: OptionalWritableAttribute<number | null, any>;
                };
                readonly commands: {
                    /**
                     * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.14
                     */
                    readonly moveToColorTemperature: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        colorTemperatureMireds: import("../tlv/TlvObject.js").FieldType<number>;
                        transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
                        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            executeIfOff: BitFlag;
                        }>>;
                        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            executeIfOff: BitFlag;
                        }>>;
                    }>, void, any>;
                    /**
                     * The MoveColorTemperature command allows the color temperature of a lamp to be moved at a specified rate.
                     *
                     * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.21
                     */
                    readonly moveColorTemperature: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * This field is identical to the MoveMode field of the MoveHue command of the Color Control cluster (see
                         * sub-clause MoveHue Command). If the MoveMode field is equal to 0 (Stop), the Rate field shall be ignored.
                         *
                         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.21.1
                         */
                        moveMode: import("../tlv/TlvObject.js").FieldType<MoveMode>;
                        /**
                         * The Rate field specifies the rate of movement in steps per second. A step is a change in the color
                         * temperature of a device by one unit. If the MoveMode field is set to 1 (up) or 3 (down) and the Rate field
                         * has a value of zero, the command has no effect and a response command shall be sent in response, with the
                         * status code set to INVALID_COMMAND. If the MoveMode field is set to 0 (stop) the Rate field shall be ignored.
                         *
                         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.21.2
                         */
                        rate: import("../tlv/TlvObject.js").FieldType<number>;
                        /**
                         * The ColorTemperatureMinimumMireds field specifies a lower bound on the ColorTemperatureMireds attribute (≡
                         * an upper bound on the color temperature in kelvins) for the current move operation
                         *
                         * ColorTempPhysicalMinMireds <= ColorTemperatureMinimumMireds field <= ColorTemperatureMireds
                         *
                         * As such if the move operation takes the ColorTemperatureMireds attribute towards the value of the
                         * ColorTemperatureMinimumMireds field it shall be clipped so that the above invariant is satisfied. If the
                         * ColorTemperatureMinimumMireds field is set to 0, ColorTempPhysicalMinMireds shall be used as the lower bound
                         * for the ColorTemperatureMireds attribute.
                         *
                         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.21.3
                         */
                        colorTemperatureMinimumMireds: import("../tlv/TlvObject.js").FieldType<number>;
                        /**
                         * The ColorTemperatureMaximumMireds field specifies an upper bound on the ColorTemperatureMireds attribute (≡
                         * a lower bound on the color temperature in kelvins) for the current move operation
                         *
                         * ColorTemperatureMireds <= ColorTemperatureMaximumMireds field <= ColorTempPhysicalMaxMireds
                         *
                         * As such if the move operation takes the ColorTemperatureMireds attribute towards the value of the
                         * ColorTemperatureMaximumMireds field it shall be clipped so that the above invariant is satisfied. If the
                         * ColorTemperatureMaximumMireds field is set to 0, ColorTempPhysicalMaxMireds shall be used as the upper bound
                         * for the ColorTemperatureMireds attribute.
                         *
                         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.21.4
                         */
                        colorTemperatureMaximumMireds: import("../tlv/TlvObject.js").FieldType<number>;
                        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            executeIfOff: BitFlag;
                        }>>;
                        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            executeIfOff: BitFlag;
                        }>>;
                    }>, void, any>;
                    /**
                     * The StepColorTemperature command allows the color temperature of a lamp to be stepped with a specified
                     * step size.
                     *
                     * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.22
                     */
                    readonly stepColorTemperature: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * This field is identical to the StepMode field of the StepHue command of the Color Control cluster (see
                         * sub-clause StepHue Command).
                         *
                         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.22.1
                         */
                        stepMode: import("../tlv/TlvObject.js").FieldType<StepMode>;
                        /**
                         * The StepSize field specifies the change to be added to (or subtracted from) the current value of the
                         * device’s color temperature.
                         *
                         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.22.2
                         */
                        stepSize: import("../tlv/TlvObject.js").FieldType<number>;
                        /**
                         * The TransitionTime field specifies, in units of 1/10ths of a second, the time that shall be taken to perform
                         * the step. A step is a change to the device’s color temperature of a magnitude corresponding to the StepSize
                         * field.
                         *
                         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.22.3
                         */
                        transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
                        /**
                         * The ColorTemperatureMinimumMireds field specifies a lower bound on the ColorTemperatureMireds attribute (≡
                         * an upper bound on the color temperature in kelvins) for the current step operation
                         *
                         * ColorTempPhysicalMinMireds <= ColorTemperatureMinimumMireds field <= ColorTemperatureMireds
                         *
                         * As such if the step operation takes the ColorTemperatureMireds attribute towards the value of the Color
                         * Temperature Minimum Mireds field it shall be clipped so that the above invariant is satisfied. If the
                         * ColorTemperatureMinimumMireds field is set to 0, ColorTempPhysicalMinMireds shall be used as the lower bound
                         * for the ColorTemperatureMireds attribute.
                         *
                         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.22.4
                         */
                        colorTemperatureMinimumMireds: import("../tlv/TlvObject.js").FieldType<number>;
                        /**
                         * The ColorTemperatureMaximumMireds field specifies an upper bound on the ColorTemperatureMireds attribute (≡
                         * a lower bound on the color temperature in kelvins) for the current step operation
                         *
                         * ColorTemperatureMireds ≤ ColorTemperatureMaximumMireds field ≤ ColorTempPhysicalMaxMireds
                         *
                         * As such if the step operation takes the ColorTemperatureMireds attribute towards the value of the
                         * ColorTemperatureMaximumMireds field it shall be clipped so that the above invariant is satisfied. If the
                         * ColorTemperatureMaximum Mireds field is set to 0, ColorTempPhysicalMaxMireds shall be used as the upper
                         * bound for the ColorTemperatureMireds attribute.
                         *
                         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.22.5
                         */
                        colorTemperatureMaximumMireds: import("../tlv/TlvObject.js").FieldType<number>;
                        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            executeIfOff: BitFlag;
                        }>>;
                        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            executeIfOff: BitFlag;
                        }>>;
                    }>, void, any>;
                };
            };
        }, {
            readonly flags: {
                readonly enhancedHue: true;
            };
            readonly component: {
                readonly attributes: {
                    /**
                     * The EnhancedCurrentHue attribute represents non-equidistant steps along the CIE 1931 color triangle, and
                     * it provides 16-bits precision.
                     *
                     * The upper 8 bits of this attribute shall be used as an index in the implementation specific XY lookup
                     * table to provide the non-equidistance steps. The lower 8 bits shall be used to interpolate between these
                     * steps in a linear way in order to provide color zoom for the user.
                     *
                     * To provide compatibility with standard ZCL, the CurrentHue attribute shall contain a hue value in the
                     * range 0 to 254, calculated from the EnhancedCurrentHue attribute.
                     *
                     * @see {@link MatterSpecification.v13.Cluster} § 3.2.7.12
                     */
                    readonly enhancedCurrentHue: Attribute<number, any>;
                };
                readonly commands: {
                    /**
                     * The EnhancedMoveToHue command allows lamps to be moved in a smooth continuous transition from their
                     * current hue to a target hue.
                     *
                     * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.15
                     */
                    readonly enhancedMoveToHue: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * The EnhancedHue field specifies the target extended hue for the lamp.
                         *
                         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.15.1
                         */
                        enhancedHue: import("../tlv/TlvObject.js").FieldType<number>;
                        /**
                         * This field is identical to the Direction field of the MoveToHue command of the Color Control cluster (see
                         * sub-clause Use of the OptionsMask and OptionsOverride fields).
                         *
                         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.15.2
                         */
                        direction: import("../tlv/TlvObject.js").FieldType<Direction>;
                        /**
                         * This field is identical to the TransitionTime field of the MoveToHue command of the Color Control cluster
                         * (see sub-clause Use of the OptionsMask and OptionsOverride fields).
                         *
                         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.15.3
                         */
                        transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
                        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            executeIfOff: BitFlag;
                        }>>;
                        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            executeIfOff: BitFlag;
                        }>>;
                    }>, void, any>;
                    /**
                     * The EnhancedMoveHue command allows lamps to be moved in a continuous stepped transition from their
                     * current hue to a target hue.
                     *
                     * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.16
                     */
                    readonly enhancedMoveHue: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * This field is identical to the MoveMode field of the MoveHue command of the Color Control cluster (see
                         * sub-clause MoveHue Command). If the MoveMode field is equal to 0 (Stop), the Rate field shall be ignored.
                         *
                         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.16.1
                         */
                        moveMode: import("../tlv/TlvObject.js").FieldType<MoveMode>;
                        /**
                         * The Rate field specifies the rate of movement in steps per second. A step is a change in the extended hue of
                         * a device by one unit. If the MoveMode field is set to 1 (up) or 3 (down) and the Rate field has a value of
                         * zero, the command has no effect and a response command shall be sent in response, with the status code set
                         * to INVALID_COMMAND. If the MoveMode field is set to 0 (stop) the Rate field shall be ignored.
                         *
                         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.16.2
                         */
                        rate: import("../tlv/TlvObject.js").FieldType<number>;
                        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            executeIfOff: BitFlag;
                        }>>;
                        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            executeIfOff: BitFlag;
                        }>>;
                    }>, void, any>;
                    /**
                     * The EnhancedStepHue command allows lamps to be moved in a stepped transition from their current hue to a
                     * target hue, resulting in a linear transition through XY space.
                     *
                     * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.17
                     */
                    readonly enhancedStepHue: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * This field is identical to the StepMode field of the StepHue command of the Color Control cluster (see
                         * sub-clause StepHue Command).
                         *
                         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.17.1
                         */
                        stepMode: import("../tlv/TlvObject.js").FieldType<StepMode>;
                        /**
                         * The StepSize field specifies the change to be added to (or subtracted from) the current value of the
                         * device’s enhanced hue.
                         *
                         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.17.2
                         */
                        stepSize: import("../tlv/TlvObject.js").FieldType<number>;
                        /**
                         * The TransitionTime field specifies, in units of 1/10ths of a second, the time that shall be taken to perform
                         * the step. A step is a change to the device’s enhanced hue of a magnitude corresponding to the StepSize field.
                         *
                         * NOTE
                         *
                         * Here TransitionTime data field is of data type uint16, while the TransitionTime data field of the StepHue
                         * command is of data type uint8.
                         *
                         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.17.3
                         */
                        transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
                        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            executeIfOff: BitFlag;
                        }>>;
                        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            executeIfOff: BitFlag;
                        }>>;
                    }>, void, any>;
                    /**
                     * The EnhancedMoveToHueAndSaturation command allows lamps to be moved in a smooth continuous transition
                     * from their current hue to a target hue and from their current saturation to a target saturation.
                     *
                     * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.18
                     */
                    readonly enhancedMoveToHueAndSaturation: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * The EnhancedHue field specifies the target extended hue for the lamp.
                         *
                         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.18.1
                         */
                        enhancedHue: import("../tlv/TlvObject.js").FieldType<number>;
                        /**
                         * This field is identical to the Saturation field of the MoveToHueAndSaturation command of the Color Control
                         * cluster (see sub-clause MoveToHueAndSaturation Command).
                         *
                         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.18.2
                         */
                        saturation: import("../tlv/TlvObject.js").FieldType<number>;
                        /**
                         * This field is identical to the TransitionTime field of the MoveToHue command of the Color Control cluster
                         * (see sub-clause MoveToHueAndSaturation Command).
                         *
                         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.18.3
                         */
                        transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
                        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            executeIfOff: BitFlag;
                        }>>;
                        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            executeIfOff: BitFlag;
                        }>>;
                    }>, void, any>;
                };
            };
        }, {
            readonly flags: {
                readonly colorLoop: true;
            };
            readonly component: {
                readonly attributes: {
                    /**
                     * The ColorLoopActive attribute specifies the current active status of the color loop. If this attribute
                     * has the value 0, the color loop shall not be active. If this attribute has the value 1, the color loop
                     * shall be active. All other values (2 to 254) are reserved.
                     *
                     * @see {@link MatterSpecification.v13.Cluster} § 3.2.7.14
                     */
                    readonly colorLoopActive: Attribute<ColorLoopActive, any>;
                    /**
                     * The ColorLoopDirection attribute specifies the current direction of the color loop. If this attribute
                     * has the value 0, the EnhancedCurrentHue attribute shall be decremented. If this attribute has the value
                     * 1, the EnhancedCurrentHue attribute shall be incremented. All other values (2 to 254) are reserved.
                     *
                     * @see {@link MatterSpecification.v13.Cluster} § 3.2.7.15
                     */
                    readonly colorLoopDirection: Attribute<ColorLoopDirection, any>;
                    /**
                     * The ColorLoopTime attribute specifies the number of seconds it shall take to perform a full color loop,
                     * i.e., to cycle all values of the EnhancedCurrentHue attribute (between 0 and 0xFFFE).
                     *
                     * @see {@link MatterSpecification.v13.Cluster} § 3.2.7.16
                     */
                    readonly colorLoopTime: Attribute<number, any>;
                    /**
                     * The ColorLoopStartEnhancedHue attribute specifies the value of the EnhancedCurrentHue attribute from
                     * which the color loop shall be started.
                     *
                     * @see {@link MatterSpecification.v13.Cluster} § 3.2.7.17
                     */
                    readonly colorLoopStartEnhancedHue: Attribute<number, any>;
                    /**
                     * The ColorLoopStoredEnhancedHue attribute specifies the value of the EnhancedCurrentHue attribute before
                     * the color loop was started. Once the color loop is complete, the EnhancedCurrentHue attribute shall be
                     * restored to this value.
                     *
                     * @see {@link MatterSpecification.v13.Cluster} § 3.2.7.18
                     */
                    readonly colorLoopStoredEnhancedHue: Attribute<number, any>;
                };
                readonly commands: {
                    /**
                     * The Color Loop Set command allows a color loop to be activated such that the color lamp cycles through
                     * its range of hues.
                     *
                     * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.19
                     */
                    readonly colorLoopSet: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        /**
                         * The UpdateFlags field specifies which color loop attributes to update before the color loop is started. This
                         * field shall be formatted as illustrated in Format of the UpdateFlags Field of the ColorLoopSet Command.
                         *
                         * ### Table 28. Format of the UpdateFlags Field of the ColorLoopSet Command
                         *
                         * The UpdateAction sub-field is 1 bit in length and specifies whether the device shall adhere to the action
                         * field in order to process the command. If this sub-field is set to 1, the device shall adhere to the action
                         * field. If this sub-field is set to 0, the device shall ignore the Action field.
                         *
                         * The UpdateDirection sub-field is 1 bit in length and specifies whether the device shall update the
                         * ColorLoopDirection attribute with the Direction field. If this sub-field is set to 1, the device shall
                         * update the value of the ColorLoopDirection attribute with the value of the Direction field. If this
                         * sub-field is set to 0, the device shall ignore the Direction field.
                         *
                         * The UpdateTime sub-field is 1 bit in length and specifies whether the device shall update the ColorLoopTime
                         * attribute with the Time field. If this sub-field is set to 1, the device shall update the value of the
                         * ColorLoopTime attribute with the value of the Time field. If this sub-field is set to 0, the device shall
                         * ignore the Time field.
                         *
                         * The UpdateStartHue sub-field is 1 bit in length and specifies whether the device shall update the
                         * ColorLoopStartEnhancedHue attribute with the StartHue field. If this sub-field is set to 1, the device shall
                         * update the value of the ColorLoopStartEnhancedHue attribute with the value of the StartHue field. If this
                         * sub-field is set to 0, the device shall ignore the StartHue field.
                         *
                         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.19.1
                         */
                        updateFlags: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            updateAction: BitFlag;
                            updateDirection: BitFlag;
                            updateTime: BitFlag;
                            updateStartHue: BitFlag;
                            reserved: BitField;
                        }>>;
                        /**
                         * The Action field specifies the action to take for the color loop if the UpdateAction sub-field of the
                         * UpdateFlags field is set to 1. This field shall be set to one of the non-reserved values listed in Values of
                         * the Action Field of the ColorLoopSet Command.
                         *
                         * ### Table 29. Values of the Action Field of the ColorLoopSet Command
                         *
                         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.19.2
                         */
                        action: import("../tlv/TlvObject.js").FieldType<Action>;
                        /**
                         * The Direction field specifies the direction for the color loop if the Update Direction field of the
                         * UpdateFlags field is set to 1. This field shall be set to one of the non-reserved values listed in Values of
                         * the Direction Field of the ColorLoopSet Command.
                         *
                         * ### Table 30. Values of the Direction Field of the ColorLoopSet Command
                         *
                         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.19.3
                         */
                        direction: import("../tlv/TlvObject.js").FieldType<ColorLoopSetDirection>;
                        /**
                         * The Time field specifies the number of seconds over which to perform a full color loop if the UpdateTime
                         * sub-field of the UpdateFlags field is set to 1.
                         *
                         * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.19.4
                         */
                        time: import("../tlv/TlvObject.js").FieldType<number>;
                        startHue: import("../tlv/TlvObject.js").FieldType<number>;
                        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            executeIfOff: BitFlag;
                        }>>;
                        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            executeIfOff: BitFlag;
                        }>>;
                    }>, void, any>;
                };
            };
        }, {
            readonly flags: {
                readonly hueSaturation: true;
            };
            readonly component: {
                readonly commands: {
                    /**
                     * The StopMoveStep command is provided to allow MoveTo and Step commands to be stopped. (Note this
                     * automatically provides symmetry to the Level Control cluster.)
                     *
                     * NOTE the StopMoveStep command has no effect on an active color loop.
                     *
                     * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.20
                     */
                    readonly stopMoveStep: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            executeIfOff: BitFlag;
                        }>>;
                        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            executeIfOff: BitFlag;
                        }>>;
                    }>, void, any>;
                };
            };
        }, {
            readonly flags: {
                readonly xy: true;
            };
            readonly component: {
                readonly commands: {
                    /**
                     * The StopMoveStep command is provided to allow MoveTo and Step commands to be stopped. (Note this
                     * automatically provides symmetry to the Level Control cluster.)
                     *
                     * NOTE the StopMoveStep command has no effect on an active color loop.
                     *
                     * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.20
                     */
                    readonly stopMoveStep: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            executeIfOff: BitFlag;
                        }>>;
                        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            executeIfOff: BitFlag;
                        }>>;
                    }>, void, any>;
                };
            };
        }, {
            readonly flags: {
                readonly colorTemperature: true;
            };
            readonly component: {
                readonly commands: {
                    /**
                     * The StopMoveStep command is provided to allow MoveTo and Step commands to be stopped. (Note this
                     * automatically provides symmetry to the Level Control cluster.)
                     *
                     * NOTE the StopMoveStep command has no effect on an active color loop.
                     *
                     * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.20
                     */
                    readonly stopMoveStep: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                        optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            executeIfOff: BitFlag;
                        }>>;
                        optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            executeIfOff: BitFlag;
                        }>>;
                    }>, void, any>;
                };
            };
        }];
    }, []>;
    /**
     * ColorControlCluster supports optional features that you can enable with the ColorControlCluster.with() factory
     * method.
     *
     * @see {@link MatterSpecification.v13.Cluster} § 3.2
     */
    interface Cluster extends Identity<typeof ClusterInstance> {
    }
    const Cluster: Cluster;
    /**
     * @see {@link Complete}
     */
    const CompleteInstance: MutableCluster<{
        readonly id: import("#general").Branded<768, "ClusterId">;
        readonly name: "ColorControl";
        readonly revision: 6;
        readonly features: {
            /**
             * HueSaturation
             *
             * Supports color specification via hue/saturation.
             */
            readonly hueSaturation: BitFlag;
            /**
             * EnhancedHue
             *
             * Enhanced hue is supported.
             */
            readonly enhancedHue: BitFlag;
            /**
             * ColorLoop
             *
             * Color loop is supported.
             */
            readonly colorLoop: BitFlag;
            /**
             * Xy
             *
             * Supports color specification via XY.
             */
            readonly xy: BitFlag;
            /**
             * ColorTemperature
             *
             * Supports specification of color temperature.
             */
            readonly colorTemperature: BitFlag;
        };
        readonly attributes: {
            readonly currentHue: Attribute<number, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    hueSaturation: boolean;
                }];
            };
            readonly currentSaturation: Attribute<number, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    hueSaturation: boolean;
                }];
            };
            readonly currentX: Attribute<number, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    xy: boolean;
                }];
            };
            readonly currentY: Attribute<number, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    xy: boolean;
                }];
            };
            readonly colorTemperatureMireds: Attribute<number, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    colorTemperature: boolean;
                }];
            };
            readonly enhancedCurrentHue: Attribute<number, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    enhancedHue: boolean;
                }];
            };
            readonly colorLoopActive: Attribute<ColorLoopActive, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    colorLoop: boolean;
                }];
            };
            readonly colorLoopDirection: Attribute<ColorLoopDirection, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    colorLoop: boolean;
                }];
            };
            readonly colorLoopTime: Attribute<number, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    colorLoop: boolean;
                }];
            };
            readonly colorLoopStartEnhancedHue: Attribute<number, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    colorLoop: boolean;
                }];
            };
            readonly colorLoopStoredEnhancedHue: Attribute<number, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    colorLoop: boolean;
                }];
            };
            readonly colorTempPhysicalMinMireds: Attribute<number, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    colorTemperature: boolean;
                }];
            };
            readonly colorTempPhysicalMaxMireds: Attribute<number, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    colorTemperature: boolean;
                }];
            };
            readonly coupleColorTempToLevelMinMireds: OptionalAttribute<number, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | [{
                    colorTemperature: boolean;
                }];
                readonly mandatoryIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
            };
            readonly startUpColorTemperatureMireds: OptionalWritableAttribute<number | null, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | [{
                    colorTemperature: boolean;
                }];
                readonly mandatoryIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
            };
            readonly remainingTime: OptionalAttribute<number, any>;
            readonly driftCompensation: OptionalAttribute<DriftCompensation, any>;
            readonly compensationText: OptionalAttribute<string, any>;
            readonly colorMode: Attribute<ColorMode, any>;
            readonly options: WritableAttribute<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                executeIfOff: BitFlag;
            }>, any>;
            readonly numberOfPrimaries: FixedAttribute<number | null, any>;
            readonly primary1X: OptionalFixedAttribute<number, any>;
            readonly primary1Y: OptionalFixedAttribute<number, any>;
            readonly primary1Intensity: OptionalFixedAttribute<number | null, any>;
            readonly primary2X: OptionalFixedAttribute<number, any>;
            readonly primary2Y: OptionalFixedAttribute<number, any>;
            readonly primary2Intensity: OptionalFixedAttribute<number | null, any>;
            readonly primary3X: OptionalFixedAttribute<number, any>;
            readonly primary3Y: OptionalFixedAttribute<number, any>;
            readonly primary3Intensity: OptionalFixedAttribute<number | null, any>;
            readonly primary4X: OptionalFixedAttribute<number, any>;
            readonly primary4Y: OptionalFixedAttribute<number, any>;
            readonly primary4Intensity: OptionalFixedAttribute<number | null, any>;
            readonly primary5X: OptionalFixedAttribute<number, any>;
            readonly primary5Y: OptionalFixedAttribute<number, any>;
            readonly primary5Intensity: OptionalFixedAttribute<number | null, any>;
            readonly primary6X: OptionalFixedAttribute<number, any>;
            readonly primary6Y: OptionalFixedAttribute<number, any>;
            readonly primary6Intensity: OptionalFixedAttribute<number | null, any>;
            readonly whitePointX: OptionalWritableAttribute<number, any>;
            readonly whitePointY: OptionalWritableAttribute<number, any>;
            readonly colorPointRx: OptionalWritableAttribute<number, any>;
            readonly colorPointRy: OptionalWritableAttribute<number, any>;
            readonly colorPointRIntensity: OptionalWritableAttribute<number | null, any>;
            readonly colorPointGx: OptionalWritableAttribute<number, any>;
            readonly colorPointGy: OptionalWritableAttribute<number, any>;
            readonly colorPointGIntensity: OptionalWritableAttribute<number | null, any>;
            readonly colorPointBx: OptionalWritableAttribute<number, any>;
            readonly colorPointBy: OptionalWritableAttribute<number, any>;
            readonly colorPointBIntensity: OptionalWritableAttribute<number | null, any>;
            readonly enhancedColorMode: Attribute<EnhancedColorMode, any>;
            readonly colorCapabilities: Attribute<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                hueSaturation: BitFlag;
                enhancedHue: BitFlag;
                colorLoop: BitFlag;
                xy: BitFlag;
                colorTemperature: BitFlag;
            }>, any>;
            readonly clusterRevision: Attribute<number, never>;
            readonly featureMap: Attribute<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                /**
                 * HueSaturation
                 *
                 * Supports color specification via hue/saturation.
                 */
                readonly hueSaturation: BitFlag;
                /**
                 * EnhancedHue
                 *
                 * Enhanced hue is supported.
                 */
                readonly enhancedHue: BitFlag;
                /**
                 * ColorLoop
                 *
                 * Color loop is supported.
                 */
                readonly colorLoop: BitFlag;
                /**
                 * Xy
                 *
                 * Supports color specification via XY.
                 */
                readonly xy: BitFlag;
                /**
                 * ColorTemperature
                 *
                 * Supports specification of color temperature.
                 */
                readonly colorTemperature: BitFlag;
            }>, never>;
            readonly attributeList: Attribute<import("../index.js").AttributeId[], never>;
            readonly acceptedCommandList: Attribute<import("../index.js").CommandId[], never>;
            readonly generatedCommandList: Attribute<import("../index.js").CommandId[], never>;
        };
        readonly commands: {
            readonly moveToHue: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * The Hue field specifies the hue to be moved to.
                 *
                 * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.4.1
                 */
                hue: import("../tlv/TlvObject.js").FieldType<number>;
                /**
                 * The Direction field shall be one of the non-reserved values in Values of the Direction Field.
                 *
                 * ### Table 17. Values of the Direction Field
                 *
                 * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.4.2
                 */
                direction: import("../tlv/TlvObject.js").FieldType<Direction>;
                /**
                 * The TransitionTime field specifies, in 1/10ths of a second, the time that shall be taken to move to the new
                 * hue.
                 *
                 * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.4.3
                 */
                transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
                optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: BitFlag;
                }>>;
                optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: BitFlag;
                }>>;
            }>, void, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    hueSaturation: boolean;
                }];
            };
            readonly moveHue: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * The MoveMode field shall be one of the non-reserved values in Values of the MoveMode Field. If the MoveMode
                 * field is equal to 0 (Stop), the Rate field shall be ignored.
                 *
                 * ### Table 18. Values of the MoveMode Field
                 *
                 * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.5.1
                 */
                moveMode: import("../tlv/TlvObject.js").FieldType<MoveMode>;
                /**
                 * The Rate field specifies the rate of movement in steps per second. A step is a change in the device’s hue of
                 * one unit. If the MoveMode field is set to 1 (up) or 3 (down) and the Rate field has a value of zero, the
                 * command has no effect and a response command shall be sent in response, with the status code set to
                 * INVALID_COMMAND. If the MoveMode field is set to 0 (stop) the Rate field shall be ignored.
                 *
                 * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.5.2
                 */
                rate: import("../tlv/TlvObject.js").FieldType<number>;
                optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: BitFlag;
                }>>;
                optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: BitFlag;
                }>>;
            }>, void, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    hueSaturation: boolean;
                }];
            };
            readonly stepHue: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * The StepMode field shall be one of the non-reserved values in Values of the StepMode Field.
                 *
                 * ### Table 20. Values of the StepMode Field
                 *
                 * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.6.1
                 */
                stepMode: import("../tlv/TlvObject.js").FieldType<StepMode>;
                /**
                 * The change to be added to (or subtracted from) the current value of the device’s hue.
                 *
                 * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.6.2
                 */
                stepSize: import("../tlv/TlvObject.js").FieldType<number>;
                /**
                 * The TransitionTime field specifies, in 1/10ths of a second, the time that shall be taken to perform the
                 * step. A step is a change in the device’s hue of ‘Step size’ units.
                 *
                 * NOTE
                 *
                 * Here the TransitionTime data field is of data type uint8, where uint16 is more common for TransitionTime
                 * data fields in other clusters / commands.
                 *
                 * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.6.3
                 */
                transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
                optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: BitFlag;
                }>>;
                optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: BitFlag;
                }>>;
            }>, void, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    hueSaturation: boolean;
                }];
            };
            readonly moveToSaturation: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                saturation: import("../tlv/TlvObject.js").FieldType<number>;
                transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
                optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: BitFlag;
                }>>;
                optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: BitFlag;
                }>>;
            }>, void, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    hueSaturation: boolean;
                }];
            };
            readonly moveSaturation: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * The MoveMode field shall be one of the non-reserved values in Values of the MoveMode Field. If the MoveMode
                 * field is equal to 0 (Stop), the Rate field shall be ignored.
                 *
                 * ### Table 22. Values of the MoveMode Field
                 *
                 * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.8.1
                 */
                moveMode: import("../tlv/TlvObject.js").FieldType<MoveMode>;
                /**
                 * The Rate field specifies the rate of movement in steps per second. A step is a change in the device’s
                 * saturation of one unit. If the MoveMode field is set to 1 (up) or 3 (down) and the Rate field has a value of
                 * zero, the command has no effect and a response command shall be sent in response, with the status code set
                 * to INVALID_COMMAND. If the MoveMode field is set to 0 (stop) the Rate field shall be ignored.
                 *
                 * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.8.2
                 */
                rate: import("../tlv/TlvObject.js").FieldType<number>;
                optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: BitFlag;
                }>>;
                optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: BitFlag;
                }>>;
            }>, void, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    hueSaturation: boolean;
                }];
            };
            readonly stepSaturation: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * The StepMode field shall be one of the non-reserved values in Values of the StepMode Field.
                 *
                 * ### Table 24. Values of the StepMode Field
                 *
                 * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.9.1
                 */
                stepMode: import("../tlv/TlvObject.js").FieldType<StepMode>;
                /**
                 * The change to be added to (or subtracted from) the current value of the device’s saturation.
                 *
                 * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.9.2
                 */
                stepSize: import("../tlv/TlvObject.js").FieldType<number>;
                /**
                 * The TransitionTime field specifies, in 1/10ths of a second, the time that shall be taken to perform the
                 * step. A step is a change in the device’s saturation of ‘Step size’ units.
                 *
                 * NOTE
                 *
                 * Here the TransitionTime data field is of data type uint8, where uint16 is more common for TransitionTime
                 * data fields in other clusters / commands.
                 *
                 * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.9.3
                 */
                transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
                optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: BitFlag;
                }>>;
                optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: BitFlag;
                }>>;
            }>, void, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    hueSaturation: boolean;
                }];
            };
            readonly moveToHueAndSaturation: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                hue: import("../tlv/TlvObject.js").FieldType<number>;
                saturation: import("../tlv/TlvObject.js").FieldType<number>;
                transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
                optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: BitFlag;
                }>>;
                optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: BitFlag;
                }>>;
            }>, void, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    hueSaturation: boolean;
                }];
            };
            readonly moveToColor: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                colorX: import("../tlv/TlvObject.js").FieldType<number>;
                colorY: import("../tlv/TlvObject.js").FieldType<number>;
                transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
                optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: BitFlag;
                }>>;
                optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: BitFlag;
                }>>;
            }>, void, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    xy: boolean;
                }];
            };
            readonly moveColor: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * The RateX field specifies the rate of movement in steps per second. A step is a change in the device’s
                 * CurrentX attribute of one unit.
                 *
                 * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.12.1
                 */
                rateX: import("../tlv/TlvObject.js").FieldType<number>;
                /**
                 * The RateY field specifies the rate of movement in steps per second. A step is a change in the device’s
                 * CurrentY attribute of one unit.
                 *
                 * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.12.2
                 */
                rateY: import("../tlv/TlvObject.js").FieldType<number>;
                optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: BitFlag;
                }>>;
                optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: BitFlag;
                }>>;
            }>, void, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    xy: boolean;
                }];
            };
            readonly stepColor: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                stepX: import("../tlv/TlvObject.js").FieldType<number>;
                stepY: import("../tlv/TlvObject.js").FieldType<number>;
                /**
                 * The TransitionTime field specifies, in 1/10ths of a second, the time that shall be taken to perform the
                 * color change.
                 *
                 * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.13.2
                 */
                transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
                optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: BitFlag;
                }>>;
                optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: BitFlag;
                }>>;
            }>, void, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    xy: boolean;
                }];
            };
            readonly moveToColorTemperature: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                colorTemperatureMireds: import("../tlv/TlvObject.js").FieldType<number>;
                transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
                optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: BitFlag;
                }>>;
                optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: BitFlag;
                }>>;
            }>, void, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    colorTemperature: boolean;
                }];
            };
            readonly enhancedMoveToHue: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * The EnhancedHue field specifies the target extended hue for the lamp.
                 *
                 * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.15.1
                 */
                enhancedHue: import("../tlv/TlvObject.js").FieldType<number>;
                /**
                 * This field is identical to the Direction field of the MoveToHue command of the Color Control cluster (see
                 * sub-clause Use of the OptionsMask and OptionsOverride fields).
                 *
                 * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.15.2
                 */
                direction: import("../tlv/TlvObject.js").FieldType<Direction>;
                /**
                 * This field is identical to the TransitionTime field of the MoveToHue command of the Color Control cluster
                 * (see sub-clause Use of the OptionsMask and OptionsOverride fields).
                 *
                 * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.15.3
                 */
                transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
                optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: BitFlag;
                }>>;
                optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: BitFlag;
                }>>;
            }>, void, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    enhancedHue: boolean;
                }];
            };
            readonly enhancedMoveHue: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field is identical to the MoveMode field of the MoveHue command of the Color Control cluster (see
                 * sub-clause MoveHue Command). If the MoveMode field is equal to 0 (Stop), the Rate field shall be ignored.
                 *
                 * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.16.1
                 */
                moveMode: import("../tlv/TlvObject.js").FieldType<MoveMode>;
                /**
                 * The Rate field specifies the rate of movement in steps per second. A step is a change in the extended hue of
                 * a device by one unit. If the MoveMode field is set to 1 (up) or 3 (down) and the Rate field has a value of
                 * zero, the command has no effect and a response command shall be sent in response, with the status code set
                 * to INVALID_COMMAND. If the MoveMode field is set to 0 (stop) the Rate field shall be ignored.
                 *
                 * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.16.2
                 */
                rate: import("../tlv/TlvObject.js").FieldType<number>;
                optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: BitFlag;
                }>>;
                optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: BitFlag;
                }>>;
            }>, void, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    enhancedHue: boolean;
                }];
            };
            readonly enhancedStepHue: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field is identical to the StepMode field of the StepHue command of the Color Control cluster (see
                 * sub-clause StepHue Command).
                 *
                 * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.17.1
                 */
                stepMode: import("../tlv/TlvObject.js").FieldType<StepMode>;
                /**
                 * The StepSize field specifies the change to be added to (or subtracted from) the current value of the
                 * device’s enhanced hue.
                 *
                 * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.17.2
                 */
                stepSize: import("../tlv/TlvObject.js").FieldType<number>;
                /**
                 * The TransitionTime field specifies, in units of 1/10ths of a second, the time that shall be taken to perform
                 * the step. A step is a change to the device’s enhanced hue of a magnitude corresponding to the StepSize field.
                 *
                 * NOTE
                 *
                 * Here TransitionTime data field is of data type uint16, while the TransitionTime data field of the StepHue
                 * command is of data type uint8.
                 *
                 * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.17.3
                 */
                transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
                optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: BitFlag;
                }>>;
                optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: BitFlag;
                }>>;
            }>, void, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    enhancedHue: boolean;
                }];
            };
            readonly enhancedMoveToHueAndSaturation: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * The EnhancedHue field specifies the target extended hue for the lamp.
                 *
                 * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.18.1
                 */
                enhancedHue: import("../tlv/TlvObject.js").FieldType<number>;
                /**
                 * This field is identical to the Saturation field of the MoveToHueAndSaturation command of the Color Control
                 * cluster (see sub-clause MoveToHueAndSaturation Command).
                 *
                 * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.18.2
                 */
                saturation: import("../tlv/TlvObject.js").FieldType<number>;
                /**
                 * This field is identical to the TransitionTime field of the MoveToHue command of the Color Control cluster
                 * (see sub-clause MoveToHueAndSaturation Command).
                 *
                 * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.18.3
                 */
                transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
                optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: BitFlag;
                }>>;
                optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: BitFlag;
                }>>;
            }>, void, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    enhancedHue: boolean;
                }];
            };
            readonly colorLoopSet: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * The UpdateFlags field specifies which color loop attributes to update before the color loop is started. This
                 * field shall be formatted as illustrated in Format of the UpdateFlags Field of the ColorLoopSet Command.
                 *
                 * ### Table 28. Format of the UpdateFlags Field of the ColorLoopSet Command
                 *
                 * The UpdateAction sub-field is 1 bit in length and specifies whether the device shall adhere to the action
                 * field in order to process the command. If this sub-field is set to 1, the device shall adhere to the action
                 * field. If this sub-field is set to 0, the device shall ignore the Action field.
                 *
                 * The UpdateDirection sub-field is 1 bit in length and specifies whether the device shall update the
                 * ColorLoopDirection attribute with the Direction field. If this sub-field is set to 1, the device shall
                 * update the value of the ColorLoopDirection attribute with the value of the Direction field. If this
                 * sub-field is set to 0, the device shall ignore the Direction field.
                 *
                 * The UpdateTime sub-field is 1 bit in length and specifies whether the device shall update the ColorLoopTime
                 * attribute with the Time field. If this sub-field is set to 1, the device shall update the value of the
                 * ColorLoopTime attribute with the value of the Time field. If this sub-field is set to 0, the device shall
                 * ignore the Time field.
                 *
                 * The UpdateStartHue sub-field is 1 bit in length and specifies whether the device shall update the
                 * ColorLoopStartEnhancedHue attribute with the StartHue field. If this sub-field is set to 1, the device shall
                 * update the value of the ColorLoopStartEnhancedHue attribute with the value of the StartHue field. If this
                 * sub-field is set to 0, the device shall ignore the StartHue field.
                 *
                 * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.19.1
                 */
                updateFlags: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    updateAction: BitFlag;
                    updateDirection: BitFlag;
                    updateTime: BitFlag;
                    updateStartHue: BitFlag;
                    reserved: BitField;
                }>>;
                /**
                 * The Action field specifies the action to take for the color loop if the UpdateAction sub-field of the
                 * UpdateFlags field is set to 1. This field shall be set to one of the non-reserved values listed in Values of
                 * the Action Field of the ColorLoopSet Command.
                 *
                 * ### Table 29. Values of the Action Field of the ColorLoopSet Command
                 *
                 * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.19.2
                 */
                action: import("../tlv/TlvObject.js").FieldType<Action>;
                /**
                 * The Direction field specifies the direction for the color loop if the Update Direction field of the
                 * UpdateFlags field is set to 1. This field shall be set to one of the non-reserved values listed in Values of
                 * the Direction Field of the ColorLoopSet Command.
                 *
                 * ### Table 30. Values of the Direction Field of the ColorLoopSet Command
                 *
                 * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.19.3
                 */
                direction: import("../tlv/TlvObject.js").FieldType<ColorLoopSetDirection>;
                /**
                 * The Time field specifies the number of seconds over which to perform a full color loop if the UpdateTime
                 * sub-field of the UpdateFlags field is set to 1.
                 *
                 * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.19.4
                 */
                time: import("../tlv/TlvObject.js").FieldType<number>;
                startHue: import("../tlv/TlvObject.js").FieldType<number>;
                optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: BitFlag;
                }>>;
                optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: BitFlag;
                }>>;
            }>, void, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    colorLoop: boolean;
                }];
            };
            readonly stopMoveStep: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: BitFlag;
                }>>;
                optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: BitFlag;
                }>>;
            }>, void, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    hueSaturation: boolean;
                }, {
                    xy: boolean;
                }, {
                    colorTemperature: boolean;
                }];
            };
            readonly moveColorTemperature: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field is identical to the MoveMode field of the MoveHue command of the Color Control cluster (see
                 * sub-clause MoveHue Command). If the MoveMode field is equal to 0 (Stop), the Rate field shall be ignored.
                 *
                 * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.21.1
                 */
                moveMode: import("../tlv/TlvObject.js").FieldType<MoveMode>;
                /**
                 * The Rate field specifies the rate of movement in steps per second. A step is a change in the color
                 * temperature of a device by one unit. If the MoveMode field is set to 1 (up) or 3 (down) and the Rate field
                 * has a value of zero, the command has no effect and a response command shall be sent in response, with the
                 * status code set to INVALID_COMMAND. If the MoveMode field is set to 0 (stop) the Rate field shall be ignored.
                 *
                 * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.21.2
                 */
                rate: import("../tlv/TlvObject.js").FieldType<number>;
                /**
                 * The ColorTemperatureMinimumMireds field specifies a lower bound on the ColorTemperatureMireds attribute (≡
                 * an upper bound on the color temperature in kelvins) for the current move operation
                 *
                 * ColorTempPhysicalMinMireds <= ColorTemperatureMinimumMireds field <= ColorTemperatureMireds
                 *
                 * As such if the move operation takes the ColorTemperatureMireds attribute towards the value of the
                 * ColorTemperatureMinimumMireds field it shall be clipped so that the above invariant is satisfied. If the
                 * ColorTemperatureMinimumMireds field is set to 0, ColorTempPhysicalMinMireds shall be used as the lower bound
                 * for the ColorTemperatureMireds attribute.
                 *
                 * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.21.3
                 */
                colorTemperatureMinimumMireds: import("../tlv/TlvObject.js").FieldType<number>;
                /**
                 * The ColorTemperatureMaximumMireds field specifies an upper bound on the ColorTemperatureMireds attribute (≡
                 * a lower bound on the color temperature in kelvins) for the current move operation
                 *
                 * ColorTemperatureMireds <= ColorTemperatureMaximumMireds field <= ColorTempPhysicalMaxMireds
                 *
                 * As such if the move operation takes the ColorTemperatureMireds attribute towards the value of the
                 * ColorTemperatureMaximumMireds field it shall be clipped so that the above invariant is satisfied. If the
                 * ColorTemperatureMaximumMireds field is set to 0, ColorTempPhysicalMaxMireds shall be used as the upper bound
                 * for the ColorTemperatureMireds attribute.
                 *
                 * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.21.4
                 */
                colorTemperatureMaximumMireds: import("../tlv/TlvObject.js").FieldType<number>;
                optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: BitFlag;
                }>>;
                optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: BitFlag;
                }>>;
            }>, void, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    colorTemperature: boolean;
                }];
            };
            readonly stepColorTemperature: Command<import("../tlv/TlvObject.js").TypeFromFields<{
                /**
                 * This field is identical to the StepMode field of the StepHue command of the Color Control cluster (see
                 * sub-clause StepHue Command).
                 *
                 * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.22.1
                 */
                stepMode: import("../tlv/TlvObject.js").FieldType<StepMode>;
                /**
                 * The StepSize field specifies the change to be added to (or subtracted from) the current value of the
                 * device’s color temperature.
                 *
                 * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.22.2
                 */
                stepSize: import("../tlv/TlvObject.js").FieldType<number>;
                /**
                 * The TransitionTime field specifies, in units of 1/10ths of a second, the time that shall be taken to perform
                 * the step. A step is a change to the device’s color temperature of a magnitude corresponding to the StepSize
                 * field.
                 *
                 * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.22.3
                 */
                transitionTime: import("../tlv/TlvObject.js").FieldType<number>;
                /**
                 * The ColorTemperatureMinimumMireds field specifies a lower bound on the ColorTemperatureMireds attribute (≡
                 * an upper bound on the color temperature in kelvins) for the current step operation
                 *
                 * ColorTempPhysicalMinMireds <= ColorTemperatureMinimumMireds field <= ColorTemperatureMireds
                 *
                 * As such if the step operation takes the ColorTemperatureMireds attribute towards the value of the Color
                 * Temperature Minimum Mireds field it shall be clipped so that the above invariant is satisfied. If the
                 * ColorTemperatureMinimumMireds field is set to 0, ColorTempPhysicalMinMireds shall be used as the lower bound
                 * for the ColorTemperatureMireds attribute.
                 *
                 * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.22.4
                 */
                colorTemperatureMinimumMireds: import("../tlv/TlvObject.js").FieldType<number>;
                /**
                 * The ColorTemperatureMaximumMireds field specifies an upper bound on the ColorTemperatureMireds attribute (≡
                 * a lower bound on the color temperature in kelvins) for the current step operation
                 *
                 * ColorTemperatureMireds ≤ ColorTemperatureMaximumMireds field ≤ ColorTempPhysicalMaxMireds
                 *
                 * As such if the step operation takes the ColorTemperatureMireds attribute towards the value of the
                 * ColorTemperatureMaximumMireds field it shall be clipped so that the above invariant is satisfied. If the
                 * ColorTemperatureMaximum Mireds field is set to 0, ColorTempPhysicalMaxMireds shall be used as the upper
                 * bound for the ColorTemperatureMireds attribute.
                 *
                 * @see {@link MatterSpecification.v13.Cluster} § 3.2.11.22.5
                 */
                colorTemperatureMaximumMireds: import("../tlv/TlvObject.js").FieldType<number>;
                optionsMask: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: BitFlag;
                }>>;
                optionsOverride: import("../tlv/TlvObject.js").FieldType<import("../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: BitFlag;
                }>>;
            }>, void, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../cluster/Cluster.js").ConditionalFeatureList<import("../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    colorTemperature: boolean;
                }];
            };
        };
    }, []>;
    /**
     * This cluster supports all ColorControl features. It may support illegal feature combinations.
     *
     * If you use this cluster you must manually specify which features are active and ensure the set of active
     * features is legal per the Matter specification.
     */
    interface Complete extends Identity<typeof CompleteInstance> {
    }
    const Complete: Complete;
}
export type ColorControlCluster = ColorControl.Cluster;
export declare const ColorControlCluster: ColorControl.Cluster;
//# sourceMappingURL=color-control.d.ts.map