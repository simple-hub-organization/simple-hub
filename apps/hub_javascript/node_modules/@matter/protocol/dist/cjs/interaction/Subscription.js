"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var Subscription_exports = {};
__export(Subscription_exports, {
  Subscription: () => Subscription
});
module.exports = __toCommonJS(Subscription_exports);
var import_general = require("#general");
/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
const logger = import_general.Logger.get("Subscription");
class Subscription {
  #session;
  #id;
  #isClosed;
  #isCanceledByPeer;
  #criteria;
  constructor(session, id, criteria) {
    this.#session = session;
    this.#id = id;
    this.#criteria = criteria;
    this.#session.subscriptions.add(this);
    logger.debug(`Added subscription ${this.#id} to ${this.#session.name}`);
  }
  get id() {
    return this.#id;
  }
  get criteria() {
    return this.#criteria;
  }
  get isClosed() {
    return !!this.#isClosed;
  }
  get isCanceledByPeer() {
    return !!this.#isCanceledByPeer;
  }
  get session() {
    return this.#session;
  }
  /**
   * Update session state.  This probably is meaniningless except in a server context.
   */
  async update() {
  }
  /**
   * This flag is set on closed sessions when the close was initiated by the peer.
   */
  set isCanceledByPeer(value) {
    this.#isCanceledByPeer = value;
  }
  set isClosed(value) {
    this.#isClosed = value;
  }
  /**
   * Close the session.
   *
   * @param _graceful in a server context this means flush pending updates.  Not sure if applies to client
   * subscriptions
   */
  async close(_graceful = true) {
    this.#isClosed = true;
    this.#session.subscriptions.delete(this);
    logger.debug(`Removed subscription ${this.id} from ${this.#session.name}`);
  }
}
//# sourceMappingURL=Subscription.js.map
