/**
 * @license
 * Copyright 2022-2023 Project CHIP Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { AccessControl } from "#clusters/access-control";
import { AccessLevel } from "#model";
import { ClusterId, FabricIndex, NodeId, StatusResponseError } from "#types";
import { EndpointInterface } from "../endpoint/EndpointInterface.js";
import { SecureSession } from "../session/SecureSession.js";
export type AclEntry = Omit<AccessControl.AccessControlEntry, "privilege"> & {
    privilege: AccessLevel;
};
export type AclList = AclEntry[];
export type AclExtensionEntry = AccessControl.AccessControlExtension;
export type AclExtensionList = AclExtensionEntry[];
declare enum AuthModeNone {
    None = 0
}
export type IncomingSubjectDescriptor = {
    isCommissioning: boolean;
    authMode: AccessControl.AccessControlEntryAuthMode | AuthModeNone;
    subjects: NodeId[];
    fabricIndex: FabricIndex;
};
export declare class AccessDeniedError extends StatusResponseError {
    constructor(message?: string);
}
/**
 * Implements Access Control Logic as per Matter Specification @see {@link MatterSpecification.v12.Core} ยง 6.6.5.2.
 */
export declare class AccessControlManager {
    #private;
    constructor(aclList?: AccessControl.AccessControlEntry[], extensionEntryAccessCheck?: (aclList: AclList, aclEntry: AclEntry, subjectDesc: IncomingSubjectDescriptor, endpoint: EndpointInterface, clusterId: ClusterId) => boolean);
    /**
     * Public method used to update the Access Control List on changes.
     */
    updateAccessControlList(aclList?: AccessControl.AccessControlEntry[]): void;
    /**
     * Check if the given ACL entry is allowed to be used for the given subject descriptor, endpoint, and cluster ID.
     */
    allowsPrivilege(session: SecureSession, endpoint: EndpointInterface, clusterId: ClusterId, privilege: AccessLevel): boolean;
    /**
     * Determines the granted privileges for the given session, endpoint, and cluster ID and returns them.
     */
    getGrantedPrivileges(session: SecureSession, endpoint: EndpointInterface, clusterId: ClusterId): AccessLevel[];
}
export {};
//# sourceMappingURL=AccessControlManager.d.ts.map