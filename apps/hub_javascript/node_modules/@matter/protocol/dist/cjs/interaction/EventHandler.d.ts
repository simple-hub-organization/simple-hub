/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { Construction, Environment, Environmental, Storage, StorageContext, StorageOperationResult } from "#general";
import { ClusterId, EndpointNumber, EventId, EventNumber, EventPriority, FabricIndex, TlvEventFilter, TlvEventPath, TypeFromSchema } from "#types";
/**
 * Data of one Event
 */
export interface EventData<T> {
    endpointId: EndpointNumber;
    clusterId: ClusterId;
    eventId: EventId;
    epochTimestamp: number;
    priority: EventPriority;
    data: T;
}
/**
 * Data of an event which was triggered and stored internally
 */
export interface EventStorageData<T> extends EventData<T> {
    eventNumber: EventNumber;
}
/**
 * Class that collects all triggered events up to a certain limit of events and handle logic to handle subscriptions
 * (TBD)
 */
export declare class EventHandler<S extends Storage = any> {
    #private;
    get construction(): Construction<EventHandler<any>>;
    static create(eventStorage: StorageContext): Promise<EventHandler<any>>;
    static [Environmental.create](env: Environment): EventHandler<any>;
    constructor(eventStorage: StorageContext<S>);
    clear(): Promise<void>;
    getEvents(eventPath: TypeFromSchema<typeof TlvEventPath>, filters?: TypeFromSchema<typeof TlvEventFilter>[], filterForFabricIndex?: FabricIndex): EventStorageData<any>[];
    pushEvent(event: EventData<any>): StorageOperationResult<S, EventStorageData<any>>;
    cleanUpEvents(): void;
}
//# sourceMappingURL=EventHandler.d.ts.map