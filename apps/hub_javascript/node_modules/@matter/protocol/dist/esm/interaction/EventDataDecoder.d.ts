/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { ClusterId, EndpointNumber, EventId, EventNumber, EventPriority, NodeId, TlvEventData, TlvEventReport, TlvStream, TypeFromSchema } from "#types";
export type DecodedEventData<T> = {
    eventNumber: EventNumber;
    priority: EventPriority;
    epochTimestamp?: number | bigint;
    systemTimestamp?: number | bigint;
    deltaEpochTimestamp?: number | bigint;
    deltaSystemTimestamp?: number | bigint;
    data?: T;
};
export type DecodedEventReportValue<T> = {
    path: {
        nodeId?: NodeId;
        endpointId: EndpointNumber;
        clusterId: ClusterId;
        eventId: EventId;
        eventName: string;
    };
    events: DecodedEventData<T>[];
};
export declare function normalizeAndDecodeReadEventReport(data: TypeFromSchema<typeof TlvEventReport>[]): DecodedEventReportValue<any>[];
export declare function normalizeEventData(data: TypeFromSchema<typeof TlvEventData>[]): TypeFromSchema<typeof TlvEventData>[][];
export declare function normalizeAndDecodeEventData(data: TypeFromSchema<typeof TlvEventData>[]): DecodedEventReportValue<any>[];
export declare function decodeUnknownEventValue(data: TlvStream): any;
//# sourceMappingURL=EventDataDecoder.d.ts.map