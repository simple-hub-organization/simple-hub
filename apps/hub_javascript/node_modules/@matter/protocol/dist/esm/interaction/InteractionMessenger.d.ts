/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { Status, StatusCode, TlvDataReport, TlvDataReportForSend, TlvInvokeRequest, TlvInvokeResponse, TlvReadRequest, TlvSubscribeRequest, TlvSubscribeResponse, TlvTimedRequest, TlvWriteRequest, TlvWriteResponse, TypeFromSchema } from "#types";
import { Message } from "../codec/MessageCodec.js";
import { ExchangeProvider } from "../protocol/ExchangeProvider.js";
import { ExchangeSendOptions, MessageExchange } from "../protocol/MessageExchange.js";
import { DataReportPayload } from "./AttributeDataEncoder.js";
export declare enum MessageType {
    StatusResponse = 1,
    ReadRequest = 2,
    SubscribeRequest = 3,
    SubscribeResponse = 4,
    ReportData = 5,
    WriteRequest = 6,
    WriteResponse = 7,
    InvokeRequest = 8,
    InvokeResponse = 9,
    TimedRequest = 10
}
export type ReadRequest = TypeFromSchema<typeof TlvReadRequest>;
export type DataReport = TypeFromSchema<typeof TlvDataReport>;
export type SubscribeRequest = TypeFromSchema<typeof TlvSubscribeRequest>;
export type SubscribeResponse = TypeFromSchema<typeof TlvSubscribeResponse>;
export type InvokeRequest = TypeFromSchema<typeof TlvInvokeRequest>;
export type InvokeResponse = TypeFromSchema<typeof TlvInvokeResponse>;
export type TimedRequest = TypeFromSchema<typeof TlvTimedRequest>;
export type WriteRequest = TypeFromSchema<typeof TlvWriteRequest>;
export type WriteResponse = TypeFromSchema<typeof TlvWriteResponse>;
declare class InteractionMessenger {
    protected exchange: MessageExchange;
    constructor(exchange: MessageExchange);
    calculateMaximumPeerResponseTime(expectedProcessingTimeMs?: number): number;
    send(messageType: number, payload: Uint8Array, options?: ExchangeSendOptions): Promise<void>;
    sendStatus(status: StatusCode): Promise<void>;
    waitForSuccess(expectedProcessingTimeMs?: number): Promise<void>;
    nextMessage(expectedMessageType?: number, expectedProcessingTimeMs?: number): Promise<Message>;
    close(): Promise<void>;
    protected throwIfErrorStatusMessage(message: Message): void;
    getExchangeChannelName(): string;
}
export interface InteractionRecipient {
    handleReadRequest(exchange: MessageExchange, request: ReadRequest, message: Message): Promise<DataReport>;
    handleWriteRequest(exchange: MessageExchange, request: WriteRequest, message: Message): Promise<WriteResponse>;
    handleSubscribeRequest(exchange: MessageExchange, request: SubscribeRequest, messenger: InteractionServerMessenger, message: Message): Promise<void>;
    handleInvokeRequest(exchange: MessageExchange, request: InvokeRequest, messenger: InteractionServerMessenger, message: Message): Promise<void>;
    handleTimedRequest(exchange: MessageExchange, request: TimedRequest, message: Message): void;
}
export declare class InteractionServerMessenger extends InteractionMessenger {
    handleRequest(recipient: InteractionRecipient): Promise<void>;
    /**
     * Handle DataReportPayload with the content of a DataReport to send, split them into multiple DataReport
     * messages and send them out based on the size.
     */
    sendDataReport(dataReportPayload: DataReportPayload, forFabricFilteredRead: boolean): Promise<void>;
    sendDataReportMessage(dataReport: TypeFromSchema<typeof TlvDataReportForSend>): Promise<void>;
}
export declare class IncomingInteractionClientMessenger extends InteractionMessenger {
    waitFor(messageType: number, timeoutMs?: number): Promise<Message>;
    readDataReports(expectedSubscriptionIds?: number[]): Promise<DataReport>;
}
export declare class InteractionClientMessenger extends IncomingInteractionClientMessenger {
    #private;
    private readonly exchangeProvider;
    static create(exchangeProvider: ExchangeProvider): Promise<InteractionClientMessenger>;
    constructor(exchange: MessageExchange, exchangeProvider: ExchangeProvider);
    /** Implements a send method with an automatic reconnection mechanism */
    send(messageType: number, payload: Uint8Array, options?: ExchangeSendOptions): Promise<void>;
    sendReadRequest(readRequest: ReadRequest): Promise<import("#types").TypeFromFields<{
        subscriptionId: import("#types").OptionalFieldType<number>;
        attributeReports: import("#types").OptionalFieldType<import("#types").TypeFromFields<{
            attributeStatus: import("#types").OptionalFieldType<import("#types").TypeFromFields<{
                path: import("#types").FieldType<import("#types").TypeFromFields<{
                    enableTagCompression: import("#types").OptionalFieldType<boolean>;
                    nodeId: import("#types").OptionalFieldType<import("#types").NodeId>;
                    endpointId: import("#types").OptionalFieldType<import("#types").EndpointNumber>;
                    clusterId: import("#types").OptionalFieldType<import("#types").ClusterId>;
                    attributeId: import("#types").OptionalFieldType<import("#types").AttributeId>;
                    listIndex: import("#types").OptionalFieldType<number | null>;
                    wildcardPathFlags: import("#types").OptionalFieldType<import("#types").TypeFromPartialBitSchema<{
                        skipRootNode: import("#types").BitFlag;
                        skipGlobalAttributes: import("#types").BitFlag;
                        skipAttributeList: import("#types").BitFlag;
                        reserved1: import("#types").BitFlag;
                        skipCommandLists: import("#types").BitFlag;
                        skipCustomElements: import("#types").BitFlag;
                        skipFixedAttributes: import("#types").BitFlag;
                        skipChangesOmittedAttributes: import("#types").BitFlag;
                        skipDiagnosticsClusters: import("#types").BitFlag;
                    }>>;
                }>>;
                status: import("#types").FieldType<import("#types").TypeFromFields<{
                    status: import("#types").OptionalFieldType<import("#types").Status>;
                    clusterStatus: import("#types").OptionalFieldType<import("#types").Status>;
                }>>;
            }>>;
            attributeData: import("#types").OptionalFieldType<import("#types").TypeFromFields<{
                dataVersion: import("#types").OptionalFieldType<number>;
                path: import("#types").FieldType<import("#types").TypeFromFields<{
                    enableTagCompression: import("#types").OptionalFieldType<boolean>;
                    nodeId: import("#types").OptionalFieldType<import("#types").NodeId>;
                    endpointId: import("#types").OptionalFieldType<import("#types").EndpointNumber>;
                    clusterId: import("#types").OptionalFieldType<import("#types").ClusterId>;
                    attributeId: import("#types").OptionalFieldType<import("#types").AttributeId>;
                    listIndex: import("#types").OptionalFieldType<number | null>;
                    wildcardPathFlags: import("#types").OptionalFieldType<import("#types").TypeFromPartialBitSchema<{
                        skipRootNode: import("#types").BitFlag;
                        skipGlobalAttributes: import("#types").BitFlag;
                        skipAttributeList: import("#types").BitFlag;
                        reserved1: import("#types").BitFlag;
                        skipCommandLists: import("#types").BitFlag;
                        skipCustomElements: import("#types").BitFlag;
                        skipFixedAttributes: import("#types").BitFlag;
                        skipChangesOmittedAttributes: import("#types").BitFlag;
                        skipDiagnosticsClusters: import("#types").BitFlag;
                    }>>;
                }>>;
                data: import("#types").FieldType<import("#types").TlvStream>;
            }>>;
        }>[]>;
        eventReports: import("#types").OptionalFieldType<import("#types").TypeFromFields<{
            eventStatus: import("#types").OptionalFieldType<import("#types").TypeFromFields<{
                path: import("#types").FieldType<import("#types").TypeFromFields<{
                    nodeId: import("#types").OptionalFieldType<import("#types").NodeId>;
                    endpointId: import("#types").OptionalFieldType<import("#types").EndpointNumber>;
                    clusterId: import("#types").OptionalFieldType<import("#types").ClusterId>;
                    eventId: import("#types").OptionalFieldType<import("#types").EventId>;
                    isUrgent: import("#types").OptionalFieldType<boolean>;
                }>>;
                status: import("#types").FieldType<import("#types").TypeFromFields<{
                    status: import("#types").OptionalFieldType<import("#types").Status>;
                    clusterStatus: import("#types").OptionalFieldType<import("#types").Status>;
                }>>;
            }>>;
            eventData: import("#types").OptionalFieldType<import("#types").TypeFromFields<{
                path: import("#types").FieldType<import("#types").TypeFromFields<{
                    nodeId: import("#types").OptionalFieldType<import("#types").NodeId>;
                    endpointId: import("#types").OptionalFieldType<import("#types").EndpointNumber>;
                    clusterId: import("#types").OptionalFieldType<import("#types").ClusterId>;
                    eventId: import("#types").OptionalFieldType<import("#types").EventId>;
                    isUrgent: import("#types").OptionalFieldType<boolean>;
                }>>;
                eventNumber: import("#types").FieldType<import("#types").EventNumber>;
                priority: import("#types").FieldType<import("#types").EventPriority>;
                epochTimestamp: import("#types").OptionalFieldType<number | bigint>;
                systemTimestamp: import("#types").OptionalFieldType<number | bigint>;
                deltaEpochTimestamp: import("#types").OptionalFieldType<number | bigint>;
                deltaSystemTimestamp: import("#types").OptionalFieldType<number | bigint>;
                data: import("#types").OptionalFieldType<import("#types").TlvStream>;
            }>>;
        }>[]>;
        moreChunkedMessages: import("#types").OptionalFieldType<boolean>;
        suppressResponse: import("#types").OptionalFieldType<boolean>;
        interactionModelRevision: import("#types").FieldType<number>;
    }>>;
    sendSubscribeRequest(subscribeRequest: SubscribeRequest): Promise<{
        subscribeResponse: import("#types").TypeFromFields<{
            subscriptionId: import("#types").FieldType<number>;
            maxInterval: import("#types").FieldType<number>;
            interactionModelRevision: import("#types").FieldType<number>;
        }>;
        report: import("#types").TypeFromFields<{
            subscriptionId: import("#types").OptionalFieldType<number>;
            attributeReports: import("#types").OptionalFieldType<import("#types").TypeFromFields<{
                attributeStatus: import("#types").OptionalFieldType<import("#types").TypeFromFields<{
                    path: import("#types").FieldType<import("#types").TypeFromFields<{
                        enableTagCompression: import("#types").OptionalFieldType<boolean>;
                        nodeId: import("#types").OptionalFieldType<import("#types").NodeId>;
                        endpointId: import("#types").OptionalFieldType<import("#types").EndpointNumber>;
                        clusterId: import("#types").OptionalFieldType<import("#types").ClusterId>;
                        attributeId: import("#types").OptionalFieldType<import("#types").AttributeId>;
                        listIndex: import("#types").OptionalFieldType<number | null>;
                        wildcardPathFlags: import("#types").OptionalFieldType<import("#types").TypeFromPartialBitSchema<{
                            skipRootNode: import("#types").BitFlag;
                            skipGlobalAttributes: import("#types").BitFlag;
                            skipAttributeList: import("#types").BitFlag;
                            reserved1: import("#types").BitFlag;
                            skipCommandLists: import("#types").BitFlag;
                            skipCustomElements: import("#types").BitFlag;
                            skipFixedAttributes: import("#types").BitFlag;
                            skipChangesOmittedAttributes: import("#types").BitFlag;
                            skipDiagnosticsClusters: import("#types").BitFlag;
                        }>>;
                    }>>;
                    status: import("#types").FieldType<import("#types").TypeFromFields<{
                        status: import("#types").OptionalFieldType<import("#types").Status>;
                        clusterStatus: import("#types").OptionalFieldType<import("#types").Status>;
                    }>>;
                }>>;
                attributeData: import("#types").OptionalFieldType<import("#types").TypeFromFields<{
                    dataVersion: import("#types").OptionalFieldType<number>;
                    path: import("#types").FieldType<import("#types").TypeFromFields<{
                        enableTagCompression: import("#types").OptionalFieldType<boolean>;
                        nodeId: import("#types").OptionalFieldType<import("#types").NodeId>;
                        endpointId: import("#types").OptionalFieldType<import("#types").EndpointNumber>;
                        clusterId: import("#types").OptionalFieldType<import("#types").ClusterId>;
                        attributeId: import("#types").OptionalFieldType<import("#types").AttributeId>;
                        listIndex: import("#types").OptionalFieldType<number | null>;
                        wildcardPathFlags: import("#types").OptionalFieldType<import("#types").TypeFromPartialBitSchema<{
                            skipRootNode: import("#types").BitFlag;
                            skipGlobalAttributes: import("#types").BitFlag;
                            skipAttributeList: import("#types").BitFlag;
                            reserved1: import("#types").BitFlag;
                            skipCommandLists: import("#types").BitFlag;
                            skipCustomElements: import("#types").BitFlag;
                            skipFixedAttributes: import("#types").BitFlag;
                            skipChangesOmittedAttributes: import("#types").BitFlag;
                            skipDiagnosticsClusters: import("#types").BitFlag;
                        }>>;
                    }>>;
                    data: import("#types").FieldType<import("#types").TlvStream>;
                }>>;
            }>[]>;
            eventReports: import("#types").OptionalFieldType<import("#types").TypeFromFields<{
                eventStatus: import("#types").OptionalFieldType<import("#types").TypeFromFields<{
                    path: import("#types").FieldType<import("#types").TypeFromFields<{
                        nodeId: import("#types").OptionalFieldType<import("#types").NodeId>;
                        endpointId: import("#types").OptionalFieldType<import("#types").EndpointNumber>;
                        clusterId: import("#types").OptionalFieldType<import("#types").ClusterId>;
                        eventId: import("#types").OptionalFieldType<import("#types").EventId>;
                        isUrgent: import("#types").OptionalFieldType<boolean>;
                    }>>;
                    status: import("#types").FieldType<import("#types").TypeFromFields<{
                        status: import("#types").OptionalFieldType<import("#types").Status>;
                        clusterStatus: import("#types").OptionalFieldType<import("#types").Status>;
                    }>>;
                }>>;
                eventData: import("#types").OptionalFieldType<import("#types").TypeFromFields<{
                    path: import("#types").FieldType<import("#types").TypeFromFields<{
                        nodeId: import("#types").OptionalFieldType<import("#types").NodeId>;
                        endpointId: import("#types").OptionalFieldType<import("#types").EndpointNumber>;
                        clusterId: import("#types").OptionalFieldType<import("#types").ClusterId>;
                        eventId: import("#types").OptionalFieldType<import("#types").EventId>;
                        isUrgent: import("#types").OptionalFieldType<boolean>;
                    }>>;
                    eventNumber: import("#types").FieldType<import("#types").EventNumber>;
                    priority: import("#types").FieldType<import("#types").EventPriority>;
                    epochTimestamp: import("#types").OptionalFieldType<number | bigint>;
                    systemTimestamp: import("#types").OptionalFieldType<number | bigint>;
                    deltaEpochTimestamp: import("#types").OptionalFieldType<number | bigint>;
                    deltaSystemTimestamp: import("#types").OptionalFieldType<number | bigint>;
                    data: import("#types").OptionalFieldType<import("#types").TlvStream>;
                }>>;
            }>[]>;
            moreChunkedMessages: import("#types").OptionalFieldType<boolean>;
            suppressResponse: import("#types").OptionalFieldType<boolean>;
            interactionModelRevision: import("#types").FieldType<number>;
        }>;
    }>;
    sendInvokeCommand(invokeRequest: InvokeRequest, expectedProcessingTimeMs?: number): Promise<import("#types").TypeFromFields<{
        suppressResponse: import("#types").FieldType<boolean>;
        invokeResponses: import("#types").FieldType<import("#types").TypeFromFields<{
            command: import("#types").OptionalFieldType<import("#types").TypeFromFields<{
                commandPath: import("#types").FieldType<import("#types").TypeFromFields<{
                    endpointId: import("#types").OptionalFieldType<import("#types").EndpointNumber>;
                    clusterId: import("#types").FieldType<import("#types").ClusterId>;
                    commandId: import("#types").FieldType<import("#types").CommandId>;
                }>>;
                commandFields: import("#types").OptionalFieldType<import("#types").TlvStream>;
                commandRef: import("#types").OptionalFieldType<number>;
            }>>;
            status: import("#types").OptionalFieldType<import("#types").TypeFromFields<{
                commandPath: import("#types").FieldType<import("#types").TypeFromFields<{
                    endpointId: import("#types").OptionalFieldType<import("#types").EndpointNumber>;
                    clusterId: import("#types").FieldType<import("#types").ClusterId>;
                    commandId: import("#types").FieldType<import("#types").CommandId>;
                }>>;
                status: import("#types").FieldType<import("#types").TypeFromFields<{
                    status: import("#types").OptionalFieldType<import("#types").Status>;
                    clusterStatus: import("#types").OptionalFieldType<import("#types").Status>;
                }>>;
                commandRef: import("#types").OptionalFieldType<number>;
            }>>;
        }>[]>;
        moreChunkedMessages: import("#types").OptionalFieldType<boolean>;
        interactionModelRevision: import("#types").FieldType<number>;
    }> | undefined>;
    sendWriteCommand(writeRequest: WriteRequest): Promise<import("#types").TypeFromFields<{
        writeResponses: import("#types").FieldType<import("#types").TypeFromFields<{
            path: import("#types").FieldType<import("#types").TypeFromFields<{
                enableTagCompression: import("#types").OptionalFieldType<boolean>;
                nodeId: import("#types").OptionalFieldType<import("#types").NodeId>;
                endpointId: import("#types").OptionalFieldType<import("#types").EndpointNumber>;
                clusterId: import("#types").OptionalFieldType<import("#types").ClusterId>;
                attributeId: import("#types").OptionalFieldType<import("#types").AttributeId>;
                listIndex: import("#types").OptionalFieldType<number | null>;
                wildcardPathFlags: import("#types").OptionalFieldType<import("#types").TypeFromPartialBitSchema<{
                    skipRootNode: import("#types").BitFlag;
                    skipGlobalAttributes: import("#types").BitFlag;
                    skipAttributeList: import("#types").BitFlag;
                    reserved1: import("#types").BitFlag;
                    skipCommandLists: import("#types").BitFlag;
                    skipCustomElements: import("#types").BitFlag;
                    skipFixedAttributes: import("#types").BitFlag;
                    skipChangesOmittedAttributes: import("#types").BitFlag;
                    skipDiagnosticsClusters: import("#types").BitFlag;
                }>>;
            }>>;
            status: import("#types").FieldType<import("#types").TypeFromFields<{
                status: import("#types").OptionalFieldType<import("#types").Status>;
                clusterStatus: import("#types").OptionalFieldType<import("#types").Status>;
            }>>;
        }>[]>;
        interactionModelRevision: import("#types").FieldType<number>;
    }> | undefined>;
    sendTimedRequest(timeoutSeconds: number): Promise<import("#types").TypeFromFields<{
        status: import("#types").FieldType<import("#types").Status>;
        interactionModelRevision: import("#types").FieldType<number>;
    }>>;
    private requestWithSuppressedResponse;
    private request;
}
export {};
//# sourceMappingURL=InteractionMessenger.d.ts.map