/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
/**
 * Get a diagnostic formatter for the specified format.
 *
 * A "diagnostic formatter" converts arbitrary values into a formatted string.  Formatting is controlled by type and the
 * {@link Diagnostic.presentation} and {@link Diagnostic.value} properties.
 */
export declare function LogFormat(format: string): typeof formatPlain;
/**
 * Log stylization support.
 */
export declare namespace LogFormat {
    type Type = typeof PLAIN | typeof ANSI | typeof HTML;
    /** Generate text only */
    const PLAIN = "plain";
    /** Format log messages using ANSI escape codes */
    const ANSI = "ansi";
    /** Format log messages using HTML tags */
    const HTML = "html";
    const plain: typeof formatPlain;
    const ansi: typeof formatAnsi;
    const html: typeof formatHtml;
}
export type DiagnosticProducer = () => string;
declare function formatPlain(diagnostic: unknown, indents?: number): string;
declare function formatAnsi(diagnostic: unknown, indents?: number): string;
declare function formatHtml(diagnostic: unknown): string;
export {};
//# sourceMappingURL=LogFormat.d.ts.map