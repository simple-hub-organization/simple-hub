name: cbj-hub
base: core24
version: '1.4.4'
summary: Hub to control smart device from different vendors with one app.
description: |
  CyBear Jinni Hub to control smart devices from different vendors with one easy-to-use app.

  It is an open-source Hub that keeps your data local by default.

  The Hub will extend the devices basic functionality by acting as a leader and sending signals
  to the devices according to the logic you set it to be.

  The functionality will include activating routines, saving different scense, binding devices so
  that action in one device will trigger other actions in different devices and more.

  You can control the Hub from your android phone

  https://play.google.com/store/apps/details?id=com.cybear_jinni.smart_home

  For the hub to work please install MQTT broker https://snapcraft.io/mosquitto and configure it to be open for requests.

  If you have any questions you can ask in the CyBear Jinni discord server https://discord.gg/mUXfwUY.

grade: stable  # devel/stable, must be 'stable' to release into candidate/stable channels
confinement: strict  # devmode/classic/strict, use 'strict' once you have the right plugs and slots


parts:
  dependent-snaps:
    source: .
    plugin: nil
    stage-snaps:
      - mosquitto
      - node-red
    stage-packages:
      - python3
      - libatomic1
      - ca-certificates
      - libcjson1
      - libssl3t64
      - libwebsockets19t64
#      - libc6-armhf   # For ARMv7 architecture (32-bit)
#      - libc6-arm64   # For ARMv8 architecture (64-bit)
#      - libc.musl     # If using musl libraries
#      - libatomic1    # As a common dependency for atomic operations

#  node: # We dump in a specific version of node/npm from upstream.
#    plugin: dump
#    source:
#      - on amd64: https://nodejs.org/dist/v20.18.3/node-v20.18.3-linux-x64.tar.gz
#      - on armhf: https://nodejs.org/dist/v20.18.3/node-v20.18.3-linux-armv7l.tar.gz
#      - on arm64: https://nodejs.org/dist/v20.18.3/node-v20.18.3-linux-arm64.tar.gz
#      - on s390x: https://nodejs.org/dist/v20.18.3/node-v20.18.3-linux-s390x.tar.gz
#      # - on ppc64el: https://nodejs.org/dist/v20.18.3/node-v20.18.3-linux-ppc64le.tar.gz

  security-bear:
    plugin: nil
    source: .
    after:
      - hub
    override-build: |

      echo "Security Bear build"
      PROJECT_PATH="$HOME/parts/hub/build/apps/security_bear"
      MAIN_FILE="bin/main.dart"
      EXECUTABLE_NAME="Security-Bear"

      cd $HOME/project/
      scripts/bashScripts/nativeExecutableMaker.sh "$PROJECT_PATH" "$MAIN_FILE" "$EXECUTABLE_NAME"
      mv "$EXECUTABLE_NAME" "$SNAPCRAFT_PART_INSTALL/"
      snapcraftctl build

    build-packages:
      - wget
      - unzip
      - git
    stage-packages:
      - iputils-arping
      - iw
      - libbluetooth3
      - libcap2-bin
      - libgudev-1.0-0
      - libjansson4
      - libmbim-glib4
      - libmbim-proxy
      - libmm-glib0
      - libndp0
      - libnewt0.52
      - libnl-3-200
      - libnl-genl-3-200
      - libnm0
      - libpam-cap
      - libpcap0.8
      - libpcsclite1
      - libpolkit-agent-1-0
      - libpolkit-gobject-1-0
      - libqmi-glib5
      - libqmi-proxy
      - libslang2
      - libteamdctl0
      - libusb-1.0-0
      - modemmanager
      - policykit-1
      - ppp
      - pptp-linux
      - usb-modeswitch
      - usb-modeswitch-data
      - wireless-regdb
      - wpasupplicant
      - libatm1

      - network-manager-pptp
      - network-manager

      - wireless-tools

  hub-js:
    #    after: [node, hub, dependent-snaps]
    after: [hub, dependent-snaps]
    plugin: nil
    source: .
    override-build: |
      set -x
      PROJECT_PATH="$HOME/parts/hub/build/apps/hub_javascript"
      MAIN_FILE="src/app.ts"
      EXECUTABLE_NAME="hub-js"
      cd $HOME/project/

      cp -r "$PROJECT_PATH" .

      cd hub_javascript
      rm -rf node_modules/
      rm -rf dist/
      rm -rf package-lock.json
      npm config set registry https://registry.npmjs.org/
      npm install
      #      npx tsc
      cd ..
      mv hub_javascript "$SNAPCRAFT_PART_INSTALL/"

    build-packages:
      - curl
#    stage-packages:
#      - python3
#      - libatomic1

  hub:
    source: https://github.com/simple-hub-organization/simple-hub.git
    plugin: dump
    override-build: |

      rm -rf "$HOME/parts/hub/build/tools/CBJ_App_Snap"
      rm -rf "$HOME/parts/hub/build/tools/CBJ_Smart-Device-Snap"
      rm -rf "$HOME/parts/hub/build/tools/cbj-kubernetes-files"
      rm -rf "$HOME/parts/hub/build/apps/smart_device"
      rm -rf "$HOME/parts/hub/build/apps/site"
      rm -rf "$HOME/parts/hub/build/apps/remote_pipes_routing"
      rm -rf "$HOME/parts/hub/build/apps/remote-pipes"
      rm -rf "$HOME/parts/hub/build/node_modules"
      rm -rf "$HOME/parts/hub/build/.idea"
      rm -rf "$HOME/parts/hub/build/package.json"
      rm -rf "$HOME/parts/hub/build/package-lock.json"
      rm -rf "$HOME/parts/hub/build/README.md"

      PROJECT_PATH="$HOME/parts/hub/build/apps/hub"
      MAIN_FILE="bin/cbj_hub.dart"
      EXECUTABLE_NAME="CyBear-Jinni_Hub"
      cd $HOME/project/
      scripts/bashScripts/nativeExecutableMaker.sh $PROJECT_PATH $MAIN_FILE $EXECUTABLE_NAME
      mv "$EXECUTABLE_NAME" "$SNAPCRAFT_PART_INSTALL/"
      snapcraftctl build

    build-packages:
      - wget
      - unzip
      - gcc
      - g++
    stage-packages:
      - libatlas-base-dev
      - libevent-dev
      # For the ping command to work, become redundant if network-observe plug is introduced in the future
      - iputils-ping

apps:
#  npm:
#    command: bin/npm
#    plugs:
#      - home
#      - network

  security-bear:
    command: Security-Bear $SNAP
    daemon: simple
    install-mode: enable
    restart-condition: always
    plugs: [network, network-bind, network-manager, network-observe]

#  hub-js:
#    command: tools/CBJ_Hub_Snap/scripts/bashScripts/start_hub_js.sh
#    daemon: simple
#    install-mode: enable
#    restart-condition: always
#    plugs: [network, network-bind]

  hub:
    command: CyBear-Jinni_Hub $SNAP
    daemon: simple
    install-mode: enable
    restart-condition: always
    plugs: [network, network-bind, hardware-observe, system-observe, avahi-control, avahi-observe]
    # plugs: [network, network-bind, hardware-observe, system-observe, avahi-control, firewall-control, network-control, network-observe, process-control, system-trace, bluetooth-control, netlink-audit, netlink-connector, qualcomm-ipc-router]

  node-red:
    command: bin/startNR
    daemon: simple
    install-mode: enable
    restart-condition: always
    plugs:
      - network
      - network-bind

  mosquitto:
    command: launcher.sh
    daemon: simple
    install-mode: enable
    restart-condition: always
    plugs: [ home, network, network-bind ]